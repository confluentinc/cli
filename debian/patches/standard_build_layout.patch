--- cli/Makefile	2025-04-22 12:26:19.771232015 -0500
+++ debian/Makefile	2025-02-12 09:00:49.891230440 -0600
@@ -1,268 +1,163 @@
-### BEGIN HEADERS ###
-# This block is managed by ServiceBot plugin - Make. The content in this block is created using a common
-# template and configurations in service.yml.
-# Modifications in this block will be overwritten by generated content in the nightly run.
-# For more information, please refer to the page:
-# https://confluentinc.atlassian.net/wiki/spaces/Foundations/pages/2871328913/Add+Make
-SERVICE_NAME := cli
-SERVICE_DEPLOY_NAME := cli
-
-### END HEADERS ###
-### BEGIN MK-INCLUDE UPDATE ###
-### This section is managed by service-bot and should not be edited here.
-### You can make changes upstream in https://github.com/confluentinc/cc-service-bot
-
-CURL ?= curl
-FIND ?= find
-TAR ?= tar
-
-# Mount netrc so curl can work from inside a container
-DOCKER_NETRC_MOUNT ?= 1
-
-GITHUB_API = api.github.com
-GITHUB_MK_INCLUDE_OWNER := confluentinc
-GITHUB_MK_INCLUDE_REPO := cc-mk-include
-GITHUB_API_CC_MK_INCLUDE := https://$(GITHUB_API)/repos/$(GITHUB_MK_INCLUDE_OWNER)/$(GITHUB_MK_INCLUDE_REPO)
-GITHUB_API_CC_MK_INCLUDE_TARBALL := $(GITHUB_API_CC_MK_INCLUDE)/tarball
-GITHUB_API_CC_MK_INCLUDE_VERSION ?= $(GITHUB_API_CC_MK_INCLUDE_TARBALL)/$(MK_INCLUDE_VERSION)
-
-MK_INCLUDE_DIR := mk-include
-MK_INCLUDE_LOCKFILE := .mk-include-lockfile
-MK_INCLUDE_TIMESTAMP_FILE := .mk-include-timestamp
-# For optimum performance, you should override MK_INCLUDE_TIMEOUT_MINS above the managed section headers to be
-# a little longer than the worst case cold build time for this repo.
-MK_INCLUDE_TIMEOUT_MINS ?= 240
-# If this latest validated release is breaking you, please file a ticket with DevProd describing the issue, and
-# if necessary you can temporarily override MK_INCLUDE_VERSION above the managed section headers until the bad
-# release is yanked.
-MK_INCLUDE_VERSION ?= v0.1356.0
-
-# Make sure we always have a copy of the latest cc-mk-include release less than $(MK_INCLUDE_TIMEOUT_MINS) old:
-# Note: The simply-expanded make variable makes sure this is run once per make invocation.
-UPDATE_MK_INCLUDE := $(shell \
-	func_fatal() { echo "$$*" >&2; echo output here triggers error below; exit 1; } ; \
-	test -z "`git ls-files $(MK_INCLUDE_DIR)`" || { \
-		func_fatal 'fatal: checked in $(MK_INCLUDE_DIR)/ directory is preventing make from fetching recent cc-mk-include releases for CI'; \
-	} ; \
-	trap "rm -f $(MK_INCLUDE_LOCKFILE); exit" 0 2 3 15; \
-	waitlock=0; while ! ( set -o noclobber; echo > $(MK_INCLUDE_LOCKFILE) ); do \
-	   sleep $$waitlock; waitlock=`expr $$waitlock + 1`; \
-	   test 14 -lt $$waitlock && { \
-	      echo 'stealing stale lock after 105s' >&2; \
-	      break; \
-	   } \
-	done; \
-	test -s $(MK_INCLUDE_TIMESTAMP_FILE) || rm -f $(MK_INCLUDE_TIMESTAMP_FILE); \
-	{ test -d $(MK_INCLUDE_DIR) && test -d /proc && test -z "$(cat /proc/1/sched 2>&1 |head -n 1 |grep init)"; } || \
-	test -z "`$(FIND) $(MK_INCLUDE_TIMESTAMP_FILE) -mmin +$(MK_INCLUDE_TIMEOUT_MINS) 2>&1`" || { \
-	   GHAUTH=$$(grep -sq 'machine $(GITHUB_API)' ~/.netrc && echo netrc || \
-	     ( command -v gh > /dev/null && gh auth status -h github.com > /dev/null && echo gh )); \
-	   test -n "$$GHAUTH" || \
-	     func_fatal 'error: no GitHub token available via "~/.netrc" or "gh auth status".\nFollow https://confluentinc.atlassian.net/l/cp/0WXXRLDh to setup GitHub authentication.\n'; \
-	   echo "downloading $(GITHUB_MK_INCLUDE_OWNER)/$(GITHUB_MK_INCLUDE_REPO) $(MK_INCLUDE_VERSION) using $$GHAUTH" >&2; \
-	   if [ "netrc" = "$$GHAUTH" ]; then \
-	     $(CURL) --fail --silent --netrc --location "$(GITHUB_API_CC_MK_INCLUDE_VERSION)" --output $(MK_INCLUDE_TIMESTAMP_FILE)T --write-out '$(GITHUB_API_CC_MK_INCLUDE_VERSION): %{errormsg}\n' >&2; \
-	   else \
-	     gh release download --clobber --repo=$(GITHUB_MK_INCLUDE_OWNER)/$(GITHUB_MK_INCLUDE_REPO) \
-	        --archive=tar.gz --output $(MK_INCLUDE_TIMESTAMP_FILE)T $(MK_INCLUDE_VERSION) >&2; \
-	   fi \
-	   && TMP_MK_INCLUDE_DIR=$$(mktemp -d -t cc-mk-include.XXXXXXXXXX) \
-	   && $(TAR) -C $$TMP_MK_INCLUDE_DIR --strip-components=1 -zxf $(MK_INCLUDE_TIMESTAMP_FILE)T \
-	   && rm -rf $$TMP_MK_INCLUDE_DIR/tests \
-	   && rm -rf $(MK_INCLUDE_DIR) \
-	   && mv $$TMP_MK_INCLUDE_DIR $(MK_INCLUDE_DIR) \
-	   && mv -f $(MK_INCLUDE_TIMESTAMP_FILE)T $(MK_INCLUDE_TIMESTAMP_FILE) \
-	   && echo 'installed cc-mk-include $(MK_INCLUDE_VERSION) from $(GITHUB_MK_INCLUDE_OWNER)/$(GITHUB_MK_INCLUDE_REPO)' >&2 \
-	   || func_fatal unable to install cc-mk-include $(MK_INCLUDE_VERSION) from $(GITHUB_MK_INCLUDE_OWNER)/$(GITHUB_MK_INCLUDE_REPO) \
-	   ; \
-	} || { \
-	   rm -f $(MK_INCLUDE_TIMESTAMP_FILE)T; \
-	   if test -f $(MK_INCLUDE_TIMESTAMP_FILE); then \
-	      touch $(MK_INCLUDE_TIMESTAMP_FILE); \
-	      func_fatal 'unable to access $(GITHUB_MK_INCLUDE_REPO) fetch API to check for latest release; next try in $(MK_INCLUDE_TIMEOUT_MINS) minutes'; \
-	   else \
-	      func_fatal 'unable to access $(GITHUB_MK_INCLUDE_REPO) fetch API to bootstrap mk-include subdirectory'; \
-	   fi; \
-	} \
-)
-ifneq ($(UPDATE_MK_INCLUDE),)
-    $(error mk-include update failed)
-endif
+SHELL=/bin/bash
 
-# Export the (empty) .mk-include-check-FORCE target to allow users to trigger the mk-include
-# download code above via make but without having to run any of the other targets, e.g. build.
-.PHONY: .mk-include-check-FORCE
-.mk-include-check-FORCE:
-	@echo -n ""
-### END MK-INCLUDE UPDATE ###
-### BEGIN INCLUDES ###
-# This block is managed by ServiceBot plugin - Make. The content in this block is created using a common
-# template and configurations in service.yml.
-# Modifications in this block will be overwritten by generated content in the nightly run. To include
-# additional mk files, please add them before or after this generated block.
-# For more information, please refer to the page:
-# https://confluentinc.atlassian.net/wiki/spaces/Foundations/pages/2871328913/Add+Make
-include ./mk-include/cc-begin.mk
-include ./mk-include/cc-semver.mk
-include ./mk-include/cc-semaphore.mk
-include ./mk-include/cc-testbreak.mk
-include ./mk-include/cc-vault.mk
-include ./mk-include/cc-sonarqube.mk
-include ./mk-include/cc-end.mk
-### END INCLUDES ###
-
-SHELL := /bin/bash
-GORELEASER_VERSION := v1.21.2
-
-# Compile natively based on the current system
-.PHONY: build
-build:
-ifneq "" "$(findstring NT,$(shell uname))" # windows
-	CC=gcc CXX=g++ $(MAKE) cli-builder
-else ifneq (,$(findstring Linux,$(shell uname)))
-	ifneq (,$(findstring musl,$(shell ldd --version))) # linux (musl)
-		CC=gcc CXX=g++ TAGS=musl $(MAKE) cli-builder
-	else # linux (glibc)
-		CC=gcc CXX=g++ $(MAKE) cli-builder
-	endif
-else # darwin
-	$(MAKE) cli-builder
+ifndef VERSION
+	VERSION=$(CLI_VERSION)
 endif
 
-# Cross-compile from darwin to any of the OS/Arch pairs below
-.PHONY: cross-build
-cross-build:
-ifeq ($(GOARCH),arm64)
-	ifeq ($(GOOS),linux) # linux/arm64
-		CC=aarch64-linux-musl-gcc CXX=aarch64-linux-musl-g++ CGO_LDFLAGS="-static" TAGS=musl $(MAKE) cli-builder
-	else # darwin/arm64
-		$(MAKE) cli-builder
-	endif
-else
-	ifeq ($(GOOS),windows) # windows/amd64
-		CC=x86_64-w64-mingw32-gcc CXX=x86_64-w64-mingw32-g++ CGO_LDFLAGS="-fstack-protector -static" $(MAKE) cli-builder
-	else ifeq ($(GOOS),linux) # linux/amd64
-		CC=x86_64-linux-musl-gcc CXX=x86_64-linux-musl-g++ CGO_LDFLAGS="-static" TAGS=musl $(MAKE) cli-builder
-	else # darwin/amd64
-		$(MAKE) cli-builder
-	endif
-endif
+export PACKAGE_TITLE=cli
+export FULL_PACKAGE_TITLE=confluent-$(PACKAGE_TITLE)
+export PACKAGE_NAME=$(FULL_PACKAGE_TITLE)-$(VERSION)
 
-.PHONY: cli-builder
-cli-builder:
-	GOOS="" GOARCH="" CC="" CXX="" CGO_LDFLAGS="" go install github.com/goreleaser/goreleaser@$(GORELEASER_VERSION)
-
-ifeq ($(GOLANG_FIPS),1)
-	wget "https://go.dev/dl/go$$(cat .go-version).src.tar.gz" && \
-	tar -xf go$$(cat .go-version).src.tar.gz && \
-	git clone --branch go$$(cat .go-version)-1-openssl-fips --depth 1 https://github.com/golang-fips/go.git go-openssl && \
-	cd go/ && \
-	cat ../go-openssl/patches/*.patch | patch -p1 && \
-	sed -i '' 's/linux/darwin/' src/crypto/internal/backend/nobackend.go && \
-	sed -i '' 's/linux/darwin/' src/crypto/internal/backend/openssl.go && \
-	sed -i '' 's/"libcrypto.so.%s"/"libcrypto.%s.dylib"/' src/crypto/internal/backend/openssl.go && \
-	cd src/ && \
-	./make.bash && \
-	cd ../../
-	PATH=$$(pwd)/go/bin:$$PATH GOROOT=$$(pwd)/go TAGS=$(TAGS) CC=$(CC) CXX=$(CXX) CGO_LDFLAGS=$(CGO_LDFLAGS) goreleaser build --clean --single-target --snapshot
-	rm -rf go go-openssl go$$(cat .go-version).src.tar.gz
-else
-	TAGS=$(TAGS) CC=$(CC) CXX=$(CXX) CGO_LDFLAGS=$(CGO_LDFLAGS) goreleaser build --clean --single-target --snapshot
-endif
+# Defaults that are likely to vary by platform. These are cleanly separated so
+# it should be easy to maintain altered values on platform-specific branches
+# when the values aren't overridden by the script invoking the Makefile
 
-include ./mk-files/semver.mk
-include ./mk-files/docs.mk
-include ./mk-files/dry-run.mk
-include ./mk-files/release.mk
-include ./mk-files/release-test.mk
-
-S3_DEB_RPM_BUCKET_NAME=confluent-cli-release
-S3_DEB_RPM_PROD_PREFIX=confluent-cli
-S3_DEB_RPM_PROD_PATH=s3://$(S3_DEB_RPM_BUCKET_NAME)/$(S3_DEB_RPM_PROD_PREFIX)
-S3_DEB_RPM_STAG_PATH=s3://$(S3_DEB_RPM_BUCKET_NAME)/confluent-cli-staging
+APPLY_PATCHES?=yes
 
-.PHONY: clean
-clean:
-	for dir in bin dist docs legal prebuilt release-notes; do \
-		[ -d $$dir ] && rm -r $$dir || true; \
-	done
-
-.PHONY: lint
-lint: lint-go lint-cli
-
-.PHONY: lint-go
-lint-go:
-	go install github.com/golangci/golangci-lint/cmd/golangci-lint@v1.64.8 && \
-	golangci-lint run --timeout 10m
-	@echo "✅  golangci-lint"
-
-.PHONY: lint-cli
-lint-cli: cmd/lint/en_US.aff cmd/lint/en_US.dic
-	go run cmd/lint/main.go -aff-file $(word 1,$^) -dic-file $(word 2,$^) $(ARGS)
-	@echo "✅  cmd/lint/main.go"
-
-cmd/lint/en_US.aff:
-	curl -s "https://chromium.googlesource.com/chromium/deps/hunspell_dictionaries/+/master/en_US.aff?format=TEXT" | base64 -D > $@
-
-cmd/lint/en_US.dic:
-	curl -s "https://chromium.googlesource.com/chromium/deps/hunspell_dictionaries/+/master/en_US.dic?format=TEXT" | base64 -D > $@
-
-.PHONY: unit-test
-unit-test:
-ifdef CI
-	go install gotest.tools/gotestsum@v1.12.1 && \
-	gotestsum --junitfile unit-test-report.xml -- -timeout 0 -v -race -coverprofile=coverage.unit.out -covermode=atomic $$(go list ./... | grep -v github.com/confluentinc/cli/v4/test)
-else
-	go test -timeout 0 -v -coverprofile=coverage.unit.out -covermode=atomic $$(go list ./... | grep -v github.com/confluentinc/cli/v4/test) $(UNIT_TEST_ARGS)
+# DESTDIR may be overridden by e.g. debian packaging
+ifeq ($(DESTDIR),)
+DESTDIR=$(CURDIR)/BUILD/
 endif
 
-.PHONY: build-for-integration-test
-build-for-integration-test:
-ifdef CI
-	go build -cover -ldflags="-s -w -X main.commit="00000000" -X main.date="1970-01-01T00:00:00Z" -X main.isTest=true" -o test/bin/confluent ./cmd/confluent
+ifeq ($(PACKAGE_TYPE),archive)
+PREFIX=$(PACKAGE_NAME)
+SYSCONFDIR=$(PREFIX)/etc/$(PACKAGE_TITLE)
 else
-	go build -ldflags="-s -w -X main.commit="00000000" -X main.date="1970-01-01T00:00:00Z" -X main.isTest=true" -o test/bin/confluent ./cmd/confluent
+PREFIX=/usr
+SYSCONFDIR=/etc/$(PACKAGE_TITLE)
 endif
 
-.PHONY: build-for-integration-test-windows
-build-for-integration-test-windows:
-ifdef CI
-	go build -cover -ldflags="-s -w -X main.commit="00000000" -X main.date="1970-01-01T00:00:00Z" -X main.isTest=true" -o test/bin/confluent.exe ./cmd/confluent
-else
-	go build -ldflags="-s -w -X main.commit="00000000" -X main.date="1970-01-01T00:00:00Z" -X main.isTest=true" -o test/bin/confluent.exe ./cmd/confluent
-endif
+_empty :=
+_space := $(_empty) $(empty)
+split_version := $(subst .,$(_space),$(CLI_VERSION))
 
-.PHONY: integration-test
-integration-test:
-ifdef CI
-	go install gotest.tools/gotestsum@v1.12.1 && \
-	export GOCOVERDIR=test/coverage && \
-	rm -rf $${GOCOVERDIR} && mkdir $${GOCOVERDIR} && \
-	gotestsum --junitfile integration-test-report.xml -- -timeout 0 -v -race -coverprofile=coverage.integration.out -covermode=atomic $$(go list ./... | grep github.com/confluentinc/cli/v4/test) && \
-	go tool covdata textfmt -i $${GOCOVERDIR} -o test/coverage.out
-else
-	go test -timeout 0 -v -coverprofile=coverage.integration.out -covermode=atomic $$(go list ./... | grep github.com/confluentinc/cli/v4/test) $(INTEGRATION_TEST_ARGS)
+all: install
+
+archive: install
+	rm -f $(CURDIR)/$(PACKAGE_NAME).tar.gz && cd $(DESTDIR) && tar -czf $(CURDIR)/$(PACKAGE_NAME).tar.gz $(PREFIX)
+	rm -f $(CURDIR)/$(PACKAGE_NAME).zip && cd $(DESTDIR) && zip -r $(CURDIR)/$(PACKAGE_NAME).zip $(PREFIX)
+
+apply-patches: $(wildcard debian/patches/*)
+ifeq ($(APPLY_PATCHES),yes)
+	git reset --hard HEAD
+	cat debian/patches/series | xargs -iPATCH bash -c 'patch -p1 < debian/patches/PATCH'
 endif
 
-.PHONY: test
-test: unit-test integration-test
-	@echo "mode: atomic" > coverage.txt
-	@tail -n +2 coverage.unit.out >> coverage.txt
-	@tail -n +2 coverage.integration.out >> coverage.txt
-	@echo "Coverage data saved to: coverage.txt"
-
-.PHONY: generate-packaging-patch
-generate-packaging-patch:
-	diff -u Makefile debian/Makefile | sed "1 s_Makefile_cli/Makefile_" > debian/patches/standard_build_layout.patch
-
-.PHONY: coverage
-coverage: test
-	@echo "Merging coverage data..."
-	@echo "mode: atomic" > coverage.out
-	@tail -n +2 coverage.unit.out >> coverage.out
-	@tail -n +2 coverage.integration.out >> coverage.out
-	@echo "Generating coverage reports..."
-	go tool cover -html=coverage.out -o coverage.html
-	go tool cover -func=coverage.out
-	@echo "Coverage report generated: coverage.html"
-	@echo "Coverage data saved to: coverage.out"
+BINPATH=$(PREFIX)/bin
+LIBPATH=$(PREFIX)/libexec/$(PACKAGE_TITLE)
+DOCPATH=$(PREFIX)/share/doc/$(PACKAGE_TITLE)
+
+# Notes on the archive download links:
+# As of v3.0.0, the version number no longer has the 'v' prefix
+# As of v3.43.0, we download the '_disableupdates' variant
+# As of v4.1.0, the base URL is 'packages.confluent.io' and there is no version in the archive/binary name
+install: apply-patches
+	rm -rf $(DESTDIR)$(PREFIX)
+	mkdir -p $(DESTDIR)$(PREFIX)
+
+	mkdir -p $(DESTDIR)$(BINPATH)
+	mkdir -p $(DESTDIR)$(LIBPATH)
+	mkdir -p $(DESTDIR)$(DOCPATH)
+	mkdir -p $(DESTDIR)$(SYSCONFDIR)
+
+	cp packaging/confluent.sh $(DESTDIR)$(BINPATH)/confluent
+	chmod 755 $(DESTDIR)$(BINPATH)/confluent
+
+	cd $(DESTDIR)$(LIBPATH); \
+	v=""; if [[ $(word 1,$(split_version)) -eq 2 ]]; then v="v"; fi; \
+	disableupdates=""; if [[ $(word 1,$(split_version)) -ge 3 && $(word 2,$(split_version)) -ge 43 ]]; then disableupdates="_disableupdates"; fi; \
+	baseurl="s3-us-west-2.amazonaws.com/confluent.cloud"; if [[ $(word 1,$(split_version)) -ge 4 && $(word 2,$(split_version)) -ge 1 ]]; then baseurl="packages.confluent.io"; fi; \
+	version="_$${v}$(CLI_VERSION)"; if [[ $(word 1,$(split_version)) -ge 4 && $(word 2,$(split_version)) -ge 1 ]]; then version=""; fi; \
+	for dir in darwin_amd64 darwin_arm64 linux_amd64 linux_arm64; do \
+		archive=confluent$${version}_$${dir}$${disableupdates}.tar.gz; \
+		curl -fs https://$${baseurl}/confluent-cli/archives/$(CLI_VERSION)/$${archive} -o $${archive}; \
+		mkdir -p $${dir} $${dir}-temp; \
+		tar -xzf $${archive} -C $${dir}-temp confluent/confluent; \
+		mv $${dir}-temp/confluent/confluent $${dir}/confluent; \
+		rm -rf $${archive} $${dir}-temp; \
+		chmod 755 $${dir}/confluent; \
+	done; \
+	mkdir -p windows_amd64; \
+	version="_$(CLI_VERSION)"; if [[ $(word 1,$(split_version)) -ge 4 && $(word 2,$(split_version)) -ge 1 ]]; then version=""; fi; \
+	filepath=windows_amd64/confluent.exe; \
+	curl -fs https://$${baseurl}/confluent-cli/binaries/$(CLI_VERSION)/confluent$${version}_windows_amd64.exe -o $${filepath}; \
+	chmod 755 $${filepath}
+
+	cp LICENSE $(DESTDIR)$(DOCPATH)/COPYRIGHT
+	$(DESTDIR)$(BINPATH)/confluent --version | awk -F' ' '{ print $3 }' > $(DESTDIR)$(DOCPATH)/version.txt
+
+	chown -R root:root $(DESTDIR)$(PREFIX)
+
+clean:
+	rm -rf $(CURDIR)/$(PACKAGE_NAME)*
+	rm -rf $(FULL_PACKAGE_TITLE)-$(RPM_VERSION)*rpm
+	rm -rf RPM_BUILDING
+
+distclean: clean
+ifneq ($(PACKAGE_TYPE),deb)
+	git reset --hard HEAD
+	git status --ignored --porcelain | cut -d ' ' -f 2 | xargs rm -rf
+endif
+
+RPM_VERSION=$(shell echo $(VERSION) | sed -e 's/-alpha[0-9]*//' -e 's/-beta[0-9]*//' -e 's/-rc[0-9]*//' -e 's/-SNAPSHOT//' -e 's/-cp[0-9]*//' -e 's/-hotfix[0-9]*//' -e 's/-[0-9]*//')
+
+# Get any -alpha, -beta (preview), -rc (release candidate), -SNAPSHOT (nightly), -cp (confluent patch), -hotfix piece that we need to put into the Release part of
+# the version since RPM versions don't support non-numeric
+# characters. Ultimately, for something like 0.8.2-beta, we want to end up with
+# Version=0.8.2 Release=0.X.beta
+# where X is the RPM release # of 0.8.2-beta (the prefix 0. forces this to be
+# considered earlier than any 0.8.2 final releases since those will start with
+# Version=0.8.2 Release=1)
+RPM_RELEASE_POSTFIX=$(subst -,,$(subst $(RPM_VERSION),,$(VERSION)))
+ifneq ($(RPM_RELEASE_POSTFIX),)
+	RPM_RELEASE_POSTFIX_UNDERSCORE=_$(RPM_RELEASE_POSTFIX)
+	RPM_RELEASE_ID=0.$(REVISION).$(RPM_RELEASE_POSTFIX)
+else
+	RPM_RELEASE_ID=$(REVISION)
+endif
+
+rpm: rpm-amd64-build rpm-arm64-build
+
+rpm-amd64-build: rpm-amd64-spec
+	echo "Building the amd64 RPM"
+	rpmbuild --define="_topdir `pwd`/RPM_BUILDING" --nodebuginfo -tb RPM_BUILDING/SOURCES/$(FULL_PACKAGE_TITLE)-$(RPM_VERSION).tar.gz || rpmbuild --define="_topdir `pwd`/RPM_BUILDING" -tb RPM_BUILDING/SOURCES/$(FULL_PACKAGE_TITLE)-$(RPM_VERSION).tar.gz
+
+rpm-arm64-build: rpm-arm64-spec
+	echo "Building the arm64 RPM"
+	rpmbuild --target=aarch64 --define="_topdir `pwd`/RPM_BUILDING" --nodebuginfo -tb RPM_BUILDING/SOURCES/$(FULL_PACKAGE_TITLE)-$(RPM_VERSION).tar.gz || rpmbuild --target=aarch64 --define="_topdir `pwd`/RPM_BUILDING" -tb RPM_BUILDING/SOURCES/$(FULL_PACKAGE_TITLE)-$(RPM_VERSION).tar.gz
+	find RPM_BUILDING/{,S}RPMS/ -type f | xargs -n1 -iXXX mv XXX .
+	echo
+	echo "================================================="
+	echo "The RPMs have been created and can be found here:"
+	@ls -laF $(FULL_PACKAGE_TITLE)*rpm
+	echo "================================================="
+
+# Unfortunately, because of version naming issues and the way rpmbuild expects
+# the paths in the tar file to be named, we need to rearchive the package. So
+# instead of depending on archive, this target just uses the unarchived,
+# installed version to generate a new archive. Note that we always regenerate
+# the symlink because the RPM_VERSION doesn't include all the version info -- it
+# can leave of things like -beta, -rc1, etc.
+rpm-amd64-spec: rpm-build-area install debian/$(FULL_PACKAGE_TITLE).spec.in RELEASE_$(RPM_VERSION)$(RPM_RELEASE_POSTFIX_UNDERSCORE)
+	rm -rf $(FULL_PACKAGE_TITLE)-$(RPM_VERSION)
+	mkdir $(FULL_PACKAGE_TITLE)-$(RPM_VERSION)
+	cp -R $(DESTDIR)/* $(FULL_PACKAGE_TITLE)-$(RPM_VERSION)
+	sed "s/##RPMVERSION##/$(RPM_VERSION)/g; s/##RPMRELEASE##/$(RPM_RELEASE_ID)/g; s/##EXCLUDEARCH##/arm64/g" < debian/$(FULL_PACKAGE_TITLE).spec.in > $(FULL_PACKAGE_TITLE)-$(RPM_VERSION)/$(FULL_PACKAGE_TITLE).spec
+	rm -f $@ && tar -czf RPM_BUILDING/SOURCES/$(FULL_PACKAGE_TITLE)-$(RPM_VERSION).tar.gz $(FULL_PACKAGE_TITLE)-$(RPM_VERSION)
+	rm -rf $(FULL_PACKAGE_TITLE)-$(RPM_VERSION)
+
+rpm-arm64-spec:
+	rm -rf $(FULL_PACKAGE_TITLE)-$(RPM_VERSION)
+	mkdir $(FULL_PACKAGE_TITLE)-$(RPM_VERSION)
+	cp -R $(DESTDIR)/* $(FULL_PACKAGE_TITLE)-$(RPM_VERSION)
+	sed "s/##RPMVERSION##/$(RPM_VERSION)/g; s/##RPMRELEASE##/$(RPM_RELEASE_ID)/g; s/##EXCLUDEARCH##/amd64/g" < debian/$(FULL_PACKAGE_TITLE).spec.in > $(FULL_PACKAGE_TITLE)-$(RPM_VERSION)/$(FULL_PACKAGE_TITLE).spec
+	rm -f $@ && tar -czf RPM_BUILDING/SOURCES/$(FULL_PACKAGE_TITLE)-$(RPM_VERSION).tar.gz $(FULL_PACKAGE_TITLE)-$(RPM_VERSION)
+	rm -rf $(FULL_PACKAGE_TITLE)-$(RPM_VERSION)
+
+rpm-build-area: RPM_BUILDING/BUILD RPM_BUILDING/RPMS RPM_BUILDING/SOURCES RPM_BUILDING/SPECS RPM_BUILDING/SRPMS
+
+RPM_BUILDING/%:
+	mkdir -p $@
+
+RELEASE_%:
+	echo 0 > $@
