--- cli/Makefile	2022-12-02 22:32:14.000000000 -0800
+++ debian/Makefile	2022-12-02 22:48:08.000000000 -0800
@@ -1,222 +1,89 @@
-SHELL           := /bin/bash
-ALL_SRC         := $(shell find . -name "*.go" | grep -v -e vendor)
-GIT_REMOTE_NAME ?= origin
-MAIN_BRANCH     ?= main
-RELEASE_BRANCH  ?= main
-
-.PHONY: build # compile natively based on the system
-build:
-ifneq "" "$(findstring NT,$(shell uname))" # build for Windows
-	CC=gcc CXX=g++ make cli-builder
-else ifneq (,$(findstring Linux,$(shell uname)))
-    ifneq (,$(findstring musl,$(shell ldd --version))) # build for musl Linux
-		CC=gcc CXX=g++ TAGS=musl make cli-builder
-    else # build for glibc Linux
-		CC=gcc CXX=g++ make cli-builder
-    endif
-else # build for Darwin
-	make cli-builder
-endif
+SHELL=/bin/bash
 
-.PHONY: cross-build # cross-compile from Darwin/amd64 machine to Win64, Linux64 and Darwin/arm64
-cross-build:
-ifeq ($(GOARCH),arm64)
-    ifeq ($(GOOS),linux)
-		CGO_ENABLED=1 CC=aarch64-linux-musl-gcc CXX=aarch64-linux-musl-g++ CGO_LDFLAGS="-static" TAGS=musl make cli-builder
-    else # build for darwin/arm64
-		CGO_ENABLED=1 make cli-builder
-    endif
-else # build for amd64 arch
-    ifeq ($(GOOS),windows)
-		CGO_ENABLED=1 CC=x86_64-w64-mingw32-gcc CXX=x86_64-w64-mingw32-g++ CGO_LDFLAGS="-static" make cli-builder
-    else ifeq ($(GOOS),linux) 
-		CGO_ENABLED=1 CC=x86_64-linux-musl-gcc CXX=x86_64-linux-musl-g++ CGO_LDFLAGS="-static" TAGS=musl make cli-builder
-    else # build for Darwin/amd64
-		CGO_ENABLED=1 make cli-builder
-    endif
+ifndef VERSION
+	VERSION=$(CLI_VERSION)
 endif
 
-.PHONY: cli-builder
-cli-builder:
-	@GOPRIVATE=github.com/confluentinc TAGS=$(TAGS) CGO_ENABLED=$(CGO_ENABLED) CC=$(CC) CXX=$(CXX) CGO_LDFLAGS=$(CGO_LDFLAGS) VERSION=$(VERSION) goreleaser build -f .goreleaser-build.yml --rm-dist --single-target --snapshot
-
-include ./mk-files/dockerhub.mk
-include ./mk-files/semver.mk
-include ./mk-files/docs.mk
-include ./mk-files/release.mk
-include ./mk-files/release-test.mk
-include ./mk-files/release-notes.mk
-include ./mk-files/unrelease.mk
-include ./mk-files/usage.mk
-include ./mk-files/utils.mk
-
-REF := $(shell [ -d .git ] && git rev-parse --short HEAD || echo "none")
-DATE := $(shell date -u +"%Y-%m-%dT%H:%M:%SZ")
-RESOLVED_PATH=github.com/confluentinc/cli/cmd/confluent
-RDKAFKA_VERSION = 1.9.3-RC3
-
-S3_BUCKET_PATH=s3://confluent.cloud
-S3_STAG_FOLDER_NAME=cli-release-stag
-S3_STAG_PATH=s3://confluent.cloud/$(S3_STAG_FOLDER_NAME)
+export PACKAGE_TITLE=cli
+export FULL_PACKAGE_TITLE=confluent-$(PACKAGE_TITLE)
+export PACKAGE_NAME=$(FULL_PACKAGE_TITLE)-$(VERSION)
 
-.PHONY: clean
-clean:
-	@for dir in bin dist docs legal release-notes; do \
-		[ -d $$dir ] && rm -r $$dir || true ; \
-	done
+# Defaults that are likely to vary by platform. These are cleanly separated so
+# it should be easy to maintain altered values on platform-specific branches
+# when the values aren't overridden by the script invoking the Makefile
 
-.PHONY: generate
-generate:
-	@go generate ./...
-
-.PHONY: deps
-deps:
-	go install github.com/golangci/golangci-lint/cmd/golangci-lint@v1.49.0 && \
-	go install github.com/google/go-licenses@v1.4.0 && \
-	go install github.com/goreleaser/goreleaser@v1.11.2 && \
-	go install gotest.tools/gotestsum@v1.8.2
-
-.PHONY: jenkins-deps
-jenkins-deps:
-	go install github.com/goreleaser/goreleaser@v1.11.2
-
-show-args:
-	@echo "VERSION: $(VERSION)"
-
-#
-# START DEVELOPMENT HELPERS
-# Usage: make run -- version
-#        make run -- --version
-#
-
-# If the first argument is "run"...
-ifeq (run,$(firstword $(MAKECMDGOALS)))
-  # use the rest as arguments for "run"
-  RUN_ARGS := $(wordlist 2,$(words $(MAKECMDGOALS)),$(MAKECMDGOALS))
-  # ...and turn them into do-nothing targets
-  $(eval $(RUN_ARGS):;@:)
-endif
+APPLY_PATCHES?=yes
 
-.PHONY: run
-run:
-	@GOPRIVATE=github.com/confluentinc go run cmd/confluent/main.go $(RUN_ARGS)
-
-#
-# END DEVELOPMENT HELPERS
-#
-
-.PHONY: build-integ-nonrace
-build-integ-nonrace:
-	go test ./cmd/confluent -ldflags="-s -w \
-		-X $(RESOLVED_PATH).commit=$(REF) \
-		-X $(RESOLVED_PATH).date=$(DATE) \
-		-X $(RESOLVED_PATH).version=$(VERSION) \
-		-X $(RESOLVED_PATH).isTest=true" \
-		-tags testrunmain -coverpkg=./... -c -o bin/confluent_test
-
-.PHONY: build-integ-race
-build-integ-race:
-	go test ./cmd/confluent -ldflags="-s -w \
-		-X $(RESOLVED_PATH).commit=$(REF) \
-		-X $(RESOLVED_PATH).date=$(DATE) \
-		-X $(RESOLVED_PATH).version=$(VERSION) \
-		-X $(RESOLVED_PATH).isTest=true" \
-		-tags testrunmain -coverpkg=./... -c -o bin/confluent_test_race -race
-
-.PHONY: build-integ-nonrace-windows
-build-integ-nonrace-windows:
-	go test ./cmd/confluent -ldflags="-s -w \
-		-X $(RESOLVED_PATH).commit=12345678 \
-		-X $(RESOLVED_PATH).date=2000-01-01T00:00:00Z \
-		-X $(RESOLVED_PATH).version=$(VERSION) \
-		-X $(RESOLVED_PATH).isTest=true" \
-		-tags testrunmain -coverpkg=./... -c -o bin/confluent_test.exe
-
-.PHONY: build-integ-race-windows
-build-integ-race-windows:
-	go test ./cmd/confluent -ldflags="-s -w \
-		-X $(RESOLVED_PATH).commit=12345678 \
-		-X $(RESOLVED_PATH).date=2000-01-01T00:00:00Z \
-		-X $(RESOLVED_PATH).version=$(VERSION) \
-		-X $(RESOLVED_PATH).isTest=true" \
-		-tags testrunmain -coverpkg=./... -c -o bin/confluent_test_race.exe -race
-
-# If you setup your laptop following https://github.com/confluentinc/cc-documentation/blob/master/Operations/Laptop%20Setup.md
-# then assuming caas.sh lives here should be fine
-define aws-authenticate
-	source ~/git/go/src/github.com/confluentinc/cc-dotfiles/caas.sh && if ! aws sts get-caller-identity; then eval $$(gimme-aws-creds --output-format export --roles "arn:aws:iam::050879227952:role/administrator"); fi
-endef
-
-.PHONY: fmt
-fmt:
-	@goimports -e -l -local github.com/confluentinc/cli/ -w $(ALL_SRC)
-
-.PHONY: lint
-lint:
-	make lint-go
-	make lint-cli
-
-.PHONY: lint-go
-lint-go:
-	@golangci-lint run --timeout=10m
-	@echo "✅  golangci-lint"
-
-.PHONY: lint-cli
-lint-cli: cmd/lint/en_US.aff cmd/lint/en_US.dic
-	@go run cmd/lint/main.go -aff-file $(word 1,$^) -dic-file $(word 2,$^) $(ARGS)
-	@echo "✅  cmd/lint/main.go"
-
-cmd/lint/en_US.aff:
-	curl -s "https://chromium.googlesource.com/chromium/deps/hunspell_dictionaries/+/master/en_US.aff?format=TEXT" | base64 -D > $@
-
-cmd/lint/en_US.dic:
-	curl -s "https://chromium.googlesource.com/chromium/deps/hunspell_dictionaries/+/master/en_US.dic?format=TEXT" | base64 -D > $@
-
-.PHONY: lint-licenses
-lint-licenses:
-	go-licenses report ./...
-
-.PHONY: test-prep
-test-prep:
-ifdef CI
-	@echo "mode: atomic" > coverage.txt
+# DESTDIR may be overridden by e.g. debian packaging
+ifeq ($(DESTDIR),)
+DESTDIR=$(CURDIR)/BUILD/
 endif
 
-.PHONY: unit-test
-unit-test:
-ifdef CI
-	@gotestsum --junitfile unit-test-report.xml -- -v -race -coverpkg $$(go list ./... | grep -v test | grep -v mock | tr '\n' ',' | sed 's/,$$//g') -coverprofile unit_coverage.txt $$(go list ./... | grep -v test) -ldflags '-buildmode=exe'
-	@grep -h -v "mode: atomic" unit_coverage.txt >> coverage.txt
+ifeq ($(PACKAGE_TYPE),archive)
+PREFIX=$(PACKAGE_NAME)
 else
-	@GOPRIVATE=github.com/confluentinc go test -race -coverpkg ./... $$(go list ./... | grep -v test) $(UNIT_TEST_ARGS) -ldflags '-buildmode=exe'
+PREFIX=/usr
 endif
 
-.PHONY: int-test
-int-test:
-ifdef CI
-	@INTEG_COVER=on gotestsum --junitfile integration-test-report.xml -- -v $$(go list ./... | grep test)
-	@grep -h -v "mode: atomic" integ_coverage.txt >> coverage.txt
-else
-	@GOPRIVATE=github.com/confluentinc go test -v -race $$(go list ./... | grep test) $(INT_TEST_ARGS) -timeout 45m
+all: install
+
+archive: install
+	rm -f $(CURDIR)/$(PACKAGE_NAME).tar.gz && cd $(DESTDIR) && tar -czf $(CURDIR)/$(PACKAGE_NAME).tar.gz $(PREFIX)
+	rm -f $(CURDIR)/$(PACKAGE_NAME).zip && cd $(DESTDIR) && zip -r $(CURDIR)/$(PACKAGE_NAME).zip $(PREFIX)
+
+apply-patches: $(wildcard debian/patches/*)
+ifeq ($(APPLY_PATCHES),yes)
+	git reset --hard HEAD
+	cat debian/patches/series | xargs -iPATCH bash -c 'patch -p1 < debian/patches/PATCH'
 endif
 
-.PHONY: test
-test: test-prep unit-test int-test
+BINPATH=$(DESTDIR)$(PREFIX)/bin
+LIBPATH=$(DESTDIR)/libexec/$(PACKAGE_TITLE)
+DOCPATH=$(DESTDIR)$(PREFIX)/share/doc/cli
 
-.PHONY: generate-packaging-patch
-generate-packaging-patch:
-	diff -u Makefile debian/Makefile | sed "1 s_Makefile_cli/Makefile_" > debian/patches/standard_build_layout.patch
+# Install a single binary, specified with $CLI_VERSION
+install: apply-patches
+	rm -rf $(DESTDIR)$(PREFIX)
+
+	mkdir -p $(BINPATH)
+	curl -f -s https://s3-us-west-2.amazonaws.com/confluent.cloud/confluent-cli/binaries/$(VERSION)/confluent_$(VERSION)_linux_amd64 -o $(BINPATH)/confluent
+	chmod 755 $(BINPATH)/confluent
 
-BINPATH=$(DESTDIR)/usr/bin
-DOCPATH=$(DESTDIR)/usr/share/doc/cli
+	mkdir -p $(DOCPATH)
+	cp LICENSE $(DOCPATH)/COPYRIGHT
+	echo $(VERSION) > $(DOCPATH)/version.txt
 
-install:
-	rm -rf $(DESTDIR)/usr
+# Install all OS/arch combinations and bundle with packaging/confluent.sh for OS/arch-agnostic TAR/ZIP archives
+install-all: apply-patches
+	rm -rf $(DESTDIR)$(PREFIX)
 
 	mkdir -p $(BINPATH)
-	curl -f -s https://s3-us-west-2.amazonaws.com/confluent.cloud/confluent-cli/binaries/$(CLEAN_VERSION)/confluent_$(CLEAN_VERSION)_linux_amd64 -o $(BINPATH)/confluent
+	cp packaging/confluent.sh $(BINPATH)/confluent
 	chmod 755 $(BINPATH)/confluent
 
+	mkdir -p $(LIBPATH)
+	cd $(LIBPATH) ; \
+	for dir in darwin_amd64 darwin_arm64 linux_amd64 linux_arm64 windows_amd64; do \
+		mkdir -p $${dir} ; \
+		ext=""; if [[ $${dir} =~ windows_.+ ]]; then ext=".exe"; fi ; \
+		filepath=$${dir}/confluent$${ext} ; \
+		curl -f -s https://s3-us-west-2.amazonaws.com/confluent.cloud/confluent-cli/binaries/$(CLI_VERSION)/confluent_$(CLI_VERSION)_$${dir}$${ext} -o $${filepath} ; \
+		chmod 755 $${filepath} ; \
+	done
+
 	mkdir -p $(DOCPATH)
 	cp LICENSE $(DOCPATH)/COPYRIGHT
-	echo $(CLEAN_VERSION) > $(DOCPATH)/version.txt
+	echo $(CLI_VERSION) > $(DOCPATH)/version.txt
+
+	chown -R root:root $(PREFIX)
+
+clean:
+	rm -rf $(CURDIR)/$(PACKAGE_NAME)*
+	rm -rf $(FULL_PACKAGE_TITLE)-$(RPM_VERSION)*rpm
+	rm -rf RPM_BUILDING
+
+distclean: clean
+ifneq ($(PACKAGE_TYPE),deb)
+	git reset --hard HEAD
+	git status --ignored --porcelain | cut -d ' ' -f 2 | xargs rm -rf
+endif
