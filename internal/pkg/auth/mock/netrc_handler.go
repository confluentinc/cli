// Code generated by mocker. DO NOT EDIT.
// github.com/travisjeffery/mocker
// Source: netrc_handler.go

package mock

import (
	sync "sync"
)

// MockNetrcHandler is a mock of NetrcHandler interface
type MockNetrcHandler struct {
	lockWriteNetrcCredentials sync.Mutex
	WriteNetrcCredentialsFunc func(cliName string, isSSO bool, ctxName, username, password string) error

	lockGetNetrcCredentials sync.Mutex
	GetNetrcCredentialsFunc func(cliName string, isSSO bool, ctxName string) (string, string, error)

	lockGetFileName sync.Mutex
	GetFileNameFunc func() string

	calls struct {
		WriteNetrcCredentials []struct {
			CliName  string
			IsSSO    bool
			CtxName  string
			Username string
			Password string
		}
		GetNetrcCredentials []struct {
			CliName string
			IsSSO   bool
			CtxName string
		}
		GetFileName []struct {
		}
	}
}

// WriteNetrcCredentials mocks base method by wrapping the associated func.
func (m *MockNetrcHandler) WriteNetrcCredentials(cliName string, isSSO bool, ctxName, username, password string) error {
	m.lockWriteNetrcCredentials.Lock()
	defer m.lockWriteNetrcCredentials.Unlock()

	if m.WriteNetrcCredentialsFunc == nil {
		panic("mocker: MockNetrcHandler.WriteNetrcCredentialsFunc is nil but MockNetrcHandler.WriteNetrcCredentials was called.")
	}

	call := struct {
		CliName  string
		IsSSO    bool
		CtxName  string
		Username string
		Password string
	}{
		CliName:  cliName,
		IsSSO:    isSSO,
		CtxName:  ctxName,
		Username: username,
		Password: password,
	}

	m.calls.WriteNetrcCredentials = append(m.calls.WriteNetrcCredentials, call)

	return m.WriteNetrcCredentialsFunc(cliName, isSSO, ctxName, username, password)
}

// WriteNetrcCredentialsCalled returns true if WriteNetrcCredentials was called at least once.
func (m *MockNetrcHandler) WriteNetrcCredentialsCalled() bool {
	m.lockWriteNetrcCredentials.Lock()
	defer m.lockWriteNetrcCredentials.Unlock()

	return len(m.calls.WriteNetrcCredentials) > 0
}

// WriteNetrcCredentialsCalls returns the calls made to WriteNetrcCredentials.
func (m *MockNetrcHandler) WriteNetrcCredentialsCalls() []struct {
	CliName  string
	IsSSO    bool
	CtxName  string
	Username string
	Password string
} {
	m.lockWriteNetrcCredentials.Lock()
	defer m.lockWriteNetrcCredentials.Unlock()

	return m.calls.WriteNetrcCredentials
}

// GetNetrcCredentials mocks base method by wrapping the associated func.
func (m *MockNetrcHandler) GetNetrcCredentials(cliName string, isSSO bool, ctxName string) (string, string, error) {
	m.lockGetNetrcCredentials.Lock()
	defer m.lockGetNetrcCredentials.Unlock()

	if m.GetNetrcCredentialsFunc == nil {
		panic("mocker: MockNetrcHandler.GetNetrcCredentialsFunc is nil but MockNetrcHandler.GetNetrcCredentials was called.")
	}

	call := struct {
		CliName string
		IsSSO   bool
		CtxName string
	}{
		CliName: cliName,
		IsSSO:   isSSO,
		CtxName: ctxName,
	}

	m.calls.GetNetrcCredentials = append(m.calls.GetNetrcCredentials, call)

	return m.GetNetrcCredentialsFunc(cliName, isSSO, ctxName)
}

// GetNetrcCredentialsCalled returns true if GetNetrcCredentials was called at least once.
func (m *MockNetrcHandler) GetNetrcCredentialsCalled() bool {
	m.lockGetNetrcCredentials.Lock()
	defer m.lockGetNetrcCredentials.Unlock()

	return len(m.calls.GetNetrcCredentials) > 0
}

// GetNetrcCredentialsCalls returns the calls made to GetNetrcCredentials.
func (m *MockNetrcHandler) GetNetrcCredentialsCalls() []struct {
	CliName string
	IsSSO   bool
	CtxName string
} {
	m.lockGetNetrcCredentials.Lock()
	defer m.lockGetNetrcCredentials.Unlock()

	return m.calls.GetNetrcCredentials
}

// GetFileName mocks base method by wrapping the associated func.
func (m *MockNetrcHandler) GetFileName() string {
	m.lockGetFileName.Lock()
	defer m.lockGetFileName.Unlock()

	if m.GetFileNameFunc == nil {
		panic("mocker: MockNetrcHandler.GetFileNameFunc is nil but MockNetrcHandler.GetFileName was called.")
	}

	call := struct {
	}{}

	m.calls.GetFileName = append(m.calls.GetFileName, call)

	return m.GetFileNameFunc()
}

// GetFileNameCalled returns true if GetFileName was called at least once.
func (m *MockNetrcHandler) GetFileNameCalled() bool {
	m.lockGetFileName.Lock()
	defer m.lockGetFileName.Unlock()

	return len(m.calls.GetFileName) > 0
}

// GetFileNameCalls returns the calls made to GetFileName.
func (m *MockNetrcHandler) GetFileNameCalls() []struct {
} {
	m.lockGetFileName.Lock()
	defer m.lockGetFileName.Unlock()

	return m.calls.GetFileName
}

// Reset resets the calls made to the mocked methods.
func (m *MockNetrcHandler) Reset() {
	m.lockWriteNetrcCredentials.Lock()
	m.calls.WriteNetrcCredentials = nil
	m.lockWriteNetrcCredentials.Unlock()
	m.lockGetNetrcCredentials.Lock()
	m.calls.GetNetrcCredentials = nil
	m.lockGetNetrcCredentials.Unlock()
	m.lockGetFileName.Lock()
	m.calls.GetFileName = nil
	m.lockGetFileName.Unlock()
}
