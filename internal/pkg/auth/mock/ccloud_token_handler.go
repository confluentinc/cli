// Code generated by mocker. DO NOT EDIT.
// github.com/travisjeffery/mocker
// Source: ccloud_token_handler.go

package mock

import (
	sync "sync"

	github_com_confluentinc_cc_structs_kafka_org_v1 "github.com/confluentinc/cc-structs/kafka/org/v1"
	github_com_confluentinc_ccloud_sdk_go "github.com/confluentinc/ccloud-sdk-go"
)

// MockCCloudTokenHandler is a mock of CCloudTokenHandler interface
type MockCCloudTokenHandler struct {
	lockGetUserSSO sync.Mutex
	GetUserSSOFunc func(client *github_com_confluentinc_ccloud_sdk_go.Client, email string) (*github_com_confluentinc_cc_structs_kafka_org_v1.User, error)

	lockGetCredentialsToken sync.Mutex
	GetCredentialsTokenFunc func(client *github_com_confluentinc_ccloud_sdk_go.Client, email, password string) (string, error)

	lockGetSSOToken sync.Mutex
	GetSSOTokenFunc func(client *github_com_confluentinc_ccloud_sdk_go.Client, url string, noBrowser bool, userSSO *github_com_confluentinc_cc_structs_kafka_org_v1.User) (string, string, error)

	lockRefreshSSOToken sync.Mutex
	RefreshSSOTokenFunc func(client *github_com_confluentinc_ccloud_sdk_go.Client, refreshToken, url string) (string, error)

	calls struct {
		GetUserSSO []struct {
			Client *github_com_confluentinc_ccloud_sdk_go.Client
			Email  string
		}
		GetCredentialsToken []struct {
			Client   *github_com_confluentinc_ccloud_sdk_go.Client
			Email    string
			Password string
		}
		GetSSOToken []struct {
			Client    *github_com_confluentinc_ccloud_sdk_go.Client
			Url       string
			NoBrowser bool
			UserSSO   *github_com_confluentinc_cc_structs_kafka_org_v1.User
		}
		RefreshSSOToken []struct {
			Client       *github_com_confluentinc_ccloud_sdk_go.Client
			RefreshToken string
			Url          string
		}
	}
}

// GetUserSSO mocks base method by wrapping the associated func.
func (m *MockCCloudTokenHandler) GetUserSSO(client *github_com_confluentinc_ccloud_sdk_go.Client, email string) (*github_com_confluentinc_cc_structs_kafka_org_v1.User, error) {
	m.lockGetUserSSO.Lock()
	defer m.lockGetUserSSO.Unlock()

	if m.GetUserSSOFunc == nil {
		panic("mocker: MockCCloudTokenHandler.GetUserSSOFunc is nil but MockCCloudTokenHandler.GetUserSSO was called.")
	}

	call := struct {
		Client *github_com_confluentinc_ccloud_sdk_go.Client
		Email  string
	}{
		Client: client,
		Email:  email,
	}

	m.calls.GetUserSSO = append(m.calls.GetUserSSO, call)

	return m.GetUserSSOFunc(client, email)
}

// GetUserSSOCalled returns true if GetUserSSO was called at least once.
func (m *MockCCloudTokenHandler) GetUserSSOCalled() bool {
	m.lockGetUserSSO.Lock()
	defer m.lockGetUserSSO.Unlock()

	return len(m.calls.GetUserSSO) > 0
}

// GetUserSSOCalls returns the calls made to GetUserSSO.
func (m *MockCCloudTokenHandler) GetUserSSOCalls() []struct {
	Client *github_com_confluentinc_ccloud_sdk_go.Client
	Email  string
} {
	m.lockGetUserSSO.Lock()
	defer m.lockGetUserSSO.Unlock()

	return m.calls.GetUserSSO
}

// GetCredentialsToken mocks base method by wrapping the associated func.
func (m *MockCCloudTokenHandler) GetCredentialsToken(client *github_com_confluentinc_ccloud_sdk_go.Client, email, password string) (string, error) {
	m.lockGetCredentialsToken.Lock()
	defer m.lockGetCredentialsToken.Unlock()

	if m.GetCredentialsTokenFunc == nil {
		panic("mocker: MockCCloudTokenHandler.GetCredentialsTokenFunc is nil but MockCCloudTokenHandler.GetCredentialsToken was called.")
	}

	call := struct {
		Client   *github_com_confluentinc_ccloud_sdk_go.Client
		Email    string
		Password string
	}{
		Client:   client,
		Email:    email,
		Password: password,
	}

	m.calls.GetCredentialsToken = append(m.calls.GetCredentialsToken, call)

	return m.GetCredentialsTokenFunc(client, email, password)
}

// GetCredentialsTokenCalled returns true if GetCredentialsToken was called at least once.
func (m *MockCCloudTokenHandler) GetCredentialsTokenCalled() bool {
	m.lockGetCredentialsToken.Lock()
	defer m.lockGetCredentialsToken.Unlock()

	return len(m.calls.GetCredentialsToken) > 0
}

// GetCredentialsTokenCalls returns the calls made to GetCredentialsToken.
func (m *MockCCloudTokenHandler) GetCredentialsTokenCalls() []struct {
	Client   *github_com_confluentinc_ccloud_sdk_go.Client
	Email    string
	Password string
} {
	m.lockGetCredentialsToken.Lock()
	defer m.lockGetCredentialsToken.Unlock()

	return m.calls.GetCredentialsToken
}

// GetSSOToken mocks base method by wrapping the associated func.
func (m *MockCCloudTokenHandler) GetSSOToken(client *github_com_confluentinc_ccloud_sdk_go.Client, url string, noBrowser bool, userSSO *github_com_confluentinc_cc_structs_kafka_org_v1.User) (string, string, error) {
	m.lockGetSSOToken.Lock()
	defer m.lockGetSSOToken.Unlock()

	if m.GetSSOTokenFunc == nil {
		panic("mocker: MockCCloudTokenHandler.GetSSOTokenFunc is nil but MockCCloudTokenHandler.GetSSOToken was called.")
	}

	call := struct {
		Client    *github_com_confluentinc_ccloud_sdk_go.Client
		Url       string
		NoBrowser bool
		UserSSO   *github_com_confluentinc_cc_structs_kafka_org_v1.User
	}{
		Client:    client,
		Url:       url,
		NoBrowser: noBrowser,
		UserSSO:   userSSO,
	}

	m.calls.GetSSOToken = append(m.calls.GetSSOToken, call)

	return m.GetSSOTokenFunc(client, url, noBrowser, userSSO)
}

// GetSSOTokenCalled returns true if GetSSOToken was called at least once.
func (m *MockCCloudTokenHandler) GetSSOTokenCalled() bool {
	m.lockGetSSOToken.Lock()
	defer m.lockGetSSOToken.Unlock()

	return len(m.calls.GetSSOToken) > 0
}

// GetSSOTokenCalls returns the calls made to GetSSOToken.
func (m *MockCCloudTokenHandler) GetSSOTokenCalls() []struct {
	Client    *github_com_confluentinc_ccloud_sdk_go.Client
	Url       string
	NoBrowser bool
	UserSSO   *github_com_confluentinc_cc_structs_kafka_org_v1.User
} {
	m.lockGetSSOToken.Lock()
	defer m.lockGetSSOToken.Unlock()

	return m.calls.GetSSOToken
}

// RefreshSSOToken mocks base method by wrapping the associated func.
func (m *MockCCloudTokenHandler) RefreshSSOToken(client *github_com_confluentinc_ccloud_sdk_go.Client, refreshToken, url string) (string, error) {
	m.lockRefreshSSOToken.Lock()
	defer m.lockRefreshSSOToken.Unlock()

	if m.RefreshSSOTokenFunc == nil {
		panic("mocker: MockCCloudTokenHandler.RefreshSSOTokenFunc is nil but MockCCloudTokenHandler.RefreshSSOToken was called.")
	}

	call := struct {
		Client       *github_com_confluentinc_ccloud_sdk_go.Client
		RefreshToken string
		Url          string
	}{
		Client:       client,
		RefreshToken: refreshToken,
		Url:          url,
	}

	m.calls.RefreshSSOToken = append(m.calls.RefreshSSOToken, call)

	return m.RefreshSSOTokenFunc(client, refreshToken, url)
}

// RefreshSSOTokenCalled returns true if RefreshSSOToken was called at least once.
func (m *MockCCloudTokenHandler) RefreshSSOTokenCalled() bool {
	m.lockRefreshSSOToken.Lock()
	defer m.lockRefreshSSOToken.Unlock()

	return len(m.calls.RefreshSSOToken) > 0
}

// RefreshSSOTokenCalls returns the calls made to RefreshSSOToken.
func (m *MockCCloudTokenHandler) RefreshSSOTokenCalls() []struct {
	Client       *github_com_confluentinc_ccloud_sdk_go.Client
	RefreshToken string
	Url          string
} {
	m.lockRefreshSSOToken.Lock()
	defer m.lockRefreshSSOToken.Unlock()

	return m.calls.RefreshSSOToken
}

// Reset resets the calls made to the mocked methods.
func (m *MockCCloudTokenHandler) Reset() {
	m.lockGetUserSSO.Lock()
	m.calls.GetUserSSO = nil
	m.lockGetUserSSO.Unlock()
	m.lockGetCredentialsToken.Lock()
	m.calls.GetCredentialsToken = nil
	m.lockGetCredentialsToken.Unlock()
	m.lockGetSSOToken.Lock()
	m.calls.GetSSOToken = nil
	m.lockGetSSOToken.Unlock()
	m.lockRefreshSSOToken.Lock()
	m.calls.RefreshSSOToken = nil
	m.lockRefreshSSOToken.Unlock()
}
