(*tview.Flex)({
  Box: (*tview.Box)({
    x: (int) 0,
    y: (int) 0,
    width: (int) 15,
    height: (int) 10,
    innerX: (int) -1,
    innerY: (int) 0,
    innerWidth: (int) 0,
    innerHeight: (int) 0,
    paddingTop: (int) 0,
    paddingBottom: (int) 0,
    paddingLeft: (int) 0,
    paddingRight: (int) 0,
    backgroundColor: (tcell.Color) 4294967296,
    dontClear: (bool) true,
    border: (bool) false,
    borderStyle: (tcell.Style) {
      fg: (tcell.Color) 4294967311,
      bg: (tcell.Color) 4294967296,
      attrs: (tcell.AttrMask) 0,
      url: (string) "",
      urlId: (string) ""
    },
    title: (string) "",
    titleColor: (tcell.Color) 4294967311,
    titleAlign: (int) 1,
    hasFocus: (bool) false,
    focus: (func()) <nil>,
    blur: (func()) <nil>,
    inputCapture: (func(*tcell.EventKey) *tcell.EventKey) <nil>,
    draw: (func(tcell.Screen, int, int, int, int) (int, int, int, int)) <nil>,
    mouseCapture: (func(tview.MouseAction, *tcell.EventMouse) (tview.MouseAction, *tcell.EventMouse)) <nil>
  }),
  items: ([]*tview.flexItem) (len=3) {
    (*tview.flexItem)({
      Item: (*tview.TextView)({
        Mutex: (sync.Mutex) {
          state: (int32) 0,
          sema: (uint32) 0
        },
        Box: (*tview.Box)({
          x: (int) 0,
          y: (int) 0,
          width: (int) 15,
          height: (int) 10,
          innerX: (int) -1,
          innerY: (int) 0,
          innerWidth: (int) 0,
          innerHeight: (int) 0,
          paddingTop: (int) 0,
          paddingBottom: (int) 0,
          paddingLeft: (int) 0,
          paddingRight: (int) 0,
          backgroundColor: (tcell.Color) 4294967296,
          dontClear: (bool) false,
          border: (bool) false,
          borderStyle: (tcell.Style) {
            fg: (tcell.Color) 4294967311,
            bg: (tcell.Color) 4294967296,
            attrs: (tcell.AttrMask) 0,
            url: (string) "",
            urlId: (string) ""
          },
          title: (string) "",
          titleColor: (tcell.Color) 4294967311,
          titleAlign: (int) 1,
          hasFocus: (bool) false,
          focus: (func()) <nil>,
          blur: (func()) <nil>,
          inputCapture: (func(*tcell.EventKey) *tcell.EventKey) <nil>,
          draw: (func(tcell.Screen, int, int, int, int) (int, int, int, int)) <nil>,
          mouseCapture: (func(tview.MouseAction, *tcell.EventMouse) (tview.MouseAction, *tcell.EventMouse)) <nil>
        }),
        width: (int) 0,
        height: (int) 0,
        buffer: ([]string) (len=1) {
          (string) (len=36) "Fetch state: [darkcyan]paused[white]"
        },
        recentBytes: ([]uint8) <nil>,
        index: ([]*tview.textViewIndex) <nil>,
        label: (string) "",
        labelWidth: (int) 0,
        labelStyle: (tcell.Style) {
          fg: (tcell.Color) 4294967307,
          bg: (tcell.Color) 0,
          attrs: (tcell.AttrMask) 0,
          url: (string) "",
          urlId: (string) ""
        },
        align: (int) 0,
        regionInfos: ([]*tview.textViewRegion) <nil>,
        fromHighlight: (int) 0,
        toHighlight: (int) 0,
        posHighlight: (int) 0,
        highlights: (map[string]struct {}) {
        },
        lastWidth: (int) 0,
        longestLine: (int) 0,
        lineOffset: (int) -1,
        trackEnd: (bool) false,
        columnOffset: (int) 0,
        maxLines: (int) 0,
        pageSize: (int) 0,
        scrollable: (bool) true,
        wrap: (bool) true,
        wordWrap: (bool) false,
        textStyle: (tcell.Style) {
          fg: (tcell.Color) 4294967311,
          bg: (tcell.Color) 4294967296,
          attrs: (tcell.AttrMask) 0,
          url: (string) "",
          urlId: (string) ""
        },
        dynamicColors: (bool) true,
        regions: (bool) false,
        scrollToHighlights: (bool) false,
        toggleHighlights: (bool) false,
        changed: (func()) <nil>,
        done: (func(tcell.Key)) <nil>,
        highlighted: (func([]string, []string, []string)) <nil>,
        finished: (func(tcell.Key)) <nil>
      }),
      FixedSize: (int) 0,
      Proportion: (int) 1,
      Focus: (bool) false
    }),
    (*tview.flexItem)({
      Item: (*tview.TextView)({
        Mutex: (sync.Mutex) {
          state: (int32) 0,
          sema: (uint32) 0
        },
        Box: (*tview.Box)({
          x: (int) 0,
          y: (int) 0,
          width: (int) 15,
          height: (int) 10,
          innerX: (int) -1,
          innerY: (int) 0,
          innerWidth: (int) 0,
          innerHeight: (int) 0,
          paddingTop: (int) 0,
          paddingBottom: (int) 0,
          paddingLeft: (int) 0,
          paddingRight: (int) 0,
          backgroundColor: (tcell.Color) 4294967296,
          dontClear: (bool) false,
          border: (bool) false,
          borderStyle: (tcell.Style) {
            fg: (tcell.Color) 4294967311,
            bg: (tcell.Color) 4294967296,
            attrs: (tcell.AttrMask) 0,
            url: (string) "",
            urlId: (string) ""
          },
          title: (string) "",
          titleColor: (tcell.Color) 4294967311,
          titleAlign: (int) 1,
          hasFocus: (bool) false,
          focus: (func()) <nil>,
          blur: (func()) <nil>,
          inputCapture: (func(*tcell.EventKey) *tcell.EventKey) <nil>,
          draw: (func(tcell.Screen, int, int, int, int) (int, int, int, int)) <nil>,
          mouseCapture: (func(tview.MouseAction, *tcell.EventMouse) (tview.MouseAction, *tcell.EventMouse)) <nil>
        }),
        width: (int) 0,
        height: (int) 0,
        buffer: ([]string) (len=1) {
          (string) (len=47) "Row: [darkcyan]10[white] of [darkcyan]10[white]"
        },
        recentBytes: ([]uint8) <nil>,
        index: ([]*tview.textViewIndex) <nil>,
        label: (string) "",
        labelWidth: (int) 0,
        labelStyle: (tcell.Style) {
          fg: (tcell.Color) 4294967307,
          bg: (tcell.Color) 0,
          attrs: (tcell.AttrMask) 0,
          url: (string) "",
          urlId: (string) ""
        },
        align: (int) 1,
        regionInfos: ([]*tview.textViewRegion) <nil>,
        fromHighlight: (int) 0,
        toHighlight: (int) 0,
        posHighlight: (int) 0,
        highlights: (map[string]struct {}) {
        },
        lastWidth: (int) 0,
        longestLine: (int) 0,
        lineOffset: (int) -1,
        trackEnd: (bool) false,
        columnOffset: (int) 0,
        maxLines: (int) 0,
        pageSize: (int) 0,
        scrollable: (bool) true,
        wrap: (bool) true,
        wordWrap: (bool) false,
        textStyle: (tcell.Style) {
          fg: (tcell.Color) 4294967311,
          bg: (tcell.Color) 4294967296,
          attrs: (tcell.AttrMask) 0,
          url: (string) "",
          urlId: (string) ""
        },
        dynamicColors: (bool) true,
        regions: (bool) false,
        scrollToHighlights: (bool) false,
        toggleHighlights: (bool) false,
        changed: (func()) <nil>,
        done: (func(tcell.Key)) <nil>,
        highlighted: (func([]string, []string, []string)) <nil>,
        finished: (func(tcell.Key)) <nil>
      }),
      FixedSize: (int) 0,
      Proportion: (int) 1,
      Focus: (bool) false
    }),
    (*tview.flexItem)({
      Item: (*tview.TextView)({
        Mutex: (sync.Mutex) {
          state: (int32) 0,
          sema: (uint32) 0
        },
        Box: (*tview.Box)({
          x: (int) 0,
          y: (int) 0,
          width: (int) 15,
          height: (int) 10,
          innerX: (int) -1,
          innerY: (int) 0,
          innerWidth: (int) 0,
          innerHeight: (int) 0,
          paddingTop: (int) 0,
          paddingBottom: (int) 0,
          paddingLeft: (int) 0,
          paddingRight: (int) 0,
          backgroundColor: (tcell.Color) 4294967296,
          dontClear: (bool) false,
          border: (bool) false,
          borderStyle: (tcell.Style) {
            fg: (tcell.Color) 4294967311,
            bg: (tcell.Color) 4294967296,
            attrs: (tcell.AttrMask) 0,
            url: (string) "",
            urlId: (string) ""
          },
          title: (string) "",
          titleColor: (tcell.Color) 4294967311,
          titleAlign: (int) 1,
          hasFocus: (bool) false,
          focus: (func()) <nil>,
          blur: (func()) <nil>,
          inputCapture: (func(*tcell.EventKey) *tcell.EventKey) <nil>,
          draw: (func(tcell.Screen, int, int, int, int) (int, int, int, int)) <nil>,
          mouseCapture: (func(tview.MouseAction, *tcell.EventMouse) (tview.MouseAction, *tcell.EventMouse)) <nil>
        }),
        width: (int) 0,
        height: (int) 0,
        buffer: ([]string) (len=1) {
          (string) (len=32) "Last refresh: [darkcyan]-[white]"
        },
        recentBytes: ([]uint8) <nil>,
        index: ([]*tview.textViewIndex) <nil>,
        label: (string) "",
        labelWidth: (int) 0,
        labelStyle: (tcell.Style) {
          fg: (tcell.Color) 4294967307,
          bg: (tcell.Color) 0,
          attrs: (tcell.AttrMask) 0,
          url: (string) "",
          urlId: (string) ""
        },
        align: (int) 2,
        regionInfos: ([]*tview.textViewRegion) <nil>,
        fromHighlight: (int) 0,
        toHighlight: (int) 0,
        posHighlight: (int) 0,
        highlights: (map[string]struct {}) {
        },
        lastWidth: (int) 0,
        longestLine: (int) 0,
        lineOffset: (int) -1,
        trackEnd: (bool) false,
        columnOffset: (int) 0,
        maxLines: (int) 0,
        pageSize: (int) 0,
        scrollable: (bool) true,
        wrap: (bool) true,
        wordWrap: (bool) false,
        textStyle: (tcell.Style) {
          fg: (tcell.Color) 4294967311,
          bg: (tcell.Color) 4294967296,
          attrs: (tcell.AttrMask) 0,
          url: (string) "",
          urlId: (string) ""
        },
        dynamicColors: (bool) true,
        regions: (bool) false,
        scrollToHighlights: (bool) false,
        toggleHighlights: (bool) false,
        changed: (func()) <nil>,
        done: (func(tcell.Key)) <nil>,
        highlighted: (func([]string, []string, []string)) <nil>,
        finished: (func(tcell.Key)) <nil>
      }),
      FixedSize: (int) 0,
      Proportion: (int) 1,
      Focus: (bool) false
    })
  },
  direction: (int) 1,
  fullScreen: (bool) false
})
