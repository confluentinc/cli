// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/confluentinc/cli/internal/pkg/flink/types (interfaces: ResultFetcherInterface)

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"
	time "time"

	types "github.com/confluentinc/cli/internal/pkg/flink/types"
	gomock "github.com/golang/mock/gomock"
)

// MockResultFetcherInterface is a mock of ResultFetcherInterface interface.
type MockResultFetcherInterface struct {
	ctrl     *gomock.Controller
	recorder *MockResultFetcherInterfaceMockRecorder
}

// MockResultFetcherInterfaceMockRecorder is the mock recorder for MockResultFetcherInterface.
type MockResultFetcherInterfaceMockRecorder struct {
	mock *MockResultFetcherInterface
}

// NewMockResultFetcherInterface creates a new mock instance.
func NewMockResultFetcherInterface(ctrl *gomock.Controller) *MockResultFetcherInterface {
	mock := &MockResultFetcherInterface{ctrl: ctrl}
	mock.recorder = &MockResultFetcherInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockResultFetcherInterface) EXPECT() *MockResultFetcherInterfaceMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockResultFetcherInterface) Close() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close.
func (mr *MockResultFetcherInterfaceMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockResultFetcherInterface)(nil).Close))
}

// GetFetchState mocks base method.
func (m *MockResultFetcherInterface) GetFetchState() types.FetchState {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFetchState")
	ret0, _ := ret[0].(types.FetchState)
	return ret0
}

// GetFetchState indicates an expected call of GetFetchState.
func (mr *MockResultFetcherInterfaceMockRecorder) GetFetchState() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFetchState", reflect.TypeOf((*MockResultFetcherInterface)(nil).GetFetchState))
}

// GetLastFetchTimestamp mocks base method.
func (m *MockResultFetcherInterface) GetLastFetchTimestamp() *time.Time {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLastFetchTimestamp")
	ret0, _ := ret[0].(*time.Time)
	return ret0
}

// GetLastFetchTimestamp indicates an expected call of GetLastFetchTimestamp.
func (mr *MockResultFetcherInterfaceMockRecorder) GetLastFetchTimestamp() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLastFetchTimestamp", reflect.TypeOf((*MockResultFetcherInterface)(nil).GetLastFetchTimestamp))
}

// GetMaterializedStatementResults mocks base method.
func (m *MockResultFetcherInterface) GetMaterializedStatementResults() *types.MaterializedStatementResults {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMaterializedStatementResults")
	ret0, _ := ret[0].(*types.MaterializedStatementResults)
	return ret0
}

// GetMaterializedStatementResults indicates an expected call of GetMaterializedStatementResults.
func (mr *MockResultFetcherInterfaceMockRecorder) GetMaterializedStatementResults() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMaterializedStatementResults", reflect.TypeOf((*MockResultFetcherInterface)(nil).GetMaterializedStatementResults))
}

// GetStatement mocks base method.
func (m *MockResultFetcherInterface) GetStatement() types.ProcessedStatement {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStatement")
	ret0, _ := ret[0].(types.ProcessedStatement)
	return ret0
}

// GetStatement indicates an expected call of GetStatement.
func (mr *MockResultFetcherInterfaceMockRecorder) GetStatement() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStatement", reflect.TypeOf((*MockResultFetcherInterface)(nil).GetStatement))
}

// Init mocks base method.
func (m *MockResultFetcherInterface) Init(arg0 types.ProcessedStatement) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Init", arg0)
}

// Init indicates an expected call of Init.
func (mr *MockResultFetcherInterfaceMockRecorder) Init(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Init", reflect.TypeOf((*MockResultFetcherInterface)(nil).Init), arg0)
}

// IsAutoRefreshRunning mocks base method.
func (m *MockResultFetcherInterface) IsAutoRefreshRunning() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsAutoRefreshRunning")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsAutoRefreshRunning indicates an expected call of IsAutoRefreshRunning.
func (mr *MockResultFetcherInterfaceMockRecorder) IsAutoRefreshRunning() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsAutoRefreshRunning", reflect.TypeOf((*MockResultFetcherInterface)(nil).IsAutoRefreshRunning))
}

// IsTableMode mocks base method.
func (m *MockResultFetcherInterface) IsTableMode() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsTableMode")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsTableMode indicates an expected call of IsTableMode.
func (mr *MockResultFetcherInterfaceMockRecorder) IsTableMode() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsTableMode", reflect.TypeOf((*MockResultFetcherInterface)(nil).IsTableMode))
}

// SetAutoRefreshCallback mocks base method.
func (m *MockResultFetcherInterface) SetAutoRefreshCallback(arg0 func()) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetAutoRefreshCallback", arg0)
}

// SetAutoRefreshCallback indicates an expected call of SetAutoRefreshCallback.
func (mr *MockResultFetcherInterfaceMockRecorder) SetAutoRefreshCallback(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetAutoRefreshCallback", reflect.TypeOf((*MockResultFetcherInterface)(nil).SetAutoRefreshCallback), arg0)
}

// ToggleAutoRefresh mocks base method.
func (m *MockResultFetcherInterface) ToggleAutoRefresh() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ToggleAutoRefresh")
}

// ToggleAutoRefresh indicates an expected call of ToggleAutoRefresh.
func (mr *MockResultFetcherInterfaceMockRecorder) ToggleAutoRefresh() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToggleAutoRefresh", reflect.TypeOf((*MockResultFetcherInterface)(nil).ToggleAutoRefresh))
}

// ToggleTableMode mocks base method.
func (m *MockResultFetcherInterface) ToggleTableMode() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ToggleTableMode")
}

// ToggleTableMode indicates an expected call of ToggleTableMode.
func (mr *MockResultFetcherInterfaceMockRecorder) ToggleTableMode() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToggleTableMode", reflect.TypeOf((*MockResultFetcherInterface)(nil).ToggleTableMode))
}
