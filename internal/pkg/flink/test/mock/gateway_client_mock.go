// Code generated by MockGen. DO NOT EDIT.
// Source: internal/pkg/ccloudv2/flink_gateway.go

// Package mock_ccloudv2 is a generated GoMock package.
package mock

import (
	reflect "reflect"

	v1alpha1 "github.com/confluentinc/ccloud-sdk-go-v2/flink-gateway/v1alpha1"
	gomock "github.com/golang/mock/gomock"
)

// MockGatewayClientInterface is a mock of GatewayClientInterface interface.
type MockGatewayClientInterface struct {
	ctrl     *gomock.Controller
	recorder *MockGatewayClientInterfaceMockRecorder
}

// MockGatewayClientInterfaceMockRecorder is the mock recorder for MockGatewayClientInterface.
type MockGatewayClientInterfaceMockRecorder struct {
	mock *MockGatewayClientInterface
}

// NewMockGatewayClientInterface creates a new mock instance.
func NewMockGatewayClientInterface(ctrl *gomock.Controller) *MockGatewayClientInterface {
	mock := &MockGatewayClientInterface{ctrl: ctrl}
	mock.recorder = &MockGatewayClientInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGatewayClientInterface) EXPECT() *MockGatewayClientInterfaceMockRecorder {
	return m.recorder
}

// CreateStatement mocks base method.
func (m *MockGatewayClientInterface) CreateStatement(statement, computePoolId, identityPoolId string, properties map[string]string, environmentId, orgId string) (v1alpha1.SqlV1alpha1Statement, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateStatement", orgId, environmentId, computePoolId, identityPoolId, statement, properties)
	ret0, _ := ret[0].(v1alpha1.SqlV1alpha1Statement)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateStatement indicates an expected call of CreateStatement.
func (mr *MockGatewayClientInterfaceMockRecorder) CreateStatement(orgId, environmentId, computePoolId, identityPoolId, statement, properties interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateStatement", reflect.TypeOf((*MockGatewayClientInterface)(nil).CreateStatement), orgId, environmentId, computePoolId, identityPoolId, statement, properties)
}

// DeleteStatement mocks base method.
func (m *MockGatewayClientInterface) DeleteStatement(environmentId, statementName, orgId string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteStatement", orgId, environmentId, statementName)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteStatement indicates an expected call of DeleteStatement.
func (mr *MockGatewayClientInterfaceMockRecorder) DeleteStatement(orgId, environmentId, statementName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteStatement", reflect.TypeOf((*MockGatewayClientInterface)(nil).DeleteStatement), orgId, environmentId, statementName)
}

// GetExceptions mocks base method.
func (m *MockGatewayClientInterface) GetExceptions(environmentId, statementId, orgId string) (v1alpha1.SqlV1alpha1StatementExceptionList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetExceptions", orgId, environmentId, statementId)
	ret0, _ := ret[0].(v1alpha1.SqlV1alpha1StatementExceptionList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetExceptions indicates an expected call of GetExceptions.
func (mr *MockGatewayClientInterfaceMockRecorder) GetExceptions(orgId, environmentId, statementId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetExceptions", reflect.TypeOf((*MockGatewayClientInterface)(nil).GetExceptions), orgId, environmentId, statementId)
}

// GetStatement mocks base method.
func (m *MockGatewayClientInterface) GetStatement(environmentId, statementName, orgId string) (v1alpha1.SqlV1alpha1Statement, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStatement", orgId, environmentId, statementName)
	ret0, _ := ret[0].(v1alpha1.SqlV1alpha1Statement)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStatement indicates an expected call of GetStatement.
func (mr *MockGatewayClientInterfaceMockRecorder) GetStatement(orgId, environmentId, statementName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStatement", reflect.TypeOf((*MockGatewayClientInterface)(nil).GetStatement), orgId, environmentId, statementName)
}

// GetStatementResults mocks base method.
func (m *MockGatewayClientInterface) GetStatementResults(environmentId, statementId, orgId, pageToken string) (v1alpha1.SqlV1alpha1StatementResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStatementResults", orgId, environmentId, statementId, pageToken)
	ret0, _ := ret[0].(v1alpha1.SqlV1alpha1StatementResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStatementResults indicates an expected call of GetStatementResults.
func (mr *MockGatewayClientInterfaceMockRecorder) GetStatementResults(orgId, environmentId, statementId, pageToken interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStatementResults", reflect.TypeOf((*MockGatewayClientInterface)(nil).GetStatementResults), orgId, environmentId, statementId, pageToken)
}

// ListStatements mocks base method.
func (m *MockGatewayClientInterface) ListStatements(environmentId, orgId string) ([]v1alpha1.SqlV1alpha1Statement, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListStatements", orgId, environmentId)
	ret0, _ := ret[0].([]v1alpha1.SqlV1alpha1Statement)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListStatements indicates an expected call of ListStatements.
func (mr *MockGatewayClientInterfaceMockRecorder) ListStatements(orgId, environmentId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListStatements", reflect.TypeOf((*MockGatewayClientInterface)(nil).ListStatements), orgId, environmentId)
}
