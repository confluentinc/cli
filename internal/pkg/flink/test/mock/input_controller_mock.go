// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/confluentinc/cli/internal/pkg/flink/types (interfaces: InputControllerInterface)

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockInputControllerInterface is a mock of InputControllerInterface interface.
type MockInputControllerInterface struct {
	ctrl     *gomock.Controller
	recorder *MockInputControllerInterfaceMockRecorder
}

// MockInputControllerInterfaceMockRecorder is the mock recorder for MockInputControllerInterface.
type MockInputControllerInterfaceMockRecorder struct {
	mock *MockInputControllerInterface
}

// NewMockInputControllerInterface creates a new mock instance.
func NewMockInputControllerInterface(ctrl *gomock.Controller) *MockInputControllerInterface {
	mock := &MockInputControllerInterface{ctrl: ctrl}
	mock.recorder = &MockInputControllerInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockInputControllerInterface) EXPECT() *MockInputControllerInterfaceMockRecorder {
	return m.recorder
}

// GetUserInput mocks base method.
func (m *MockInputControllerInterface) GetUserInput() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserInput")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetUserInput indicates an expected call of GetUserInput.
func (mr *MockInputControllerInterfaceMockRecorder) GetUserInput() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserInput", reflect.TypeOf((*MockInputControllerInterface)(nil).GetUserInput))
}

// GetWindowWidth mocks base method.
func (m *MockInputControllerInterface) GetWindowWidth() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWindowWidth")
	ret0, _ := ret[0].(int)
	return ret0
}

// GetWindowWidth indicates an expected call of GetWindowWidth.
func (mr *MockInputControllerInterfaceMockRecorder) GetWindowWidth() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWindowWidth", reflect.TypeOf((*MockInputControllerInterface)(nil).GetWindowWidth))
}

// IsSpecialInput mocks base method.
func (m *MockInputControllerInterface) IsSpecialInput(arg0 string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsSpecialInput", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsSpecialInput indicates an expected call of IsSpecialInput.
func (mr *MockInputControllerInterfaceMockRecorder) IsSpecialInput(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsSpecialInput", reflect.TypeOf((*MockInputControllerInterface)(nil).IsSpecialInput), arg0)
}
