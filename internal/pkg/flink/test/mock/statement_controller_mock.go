// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/confluentinc/cli/internal/pkg/flink/types (interfaces: StatementControllerInterface)

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	types "github.com/confluentinc/cli/internal/pkg/flink/types"
	gomock "github.com/golang/mock/gomock"
)

// MockStatementControllerInterface is a mock of StatementControllerInterface interface.
type MockStatementControllerInterface struct {
	ctrl     *gomock.Controller
	recorder *MockStatementControllerInterfaceMockRecorder
}

// MockStatementControllerInterfaceMockRecorder is the mock recorder for MockStatementControllerInterface.
type MockStatementControllerInterfaceMockRecorder struct {
	mock *MockStatementControllerInterface
}

// NewMockStatementControllerInterface creates a new mock instance.
func NewMockStatementControllerInterface(ctrl *gomock.Controller) *MockStatementControllerInterface {
	mock := &MockStatementControllerInterface{ctrl: ctrl}
	mock.recorder = &MockStatementControllerInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStatementControllerInterface) EXPECT() *MockStatementControllerInterfaceMockRecorder {
	return m.recorder
}

// CleanupStatement mocks base method.
func (m *MockStatementControllerInterface) CleanupStatement() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "CleanupStatement")
}

// CleanupStatement indicates an expected call of CleanupStatement.
func (mr *MockStatementControllerInterfaceMockRecorder) CleanupStatement() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CleanupStatement", reflect.TypeOf((*MockStatementControllerInterface)(nil).CleanupStatement))
}

// ExecuteStatement mocks base method.
func (m *MockStatementControllerInterface) ExecuteStatement(arg0 string) (*types.ProcessedStatement, *types.StatementError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExecuteStatement", arg0)
	ret0, _ := ret[0].(*types.ProcessedStatement)
	ret1, _ := ret[1].(*types.StatementError)
	return ret0, ret1
}

// ExecuteStatement indicates an expected call of ExecuteStatement.
func (mr *MockStatementControllerInterfaceMockRecorder) ExecuteStatement(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecuteStatement", reflect.TypeOf((*MockStatementControllerInterface)(nil).ExecuteStatement), arg0)
}
