// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/confluentinc/cli/internal/pkg/flink/types (interfaces: TableControllerInterface)

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	types "github.com/confluentinc/cli/internal/pkg/flink/types"
	tcell "github.com/gdamore/tcell/v2"
	gomock "github.com/golang/mock/gomock"
)

// MockTableControllerInterface is a mock of TableControllerInterface interface.
type MockTableControllerInterface struct {
	ctrl     *gomock.Controller
	recorder *MockTableControllerInterfaceMockRecorder
}

// MockTableControllerInterfaceMockRecorder is the mock recorder for MockTableControllerInterface.
type MockTableControllerInterfaceMockRecorder struct {
	mock *MockTableControllerInterface
}

// NewMockTableControllerInterface creates a new mock instance.
func NewMockTableControllerInterface(ctrl *gomock.Controller) *MockTableControllerInterface {
	mock := &MockTableControllerInterface{ctrl: ctrl}
	mock.recorder = &MockTableControllerInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTableControllerInterface) EXPECT() *MockTableControllerInterfaceMockRecorder {
	return m.recorder
}

// AppInputCapture mocks base method.
func (m *MockTableControllerInterface) AppInputCapture(arg0 *tcell.EventKey) *tcell.EventKey {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AppInputCapture", arg0)
	ret0, _ := ret[0].(*tcell.EventKey)
	return ret0
}

// AppInputCapture indicates an expected call of AppInputCapture.
func (mr *MockTableControllerInterfaceMockRecorder) AppInputCapture(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AppInputCapture", reflect.TypeOf((*MockTableControllerInterface)(nil).AppInputCapture), arg0)
}

// GetActionForShortcut mocks base method.
func (m *MockTableControllerInterface) GetActionForShortcut(arg0 string) func() {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetActionForShortcut", arg0)
	ret0, _ := ret[0].(func())
	return ret0
}

// GetActionForShortcut indicates an expected call of GetActionForShortcut.
func (mr *MockTableControllerInterfaceMockRecorder) GetActionForShortcut(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetActionForShortcut", reflect.TypeOf((*MockTableControllerInterface)(nil).GetActionForShortcut), arg0)
}

// Init mocks base method.
func (m *MockTableControllerInterface) Init(arg0 types.ProcessedStatement) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Init", arg0)
}

// Init indicates an expected call of Init.
func (mr *MockTableControllerInterfaceMockRecorder) Init(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Init", reflect.TypeOf((*MockTableControllerInterface)(nil).Init), arg0)
}

// SetRunInteractiveInputCallback mocks base method.
func (m *MockTableControllerInterface) SetRunInteractiveInputCallback(arg0 func()) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetRunInteractiveInputCallback", arg0)
}

// SetRunInteractiveInputCallback indicates an expected call of SetRunInteractiveInputCallback.
func (mr *MockTableControllerInterfaceMockRecorder) SetRunInteractiveInputCallback(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetRunInteractiveInputCallback", reflect.TypeOf((*MockTableControllerInterface)(nil).SetRunInteractiveInputCallback), arg0)
}
