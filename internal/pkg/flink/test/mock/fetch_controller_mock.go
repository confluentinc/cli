// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/confluentinc/cli/internal/pkg/flink/types (interfaces: ResultFetcherInterface)

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	types "github.com/confluentinc/cli/internal/pkg/flink/types"
	gomock "github.com/golang/mock/gomock"
)

// MockFetchControllerInterface is a mock of ResultFetcherInterface interface.
type MockFetchControllerInterface struct {
	ctrl     *gomock.Controller
	recorder *MockFetchControllerInterfaceMockRecorder
}

// MockFetchControllerInterfaceMockRecorder is the mock recorder for MockFetchControllerInterface.
type MockFetchControllerInterfaceMockRecorder struct {
	mock *MockFetchControllerInterface
}

// NewMockFetchControllerInterface creates a new mock instance.
func NewMockFetchControllerInterface(ctrl *gomock.Controller) *MockFetchControllerInterface {
	mock := &MockFetchControllerInterface{ctrl: ctrl}
	mock.recorder = &MockFetchControllerInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFetchControllerInterface) EXPECT() *MockFetchControllerInterfaceMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockFetchControllerInterface) Close() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close.
func (mr *MockFetchControllerInterfaceMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockFetchControllerInterface)(nil).Close))
}

// FetchNextPage mocks base method.
func (m *MockFetchControllerInterface) FetchNextPage() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "FetchNextPage")
}

// FetchNextPage indicates an expected call of FetchNextPage.
func (mr *MockFetchControllerInterfaceMockRecorder) FetchNextPage() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchNextPage", reflect.TypeOf((*MockFetchControllerInterface)(nil).FetchNextPage))
}

// GetFetchState mocks base method.
func (m *MockFetchControllerInterface) GetFetchState() types.FetchState {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFetchState")
	ret0, _ := ret[0].(types.FetchState)
	return ret0
}

// GetFetchState indicates an expected call of GetFetchState.
func (mr *MockFetchControllerInterfaceMockRecorder) GetFetchState() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFetchState", reflect.TypeOf((*MockFetchControllerInterface)(nil).GetFetchState))
}

// GetResults mocks base method.
func (m *MockFetchControllerInterface) GetResults() *types.MaterializedStatementResults {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetResults")
	ret0, _ := ret[0].(*types.MaterializedStatementResults)
	return ret0
}

// GetResults indicates an expected call of GetResults.
func (mr *MockFetchControllerInterfaceMockRecorder) GetResults() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetResults", reflect.TypeOf((*MockFetchControllerInterface)(nil).GetResults))
}

// Init mocks base method.
func (m *MockFetchControllerInterface) Init(arg0 types.ProcessedStatement) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Init", arg0)
}

// Init indicates an expected call of Init.
func (mr *MockFetchControllerInterfaceMockRecorder) Init(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Init", reflect.TypeOf((*MockFetchControllerInterface)(nil).Init), arg0)
}

// IsAutoRefreshRunning mocks base method.
func (m *MockFetchControllerInterface) IsAutoRefreshRunning() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsAutoRefreshRunning")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsAutoRefreshRunning indicates an expected call of IsAutoRefreshRunning.
func (mr *MockFetchControllerInterfaceMockRecorder) IsAutoRefreshRunning() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsAutoRefreshRunning", reflect.TypeOf((*MockFetchControllerInterface)(nil).IsAutoRefreshRunning))
}

// IsTableMode mocks base method.
func (m *MockFetchControllerInterface) IsTableMode() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsTableMode")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsTableMode indicates an expected call of IsTableMode.
func (mr *MockFetchControllerInterfaceMockRecorder) IsTableMode() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsTableMode", reflect.TypeOf((*MockFetchControllerInterface)(nil).IsTableMode))
}

// JumpToLastPage mocks base method.
func (m *MockFetchControllerInterface) JumpToLastPage() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "JumpToLastPage")
}

// JumpToLastPage indicates an expected call of JumpToLastPage.
func (mr *MockFetchControllerInterfaceMockRecorder) JumpToLastPage() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "JumpToLastPage", reflect.TypeOf((*MockFetchControllerInterface)(nil).JumpToLastPage))
}

// SetAutoRefreshCallback mocks base method.
func (m *MockFetchControllerInterface) SetAutoRefreshCallback(arg0 func()) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetAutoRefreshCallback", arg0)
}

// SetAutoRefreshCallback indicates an expected call of SetAutoRefreshCallback.
func (mr *MockFetchControllerInterfaceMockRecorder) SetAutoRefreshCallback(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetAutoRefreshCallback", reflect.TypeOf((*MockFetchControllerInterface)(nil).SetAutoRefreshCallback), arg0)
}

// ToggleAutoRefresh mocks base method.
func (m *MockFetchControllerInterface) ToggleAutoRefresh() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ToggleAutoRefresh")
}

// ToggleAutoRefresh indicates an expected call of ToggleAutoRefresh.
func (mr *MockFetchControllerInterfaceMockRecorder) ToggleAutoRefresh() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToggleAutoRefresh", reflect.TypeOf((*MockFetchControllerInterface)(nil).ToggleAutoRefresh))
}

// ToggleTableMode mocks base method.
func (m *MockFetchControllerInterface) ToggleTableMode() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ToggleTableMode")
}

// ToggleTableMode indicates an expected call of ToggleTableMode.
func (mr *MockFetchControllerInterfaceMockRecorder) ToggleTableMode() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToggleTableMode", reflect.TypeOf((*MockFetchControllerInterface)(nil).ToggleTableMode))
}
