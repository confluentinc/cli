// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/confluentinc/go-prompt (interfaces: IPrompt)

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	prompt "github.com/confluentinc/go-prompt"
	gomock "github.com/golang/mock/gomock"
)

// MockIPrompt is a mock of IPrompt interface.
type MockIPrompt struct {
	ctrl     *gomock.Controller
	recorder *MockIPromptMockRecorder
}

// MockIPromptMockRecorder is the mock recorder for MockIPrompt.
type MockIPromptMockRecorder struct {
	mock *MockIPrompt
}

// NewMockIPrompt creates a new mock instance.
func NewMockIPrompt(ctrl *gomock.Controller) *MockIPrompt {
	mock := &MockIPrompt{ctrl: ctrl}
	mock.recorder = &MockIPromptMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIPrompt) EXPECT() *MockIPromptMockRecorder {
	return m.recorder
}

// AddASCIICodeBindings mocks base method.
func (m *MockIPrompt) AddASCIICodeBindings(arg0 ...prompt.ASCIICodeBind) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range arg0 {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "AddASCIICodeBindings", varargs...)
}

// AddASCIICodeBindings indicates an expected call of AddASCIICodeBindings.
func (mr *MockIPromptMockRecorder) AddASCIICodeBindings(arg0 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddASCIICodeBindings", reflect.TypeOf((*MockIPrompt)(nil).AddASCIICodeBindings), arg0...)
}

// AddKeyBindings mocks base method.
func (m *MockIPrompt) AddKeyBindings(arg0 ...prompt.KeyBind) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range arg0 {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "AddKeyBindings", varargs...)
}

// AddKeyBindings indicates an expected call of AddKeyBindings.
func (mr *MockIPromptMockRecorder) AddKeyBindings(arg0 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddKeyBindings", reflect.TypeOf((*MockIPrompt)(nil).AddKeyBindings), arg0...)
}

// Buffer mocks base method.
func (m *MockIPrompt) Buffer() *prompt.Buffer {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Buffer")
	ret0, _ := ret[0].(*prompt.Buffer)
	return ret0
}

// Buffer indicates an expected call of Buffer.
func (mr *MockIPromptMockRecorder) Buffer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Buffer", reflect.TypeOf((*MockIPrompt)(nil).Buffer))
}

// ClearScreen mocks base method.
func (m *MockIPrompt) ClearScreen() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ClearScreen")
}

// ClearScreen indicates an expected call of ClearScreen.
func (mr *MockIPromptMockRecorder) ClearScreen() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClearScreen", reflect.TypeOf((*MockIPrompt)(nil).ClearScreen))
}

// CompletionManager mocks base method.
func (m *MockIPrompt) CompletionManager() *prompt.CompletionManager {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CompletionManager")
	ret0, _ := ret[0].(*prompt.CompletionManager)
	return ret0
}

// CompletionManager indicates an expected call of CompletionManager.
func (mr *MockIPromptMockRecorder) CompletionManager() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CompletionManager", reflect.TypeOf((*MockIPrompt)(nil).CompletionManager))
}

// History mocks base method.
func (m *MockIPrompt) History() *prompt.History {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "History")
	ret0, _ := ret[0].(*prompt.History)
	return ret0
}

// History indicates an expected call of History.
func (mr *MockIPromptMockRecorder) History() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "History", reflect.TypeOf((*MockIPrompt)(nil).History))
}

// Input mocks base method.
func (m *MockIPrompt) Input() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Input")
	ret0, _ := ret[0].(string)
	return ret0
}

// Input indicates an expected call of Input.
func (mr *MockIPromptMockRecorder) Input() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Input", reflect.TypeOf((*MockIPrompt)(nil).Input))
}

// Lexer mocks base method.
func (m *MockIPrompt) Lexer() *prompt.Lexer {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Lexer")
	ret0, _ := ret[0].(*prompt.Lexer)
	return ret0
}

// Lexer indicates an expected call of Lexer.
func (mr *MockIPromptMockRecorder) Lexer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Lexer", reflect.TypeOf((*MockIPrompt)(nil).Lexer))
}

// Renderer mocks base method.
func (m *MockIPrompt) Renderer() *prompt.Render {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Renderer")
	ret0, _ := ret[0].(*prompt.Render)
	return ret0
}

// Renderer indicates an expected call of Renderer.
func (mr *MockIPromptMockRecorder) Renderer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Renderer", reflect.TypeOf((*MockIPrompt)(nil).Renderer))
}

// Run mocks base method.
func (m *MockIPrompt) Run() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Run")
}

// Run indicates an expected call of Run.
func (mr *MockIPromptMockRecorder) Run() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Run", reflect.TypeOf((*MockIPrompt)(nil).Run))
}

// SetCompletionOnDown mocks base method.
func (m *MockIPrompt) SetCompletionOnDown(arg0 bool) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetCompletionOnDown", arg0)
}

// SetCompletionOnDown indicates an expected call of SetCompletionOnDown.
func (mr *MockIPromptMockRecorder) SetCompletionOnDown(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetCompletionOnDown", reflect.TypeOf((*MockIPrompt)(nil).SetCompletionOnDown), arg0)
}

// SetConsoleParser mocks base method.
func (m *MockIPrompt) SetConsoleParser(arg0 prompt.ConsoleParser) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetConsoleParser", arg0)
}

// SetConsoleParser indicates an expected call of SetConsoleParser.
func (mr *MockIPromptMockRecorder) SetConsoleParser(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetConsoleParser", reflect.TypeOf((*MockIPrompt)(nil).SetConsoleParser), arg0)
}

// SetExitChecker mocks base method.
func (m *MockIPrompt) SetExitChecker(arg0 prompt.ExitChecker) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetExitChecker", arg0)
}

// SetExitChecker indicates an expected call of SetExitChecker.
func (mr *MockIPromptMockRecorder) SetExitChecker(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetExitChecker", reflect.TypeOf((*MockIPrompt)(nil).SetExitChecker), arg0)
}

// SetKeyBindMode mocks base method.
func (m *MockIPrompt) SetKeyBindMode(arg0 prompt.KeyBindMode) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetKeyBindMode", arg0)
}

// SetKeyBindMode indicates an expected call of SetKeyBindMode.
func (mr *MockIPromptMockRecorder) SetKeyBindMode(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetKeyBindMode", reflect.TypeOf((*MockIPrompt)(nil).SetKeyBindMode), arg0)
}

// SetStatementTerminatorCb mocks base method.
func (m *MockIPrompt) SetStatementTerminatorCb(arg0 prompt.StatementTerminatorCb) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetStatementTerminatorCb", arg0)
}

// SetStatementTerminatorCb indicates an expected call of SetStatementTerminatorCb.
func (mr *MockIPromptMockRecorder) SetStatementTerminatorCb(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetStatementTerminatorCb", reflect.TypeOf((*MockIPrompt)(nil).SetStatementTerminatorCb), arg0)
}
