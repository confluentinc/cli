// Copyright 2021 Confluent Inc. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*
Flink Gateway API

Flink Gateway API is used to submit and execute all Flink DDL/DML SQL statements.

API version: 0.0.1
Contact: ksql-team@confluent.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1alpha1

import (
	"encoding/json"
)

import (
	"reflect"
)

// SqlV1alpha1StatementSpec The desired state of the Statement
type SqlV1alpha1StatementSpec struct {
	// The name of the SQL statement.
	StatementName *string `json:"statement_name,omitempty"`
	// SQL statement.
	Statement *string `json:"statement,omitempty"`
	// A map of client properties used to execute a SQL statement.
	Properties *map[string]string `json:"properties,omitempty"`
	// The environment to which this belongs.
	Environment *GlobalObjectReference `json:"environment,omitempty"`
	// The compute_pool associated with this object.
	ComputePool *EnvScopedObjectReference `json:"compute_pool,omitempty"`
}

// NewSqlV1alpha1StatementSpec instantiates a new SqlV1alpha1StatementSpec object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSqlV1alpha1StatementSpec() *SqlV1alpha1StatementSpec {
	this := SqlV1alpha1StatementSpec{}
	return &this
}

// NewSqlV1alpha1StatementSpecWithDefaults instantiates a new SqlV1alpha1StatementSpec object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSqlV1alpha1StatementSpecWithDefaults() *SqlV1alpha1StatementSpec {
	this := SqlV1alpha1StatementSpec{}
	return &this
}

// GetStatementName returns the StatementName field value if set, zero value otherwise.
func (o *SqlV1alpha1StatementSpec) GetStatementName() string {
	if o == nil || o.StatementName == nil {
		var ret string
		return ret
	}
	return *o.StatementName
}

// GetStatementNameOk returns a tuple with the StatementName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SqlV1alpha1StatementSpec) GetStatementNameOk() (*string, bool) {
	if o == nil || o.StatementName == nil {
		return nil, false
	}
	return o.StatementName, true
}

// HasStatementName returns a boolean if a field has been set.
func (o *SqlV1alpha1StatementSpec) HasStatementName() bool {
	if o != nil && o.StatementName != nil {
		return true
	}

	return false
}

// SetStatementName gets a reference to the given string and assigns it to the StatementName field.
func (o *SqlV1alpha1StatementSpec) SetStatementName(v string) {
	o.StatementName = &v
}

// GetStatement returns the Statement field value if set, zero value otherwise.
func (o *SqlV1alpha1StatementSpec) GetStatement() string {
	if o == nil || o.Statement == nil {
		var ret string
		return ret
	}
	return *o.Statement
}

// GetStatementOk returns a tuple with the Statement field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SqlV1alpha1StatementSpec) GetStatementOk() (*string, bool) {
	if o == nil || o.Statement == nil {
		return nil, false
	}
	return o.Statement, true
}

// HasStatement returns a boolean if a field has been set.
func (o *SqlV1alpha1StatementSpec) HasStatement() bool {
	if o != nil && o.Statement != nil {
		return true
	}

	return false
}

// SetStatement gets a reference to the given string and assigns it to the Statement field.
func (o *SqlV1alpha1StatementSpec) SetStatement(v string) {
	o.Statement = &v
}

// GetProperties returns the Properties field value if set, zero value otherwise.
func (o *SqlV1alpha1StatementSpec) GetProperties() map[string]string {
	if o == nil || o.Properties == nil {
		var ret map[string]string
		return ret
	}
	return *o.Properties
}

// GetPropertiesOk returns a tuple with the Properties field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SqlV1alpha1StatementSpec) GetPropertiesOk() (*map[string]string, bool) {
	if o == nil || o.Properties == nil {
		return nil, false
	}
	return o.Properties, true
}

// HasProperties returns a boolean if a field has been set.
func (o *SqlV1alpha1StatementSpec) HasProperties() bool {
	if o != nil && o.Properties != nil {
		return true
	}

	return false
}

// SetProperties gets a reference to the given map[string]string and assigns it to the Properties field.
func (o *SqlV1alpha1StatementSpec) SetProperties(v map[string]string) {
	o.Properties = &v
}

// GetEnvironment returns the Environment field value if set, zero value otherwise.
func (o *SqlV1alpha1StatementSpec) GetEnvironment() GlobalObjectReference {
	if o == nil || o.Environment == nil {
		var ret GlobalObjectReference
		return ret
	}
	return *o.Environment
}

// GetEnvironmentOk returns a tuple with the Environment field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SqlV1alpha1StatementSpec) GetEnvironmentOk() (*GlobalObjectReference, bool) {
	if o == nil || o.Environment == nil {
		return nil, false
	}
	return o.Environment, true
}

// HasEnvironment returns a boolean if a field has been set.
func (o *SqlV1alpha1StatementSpec) HasEnvironment() bool {
	if o != nil && o.Environment != nil {
		return true
	}

	return false
}

// SetEnvironment gets a reference to the given GlobalObjectReference and assigns it to the Environment field.
func (o *SqlV1alpha1StatementSpec) SetEnvironment(v GlobalObjectReference) {
	o.Environment = &v
}

// GetComputePool returns the ComputePool field value if set, zero value otherwise.
func (o *SqlV1alpha1StatementSpec) GetComputePool() EnvScopedObjectReference {
	if o == nil || o.ComputePool == nil {
		var ret EnvScopedObjectReference
		return ret
	}
	return *o.ComputePool
}

// GetComputePoolOk returns a tuple with the ComputePool field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SqlV1alpha1StatementSpec) GetComputePoolOk() (*EnvScopedObjectReference, bool) {
	if o == nil || o.ComputePool == nil {
		return nil, false
	}
	return o.ComputePool, true
}

// HasComputePool returns a boolean if a field has been set.
func (o *SqlV1alpha1StatementSpec) HasComputePool() bool {
	if o != nil && o.ComputePool != nil {
		return true
	}

	return false
}

// SetComputePool gets a reference to the given EnvScopedObjectReference and assigns it to the ComputePool field.
func (o *SqlV1alpha1StatementSpec) SetComputePool(v EnvScopedObjectReference) {
	o.ComputePool = &v
}

// Redact resets all sensitive fields to their zero value.
func (o *SqlV1alpha1StatementSpec) Redact() {
	o.recurseRedact(o.StatementName)
	o.recurseRedact(o.Statement)
	o.recurseRedact(o.Properties)
	o.recurseRedact(o.Environment)
	o.recurseRedact(o.ComputePool)
}

func (o *SqlV1alpha1StatementSpec) recurseRedact(v interface{}) {
	type redactor interface {
		Redact()
	}
	if r, ok := v.(redactor); ok {
		r.Redact()
	} else {
		val := reflect.ValueOf(v)
		if val.Kind() == reflect.Ptr {
			val = val.Elem()
		}
		switch val.Kind() {
		case reflect.Slice, reflect.Array:
			for i := 0; i < val.Len(); i++ {
				// support data types declared without pointers
				o.recurseRedact(val.Index(i).Interface())
				// ... and data types that were declared without but need pointers (for Redact)
				if val.Index(i).CanAddr() {
					o.recurseRedact(val.Index(i).Addr().Interface())
				}
			}
		}
	}
}

func (o SqlV1alpha1StatementSpec) zeroField(v interface{}) {
	p := reflect.ValueOf(v).Elem()
	p.Set(reflect.Zero(p.Type()))
}

func (o SqlV1alpha1StatementSpec) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.StatementName != nil {
		toSerialize["statement_name"] = o.StatementName
	}
	if o.Statement != nil {
		toSerialize["statement"] = o.Statement
	}
	if o.Properties != nil {
		toSerialize["properties"] = o.Properties
	}
	if o.Environment != nil {
		toSerialize["environment"] = o.Environment
	}
	if o.ComputePool != nil {
		toSerialize["compute_pool"] = o.ComputePool
	}
	return json.Marshal(toSerialize)
}

type NullableSqlV1alpha1StatementSpec struct {
	value *SqlV1alpha1StatementSpec
	isSet bool
}

func (v NullableSqlV1alpha1StatementSpec) Get() *SqlV1alpha1StatementSpec {
	return v.value
}

func (v *NullableSqlV1alpha1StatementSpec) Set(val *SqlV1alpha1StatementSpec) {
	v.value = val
	v.isSet = true
}

func (v NullableSqlV1alpha1StatementSpec) IsSet() bool {
	return v.isSet
}

func (v *NullableSqlV1alpha1StatementSpec) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSqlV1alpha1StatementSpec(val *SqlV1alpha1StatementSpec) *NullableSqlV1alpha1StatementSpec {
	return &NullableSqlV1alpha1StatementSpec{value: val, isSet: true}
}

func (v NullableSqlV1alpha1StatementSpec) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSqlV1alpha1StatementSpec) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
