// Copyright 2021 Confluent Inc. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*
SQL API v1alpha1

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.0.1
Contact: flink-control-plane@confluent.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1alpha1

import (
	"encoding/json"
)

import (
	"reflect"
)

// SqlV1alpha1StatementResult `Statement Result` represents a resource used to model results of SQL statements. The API allows you to read your SQL statement result. ## The Statement Result Model <SchemaDefinition schemaRef=\"#/components/schemas/sql.v1alpha1.StatementResult\" />
type SqlV1alpha1StatementResult struct {
	// APIVersion defines the schema version of this representation of a resource.
	ApiVersion string `json:"api_version"`
	// Kind defines the object this REST resource represents.
	Kind     string                             `json:"kind"`
	Metadata ListMeta                           `json:"metadata"`
	Results  *SqlV1alpha1StatementResultResults `json:"results,omitempty"`
}

// NewSqlV1alpha1StatementResult instantiates a new SqlV1alpha1StatementResult object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSqlV1alpha1StatementResult(apiVersion string, kind string, metadata ListMeta) *SqlV1alpha1StatementResult {
	this := SqlV1alpha1StatementResult{}
	this.ApiVersion = apiVersion
	this.Kind = kind
	this.Metadata = metadata
	return &this
}

// NewSqlV1alpha1StatementResultWithDefaults instantiates a new SqlV1alpha1StatementResult object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSqlV1alpha1StatementResultWithDefaults() *SqlV1alpha1StatementResult {
	this := SqlV1alpha1StatementResult{}
	return &this
}

// GetApiVersion returns the ApiVersion field value
func (o *SqlV1alpha1StatementResult) GetApiVersion() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ApiVersion
}

// GetApiVersionOk returns a tuple with the ApiVersion field value
// and a boolean to check if the value has been set.
func (o *SqlV1alpha1StatementResult) GetApiVersionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ApiVersion, true
}

// SetApiVersion sets field value
func (o *SqlV1alpha1StatementResult) SetApiVersion(v string) {
	o.ApiVersion = v
}

// GetKind returns the Kind field value
func (o *SqlV1alpha1StatementResult) GetKind() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Kind
}

// GetKindOk returns a tuple with the Kind field value
// and a boolean to check if the value has been set.
func (o *SqlV1alpha1StatementResult) GetKindOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Kind, true
}

// SetKind sets field value
func (o *SqlV1alpha1StatementResult) SetKind(v string) {
	o.Kind = v
}

// GetMetadata returns the Metadata field value
func (o *SqlV1alpha1StatementResult) GetMetadata() ListMeta {
	if o == nil {
		var ret ListMeta
		return ret
	}

	return o.Metadata
}

// GetMetadataOk returns a tuple with the Metadata field value
// and a boolean to check if the value has been set.
func (o *SqlV1alpha1StatementResult) GetMetadataOk() (*ListMeta, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Metadata, true
}

// SetMetadata sets field value
func (o *SqlV1alpha1StatementResult) SetMetadata(v ListMeta) {
	o.Metadata = v
}

// GetResults returns the Results field value if set, zero value otherwise.
func (o *SqlV1alpha1StatementResult) GetResults() SqlV1alpha1StatementResultResults {
	if o == nil || o.Results == nil {
		var ret SqlV1alpha1StatementResultResults
		return ret
	}
	return *o.Results
}

// GetResultsOk returns a tuple with the Results field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SqlV1alpha1StatementResult) GetResultsOk() (*SqlV1alpha1StatementResultResults, bool) {
	if o == nil || o.Results == nil {
		return nil, false
	}
	return o.Results, true
}

// HasResults returns a boolean if a field has been set.
func (o *SqlV1alpha1StatementResult) HasResults() bool {
	if o != nil && o.Results != nil {
		return true
	}

	return false
}

// SetResults gets a reference to the given SqlV1alpha1StatementResultResults and assigns it to the Results field.
func (o *SqlV1alpha1StatementResult) SetResults(v SqlV1alpha1StatementResultResults) {
	o.Results = &v
}

// Redact resets all sensitive fields to their zero value.
func (o *SqlV1alpha1StatementResult) Redact() {
	o.recurseRedact(&o.ApiVersion)
	o.recurseRedact(&o.Kind)
	o.recurseRedact(&o.Metadata)
	o.recurseRedact(o.Results)
}

func (o *SqlV1alpha1StatementResult) recurseRedact(v interface{}) {
	type redactor interface {
		Redact()
	}
	if r, ok := v.(redactor); ok {
		r.Redact()
	} else {
		val := reflect.ValueOf(v)
		if val.Kind() == reflect.Ptr {
			val = val.Elem()
		}
		switch val.Kind() {
		case reflect.Slice, reflect.Array:
			for i := 0; i < val.Len(); i++ {
				// support data types declared without pointers
				o.recurseRedact(val.Index(i).Interface())
				// ... and data types that were declared without but need pointers (for Redact)
				if val.Index(i).CanAddr() {
					o.recurseRedact(val.Index(i).Addr().Interface())
				}
			}
		}
	}
}

func (o SqlV1alpha1StatementResult) zeroField(v interface{}) {
	p := reflect.ValueOf(v).Elem()
	p.Set(reflect.Zero(p.Type()))
}

func (o SqlV1alpha1StatementResult) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["api_version"] = o.ApiVersion
	}
	if true {
		toSerialize["kind"] = o.Kind
	}
	if true {
		toSerialize["metadata"] = o.Metadata
	}
	if o.Results != nil {
		toSerialize["results"] = o.Results
	}
	return json.Marshal(toSerialize)
}

type NullableSqlV1alpha1StatementResult struct {
	value *SqlV1alpha1StatementResult
	isSet bool
}

func (v NullableSqlV1alpha1StatementResult) Get() *SqlV1alpha1StatementResult {
	return v.value
}

func (v *NullableSqlV1alpha1StatementResult) Set(val *SqlV1alpha1StatementResult) {
	v.value = val
	v.isSet = true
}

func (v NullableSqlV1alpha1StatementResult) IsSet() bool {
	return v.isSet
}

func (v *NullableSqlV1alpha1StatementResult) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSqlV1alpha1StatementResult(val *SqlV1alpha1StatementResult) *NullableSqlV1alpha1StatementResult {
	return &NullableSqlV1alpha1StatementResult{value: val, isSet: true}
}

func (v NullableSqlV1alpha1StatementResult) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSqlV1alpha1StatementResult) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
