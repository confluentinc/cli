// Copyright 2021 Confluent Inc. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*
Flink Gateway API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.0.1
Contact: ksql-team@confluent.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
)

import (
	"reflect"
)

// V1alpha1Statement This API is used to submit and execute all Flink DDL/DML SQL statements.   ## The Statements Model <SchemaDefinition schemaRef=\"#/components/schemas/v1alpha1.Statement\" />
type V1alpha1Statement struct {
	// APIVersion defines the schema version of this representation of a resource.
	ApiVersion *string `json:"api_version,omitempty"`
	// Kind defines the object this REST resource represents.
	Kind *string `json:"kind,omitempty"`
	// ID of the SQL statement
	Id *string `json:"id,omitempty"`
	Metadata *ObjectMeta `json:"metadata,omitempty"`
	// Request/client properties.
	Properties *V1alphaProperties `json:"properties,omitempty"`
	// The SQL statement will be executed under the scope of this compute pool id.
	ComputePoolId *string `json:"compute_pool_id,omitempty"`
	// SQL statement executed.
	Statement *string `json:"statement,omitempty"`
	// Type of the SQL statement as identified.
	StatementKind *string `json:"statement_kind,omitempty"`
	Status *V1alpha1StatementStatus `json:"status,omitempty"`
}

// NewV1alpha1Statement instantiates a new V1alpha1Statement object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewV1alpha1Statement() *V1alpha1Statement {
	this := V1alpha1Statement{}
	return &this
}

// NewV1alpha1StatementWithDefaults instantiates a new V1alpha1Statement object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewV1alpha1StatementWithDefaults() *V1alpha1Statement {
	this := V1alpha1Statement{}
	return &this
}

// GetApiVersion returns the ApiVersion field value if set, zero value otherwise.
func (o *V1alpha1Statement) GetApiVersion() string {
	if o == nil || o.ApiVersion == nil {
		var ret string
		return ret
	}
	return *o.ApiVersion
}

// GetApiVersionOk returns a tuple with the ApiVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1alpha1Statement) GetApiVersionOk() (*string, bool) {
	if o == nil || o.ApiVersion == nil {
		return nil, false
	}
	return o.ApiVersion, true
}

// HasApiVersion returns a boolean if a field has been set.
func (o *V1alpha1Statement) HasApiVersion() bool {
	if o != nil && o.ApiVersion != nil {
		return true
	}

	return false
}

// SetApiVersion gets a reference to the given string and assigns it to the ApiVersion field.
func (o *V1alpha1Statement) SetApiVersion(v string) {
	o.ApiVersion = &v
}

// GetKind returns the Kind field value if set, zero value otherwise.
func (o *V1alpha1Statement) GetKind() string {
	if o == nil || o.Kind == nil {
		var ret string
		return ret
	}
	return *o.Kind
}

// GetKindOk returns a tuple with the Kind field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1alpha1Statement) GetKindOk() (*string, bool) {
	if o == nil || o.Kind == nil {
		return nil, false
	}
	return o.Kind, true
}

// HasKind returns a boolean if a field has been set.
func (o *V1alpha1Statement) HasKind() bool {
	if o != nil && o.Kind != nil {
		return true
	}

	return false
}

// SetKind gets a reference to the given string and assigns it to the Kind field.
func (o *V1alpha1Statement) SetKind(v string) {
	o.Kind = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *V1alpha1Statement) GetId() string {
	if o == nil || o.Id == nil {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1alpha1Statement) GetIdOk() (*string, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *V1alpha1Statement) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *V1alpha1Statement) SetId(v string) {
	o.Id = &v
}

// GetMetadata returns the Metadata field value if set, zero value otherwise.
func (o *V1alpha1Statement) GetMetadata() ObjectMeta {
	if o == nil || o.Metadata == nil {
		var ret ObjectMeta
		return ret
	}
	return *o.Metadata
}

// GetMetadataOk returns a tuple with the Metadata field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1alpha1Statement) GetMetadataOk() (*ObjectMeta, bool) {
	if o == nil || o.Metadata == nil {
		return nil, false
	}
	return o.Metadata, true
}

// HasMetadata returns a boolean if a field has been set.
func (o *V1alpha1Statement) HasMetadata() bool {
	if o != nil && o.Metadata != nil {
		return true
	}

	return false
}

// SetMetadata gets a reference to the given ObjectMeta and assigns it to the Metadata field.
func (o *V1alpha1Statement) SetMetadata(v ObjectMeta) {
	o.Metadata = &v
}

// GetProperties returns the Properties field value if set, zero value otherwise.
func (o *V1alpha1Statement) GetProperties() V1alphaProperties {
	if o == nil || o.Properties == nil {
		var ret V1alphaProperties
		return ret
	}
	return *o.Properties
}

// GetPropertiesOk returns a tuple with the Properties field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1alpha1Statement) GetPropertiesOk() (*V1alphaProperties, bool) {
	if o == nil || o.Properties == nil {
		return nil, false
	}
	return o.Properties, true
}

// HasProperties returns a boolean if a field has been set.
func (o *V1alpha1Statement) HasProperties() bool {
	if o != nil && o.Properties != nil {
		return true
	}

	return false
}

// SetProperties gets a reference to the given V1alphaProperties and assigns it to the Properties field.
func (o *V1alpha1Statement) SetProperties(v V1alphaProperties) {
	o.Properties = &v
}

// GetComputePoolId returns the ComputePoolId field value if set, zero value otherwise.
func (o *V1alpha1Statement) GetComputePoolId() string {
	if o == nil || o.ComputePoolId == nil {
		var ret string
		return ret
	}
	return *o.ComputePoolId
}

// GetComputePoolIdOk returns a tuple with the ComputePoolId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1alpha1Statement) GetComputePoolIdOk() (*string, bool) {
	if o == nil || o.ComputePoolId == nil {
		return nil, false
	}
	return o.ComputePoolId, true
}

// HasComputePoolId returns a boolean if a field has been set.
func (o *V1alpha1Statement) HasComputePoolId() bool {
	if o != nil && o.ComputePoolId != nil {
		return true
	}

	return false
}

// SetComputePoolId gets a reference to the given string and assigns it to the ComputePoolId field.
func (o *V1alpha1Statement) SetComputePoolId(v string) {
	o.ComputePoolId = &v
}

// GetStatement returns the Statement field value if set, zero value otherwise.
func (o *V1alpha1Statement) GetStatement() string {
	if o == nil || o.Statement == nil {
		var ret string
		return ret
	}
	return *o.Statement
}

// GetStatementOk returns a tuple with the Statement field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1alpha1Statement) GetStatementOk() (*string, bool) {
	if o == nil || o.Statement == nil {
		return nil, false
	}
	return o.Statement, true
}

// HasStatement returns a boolean if a field has been set.
func (o *V1alpha1Statement) HasStatement() bool {
	if o != nil && o.Statement != nil {
		return true
	}

	return false
}

// SetStatement gets a reference to the given string and assigns it to the Statement field.
func (o *V1alpha1Statement) SetStatement(v string) {
	o.Statement = &v
}

// GetStatementKind returns the StatementKind field value if set, zero value otherwise.
func (o *V1alpha1Statement) GetStatementKind() string {
	if o == nil || o.StatementKind == nil {
		var ret string
		return ret
	}
	return *o.StatementKind
}

// GetStatementKindOk returns a tuple with the StatementKind field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1alpha1Statement) GetStatementKindOk() (*string, bool) {
	if o == nil || o.StatementKind == nil {
		return nil, false
	}
	return o.StatementKind, true
}

// HasStatementKind returns a boolean if a field has been set.
func (o *V1alpha1Statement) HasStatementKind() bool {
	if o != nil && o.StatementKind != nil {
		return true
	}

	return false
}

// SetStatementKind gets a reference to the given string and assigns it to the StatementKind field.
func (o *V1alpha1Statement) SetStatementKind(v string) {
	o.StatementKind = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *V1alpha1Statement) GetStatus() V1alpha1StatementStatus {
	if o == nil || o.Status == nil {
		var ret V1alpha1StatementStatus
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1alpha1Statement) GetStatusOk() (*V1alpha1StatementStatus, bool) {
	if o == nil || o.Status == nil {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *V1alpha1Statement) HasStatus() bool {
	if o != nil && o.Status != nil {
		return true
	}

	return false
}

// SetStatus gets a reference to the given V1alpha1StatementStatus and assigns it to the Status field.
func (o *V1alpha1Statement) SetStatus(v V1alpha1StatementStatus) {
	o.Status = &v
}

// Redact resets all sensitive fields to their zero value.
func (o *V1alpha1Statement) Redact() {
    o.recurseRedact(o.ApiVersion)
    o.recurseRedact(o.Kind)
    o.recurseRedact(o.Id)
    o.recurseRedact(o.Metadata)
    o.recurseRedact(o.Properties)
    o.recurseRedact(o.ComputePoolId)
    o.recurseRedact(o.Statement)
    o.recurseRedact(o.StatementKind)
    o.recurseRedact(o.Status)
}

func (o *V1alpha1Statement) recurseRedact(v interface{}) {
    type redactor interface {
        Redact()
    }
    if r, ok := v.(redactor); ok {
        r.Redact()
    } else {
        val := reflect.ValueOf(v)
        if val.Kind() == reflect.Ptr {
            val = val.Elem()
        }
        switch val.Kind() {
        case reflect.Slice, reflect.Array:
            for i := 0; i < val.Len(); i++ {
                // support data types declared without pointers
                o.recurseRedact(val.Index(i).Interface())
                // ... and data types that were declared without but need pointers (for Redact)
                if val.Index(i).CanAddr() {
                    o.recurseRedact(val.Index(i).Addr().Interface())
                }
            }
        }
    }
}

func (o V1alpha1Statement) zeroField(v interface{}) {
    p := reflect.ValueOf(v).Elem()
    p.Set(reflect.Zero(p.Type()))
}

func (o V1alpha1Statement) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.ApiVersion != nil {
		toSerialize["api_version"] = o.ApiVersion
	}
	if o.Kind != nil {
		toSerialize["kind"] = o.Kind
	}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.Metadata != nil {
		toSerialize["metadata"] = o.Metadata
	}
	if o.Properties != nil {
		toSerialize["properties"] = o.Properties
	}
	if o.ComputePoolId != nil {
		toSerialize["compute_pool_id"] = o.ComputePoolId
	}
	if o.Statement != nil {
		toSerialize["statement"] = o.Statement
	}
	if o.StatementKind != nil {
		toSerialize["statement_kind"] = o.StatementKind
	}
	if o.Status != nil {
		toSerialize["status"] = o.Status
	}
	return json.Marshal(toSerialize)
}

type NullableV1alpha1Statement struct {
	value *V1alpha1Statement
	isSet bool
}

func (v NullableV1alpha1Statement) Get() *V1alpha1Statement {
	return v.value
}

func (v *NullableV1alpha1Statement) Set(val *V1alpha1Statement) {
	v.value = val
	v.isSet = true
}

func (v NullableV1alpha1Statement) IsSet() bool {
	return v.isSet
}

func (v *NullableV1alpha1Statement) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV1alpha1Statement(val *V1alpha1Statement) *NullableV1alpha1Statement {
	return &NullableV1alpha1Statement{value: val, isSet: true}
}

func (v NullableV1alpha1Statement) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV1alpha1Statement) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


