// Copyright 2021 Confluent Inc. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*
Flink Gateway API

Flink Gateway API is used to submit and execute all Flink DDL/DML SQL statements.

API version: 0.0.1
Contact: ksql-team@confluent.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1alpha1

import (
	"encoding/json"
)

import (
	"reflect"
)

// SqlV1alpha1StatementStatus The status of the Statement
type SqlV1alpha1StatementStatus struct {
	// The lifecyle phase of the submitted SQL statement:  PENDING: SQL statement is pending execution;  RUNNING: SQL statement execution is in progress;  COMPLETED: SQL statement is completed;  DELETING: SQL statement deletion is in progress;  FAILED: SQL statement execution has failed;
	Phase string `json:"phase"`
	// Displayable error message if SQL statement is in a failed state
	ErrorMessage *string `json:"error_message,omitempty"`
}

// NewSqlV1alpha1StatementStatus instantiates a new SqlV1alpha1StatementStatus object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSqlV1alpha1StatementStatus(phase string) *SqlV1alpha1StatementStatus {
	this := SqlV1alpha1StatementStatus{}
	this.Phase = phase
	return &this
}

// NewSqlV1alpha1StatementStatusWithDefaults instantiates a new SqlV1alpha1StatementStatus object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSqlV1alpha1StatementStatusWithDefaults() *SqlV1alpha1StatementStatus {
	this := SqlV1alpha1StatementStatus{}
	return &this
}

// GetPhase returns the Phase field value
func (o *SqlV1alpha1StatementStatus) GetPhase() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Phase
}

// GetPhaseOk returns a tuple with the Phase field value
// and a boolean to check if the value has been set.
func (o *SqlV1alpha1StatementStatus) GetPhaseOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Phase, true
}

// SetPhase sets field value
func (o *SqlV1alpha1StatementStatus) SetPhase(v string) {
	o.Phase = v
}

// GetErrorMessage returns the ErrorMessage field value if set, zero value otherwise.
func (o *SqlV1alpha1StatementStatus) GetErrorMessage() string {
	if o == nil || o.ErrorMessage == nil {
		var ret string
		return ret
	}
	return *o.ErrorMessage
}

// GetErrorMessageOk returns a tuple with the ErrorMessage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SqlV1alpha1StatementStatus) GetErrorMessageOk() (*string, bool) {
	if o == nil || o.ErrorMessage == nil {
		return nil, false
	}
	return o.ErrorMessage, true
}

// HasErrorMessage returns a boolean if a field has been set.
func (o *SqlV1alpha1StatementStatus) HasErrorMessage() bool {
	if o != nil && o.ErrorMessage != nil {
		return true
	}

	return false
}

// SetErrorMessage gets a reference to the given string and assigns it to the ErrorMessage field.
func (o *SqlV1alpha1StatementStatus) SetErrorMessage(v string) {
	o.ErrorMessage = &v
}

// Redact resets all sensitive fields to their zero value.
func (o *SqlV1alpha1StatementStatus) Redact() {
	o.recurseRedact(&o.Phase)
	o.recurseRedact(o.ErrorMessage)
}

func (o *SqlV1alpha1StatementStatus) recurseRedact(v interface{}) {
	type redactor interface {
		Redact()
	}
	if r, ok := v.(redactor); ok {
		r.Redact()
	} else {
		val := reflect.ValueOf(v)
		if val.Kind() == reflect.Ptr {
			val = val.Elem()
		}
		switch val.Kind() {
		case reflect.Slice, reflect.Array:
			for i := 0; i < val.Len(); i++ {
				// support data types declared without pointers
				o.recurseRedact(val.Index(i).Interface())
				// ... and data types that were declared without but need pointers (for Redact)
				if val.Index(i).CanAddr() {
					o.recurseRedact(val.Index(i).Addr().Interface())
				}
			}
		}
	}
}

func (o SqlV1alpha1StatementStatus) zeroField(v interface{}) {
	p := reflect.ValueOf(v).Elem()
	p.Set(reflect.Zero(p.Type()))
}

func (o SqlV1alpha1StatementStatus) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["phase"] = o.Phase
	}
	if o.ErrorMessage != nil {
		toSerialize["error_message"] = o.ErrorMessage
	}
	return json.Marshal(toSerialize)
}

type NullableSqlV1alpha1StatementStatus struct {
	value *SqlV1alpha1StatementStatus
	isSet bool
}

func (v NullableSqlV1alpha1StatementStatus) Get() *SqlV1alpha1StatementStatus {
	return v.value
}

func (v *NullableSqlV1alpha1StatementStatus) Set(val *SqlV1alpha1StatementStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableSqlV1alpha1StatementStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableSqlV1alpha1StatementStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSqlV1alpha1StatementStatus(val *SqlV1alpha1StatementStatus) *NullableSqlV1alpha1StatementStatus {
	return &NullableSqlV1alpha1StatementStatus{value: val, isSet: true}
}

func (v NullableSqlV1alpha1StatementStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSqlV1alpha1StatementStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
