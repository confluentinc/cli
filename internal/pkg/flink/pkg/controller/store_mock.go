// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/confluentinc/flink-sql-client/pkg/controller (interfaces: StoreInterface)

// Package controller is a generated GoMock package.
package controller

import (
	reflect "reflect"

	types "github.com/confluentinc/flink-sql-client/pkg/types"
	gomock "github.com/golang/mock/gomock"
)

// MockStoreInterface is a mock of StoreInterface interface.
type MockStoreInterface struct {
	ctrl     *gomock.Controller
	recorder *MockStoreInterfaceMockRecorder
}

// MockStoreInterfaceMockRecorder is the mock recorder for MockStoreInterface.
type MockStoreInterfaceMockRecorder struct {
	mock *MockStoreInterface
}

// NewMockStoreInterface creates a new mock instance.
func NewMockStoreInterface(ctrl *gomock.Controller) *MockStoreInterface {
	mock := &MockStoreInterface{ctrl: ctrl}
	mock.recorder = &MockStoreInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStoreInterface) EXPECT() *MockStoreInterfaceMockRecorder {
	return m.recorder
}

// FetchStatementResults mocks base method.
func (m *MockStoreInterface) FetchStatementResults(arg0 types.ProcessedStatement) (*types.ProcessedStatement, *types.StatementError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchStatementResults", arg0)
	ret0, _ := ret[0].(*types.ProcessedStatement)
	ret1, _ := ret[1].(*types.StatementError)
	return ret0, ret1
}

// FetchStatementResults indicates an expected call of FetchStatementResults.
func (mr *MockStoreInterfaceMockRecorder) FetchStatementResults(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchStatementResults", reflect.TypeOf((*MockStoreInterface)(nil).FetchStatementResults), arg0)
}

// ProcessStatement mocks base method.
func (m *MockStoreInterface) ProcessStatement(arg0 string) (*types.ProcessedStatement, *types.StatementError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProcessStatement", arg0)
	ret0, _ := ret[0].(*types.ProcessedStatement)
	ret1, _ := ret[1].(*types.StatementError)
	return ret0, ret1
}

// ProcessStatement indicates an expected call of ProcessStatement.
func (mr *MockStoreInterfaceMockRecorder) ProcessStatement(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProcessStatement", reflect.TypeOf((*MockStoreInterface)(nil).ProcessStatement), arg0)
}
