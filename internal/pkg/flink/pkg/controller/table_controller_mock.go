// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/confluentinc/flink-sql-client/pkg/controller (interfaces: TableControllerInterface)

// Package controller is a generated GoMock package.
package controller

import (
	reflect "reflect"

	v2 "github.com/gdamore/tcell/v2"
	gomock "github.com/golang/mock/gomock"
)

// MockTableControllerInterface is a mock of TableControllerInterface interface.
type MockTableControllerInterface struct {
	ctrl     *gomock.Controller
	recorder *MockTableControllerInterfaceMockRecorder
}

// MockTableControllerInterfaceMockRecorder is the mock recorder for MockTableControllerInterface.
type MockTableControllerInterfaceMockRecorder struct {
	mock *MockTableControllerInterface
}

// NewMockTableControllerInterface creates a new mock instance.
func NewMockTableControllerInterface(ctrl *gomock.Controller) *MockTableControllerInterface {
	mock := &MockTableControllerInterface{ctrl: ctrl}
	mock.recorder = &MockTableControllerInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTableControllerInterface) EXPECT() *MockTableControllerInterfaceMockRecorder {
	return m.recorder
}

// AppInputCapture mocks base method.
func (m *MockTableControllerInterface) AppInputCapture(arg0 *v2.EventKey) *v2.EventKey {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AppInputCapture", arg0)
	ret0, _ := ret[0].(*v2.EventKey)
	return ret0
}

// AppInputCapture indicates an expected call of AppInputCapture.
func (mr *MockTableControllerInterfaceMockRecorder) AppInputCapture(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AppInputCapture", reflect.TypeOf((*MockTableControllerInterface)(nil).AppInputCapture), arg0)
}

// Borders mocks base method.
func (m *MockTableControllerInterface) Borders() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Borders")
}

// Borders indicates an expected call of Borders.
func (mr *MockTableControllerInterfaceMockRecorder) Borders() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Borders", reflect.TypeOf((*MockTableControllerInterface)(nil).Borders))
}

// HandleCellEvent mocks base method.
func (m *MockTableControllerInterface) HandleCellEvent(arg0 *v2.EventKey) *v2.EventKey {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HandleCellEvent", arg0)
	ret0, _ := ret[0].(*v2.EventKey)
	return ret0
}

// HandleCellEvent indicates an expected call of HandleCellEvent.
func (mr *MockTableControllerInterfaceMockRecorder) HandleCellEvent(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleCellEvent", reflect.TypeOf((*MockTableControllerInterface)(nil).HandleCellEvent), arg0)
}

// SetDataAndFocus mocks base method.
func (m *MockTableControllerInterface) SetDataAndFocus(arg0 *StatementResult) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetDataAndFocus", arg0)
}

// SetDataAndFocus indicates an expected call of SetDataAndFocus.
func (mr *MockTableControllerInterfaceMockRecorder) SetDataAndFocus(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetDataAndFocus", reflect.TypeOf((*MockTableControllerInterface)(nil).SetDataAndFocus), arg0)
}

// SetInputController mocks base method.
func (m *MockTableControllerInterface) SetInputController(arg0 InputControllerInterface) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetInputController", arg0)
}

// SetInputController indicates an expected call of SetInputController.
func (mr *MockTableControllerInterfaceMockRecorder) SetInputController(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetInputController", reflect.TypeOf((*MockTableControllerInterface)(nil).SetInputController), arg0)
}
