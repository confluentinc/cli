// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/confluentinc/flink-sql-client/pkg/controller (interfaces: GatewayClientInterface)

// Package controller is a generated GoMock package.
package controller

import (
	context "context"
	http "net/http"
	reflect "reflect"

	v1alpha1 "github.com/confluentinc/ccloud-sdk-go-v2-internal/flink-gateway/v1alpha1"
	gomock "github.com/golang/mock/gomock"
)

// MockGatewayClientInterface is a mock of GatewayClientInterface interface.
type MockGatewayClientInterface struct {
	ctrl     *gomock.Controller
	recorder *MockGatewayClientInterfaceMockRecorder
}

// MockGatewayClientInterfaceMockRecorder is the mock recorder for MockGatewayClientInterface.
type MockGatewayClientInterfaceMockRecorder struct {
	mock *MockGatewayClientInterface
}

// NewMockGatewayClientInterface creates a new mock instance.
func NewMockGatewayClientInterface(ctrl *gomock.Controller) *MockGatewayClientInterface {
	mock := &MockGatewayClientInterface{ctrl: ctrl}
	mock.recorder = &MockGatewayClientInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGatewayClientInterface) EXPECT() *MockGatewayClientInterfaceMockRecorder {
	return m.recorder
}

// CreateStatement mocks base method.
func (m *MockGatewayClientInterface) CreateStatement(arg0 context.Context, arg1 string, arg2 map[string]string) (v1alpha1.SqlV1alpha1Statement, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateStatement", arg0, arg1, arg2)
	ret0, _ := ret[0].(v1alpha1.SqlV1alpha1Statement)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateStatement indicates an expected call of CreateStatement.
func (mr *MockGatewayClientInterfaceMockRecorder) CreateStatement(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateStatement", reflect.TypeOf((*MockGatewayClientInterface)(nil).CreateStatement), arg0, arg1, arg2)
}

// DeleteStatement mocks base method.
func (m *MockGatewayClientInterface) DeleteStatement(arg0 context.Context, arg1 string) (*http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteStatement", arg0, arg1)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteStatement indicates an expected call of DeleteStatement.
func (mr *MockGatewayClientInterfaceMockRecorder) DeleteStatement(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteStatement", reflect.TypeOf((*MockGatewayClientInterface)(nil).DeleteStatement), arg0, arg1)
}

// GetStatement mocks base method.
func (m *MockGatewayClientInterface) GetStatement(arg0 context.Context, arg1 string) (v1alpha1.SqlV1alpha1Statement, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStatement", arg0, arg1)
	ret0, _ := ret[0].(v1alpha1.SqlV1alpha1Statement)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetStatement indicates an expected call of GetStatement.
func (mr *MockGatewayClientInterfaceMockRecorder) GetStatement(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStatement", reflect.TypeOf((*MockGatewayClientInterface)(nil).GetStatement), arg0, arg1)
}

// GetStatementResults mocks base method.
func (m *MockGatewayClientInterface) GetStatementResults(arg0 context.Context, arg1, arg2 string) (v1alpha1.SqlV1alpha1StatementResult, *http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStatementResults", arg0, arg1, arg2)
	ret0, _ := ret[0].(v1alpha1.SqlV1alpha1StatementResult)
	ret1, _ := ret[1].(*http.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetStatementResults indicates an expected call of GetStatementResults.
func (mr *MockGatewayClientInterfaceMockRecorder) GetStatementResults(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStatementResults", reflect.TypeOf((*MockGatewayClientInterface)(nil).GetStatementResults), arg0, arg1, arg2)
}
