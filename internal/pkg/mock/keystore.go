// Code generated by mocker. DO NOT EDIT.
// github.com/travisjeffery/mocker
// Source: keystore.go

package mock

import (
	sync "sync"

	github_com_confluentinc_ccloudapis_auth_v1 "github.com/confluentinc/ccloudapis/auth/v1"
)

// KeyStore is a mock of KeyStore interface
type KeyStore struct {
	lockHasAPIKey sync.Mutex
	HasAPIKeyFunc func(key, clusterID, environment string) (bool, error)

	lockStoreAPIKey sync.Mutex
	StoreAPIKeyFunc func(clusterID, environment string, key *github_com_confluentinc_ccloudapis_auth_v1.ApiKey) error

	calls struct {
		HasAPIKey []struct {
			Key         string
			ClusterID   string
			Environment string
		}
		StoreAPIKey []struct {
			ClusterID   string
			Environment string
			Key         *github_com_confluentinc_ccloudapis_auth_v1.ApiKey
		}
	}
}

// HasAPIKey mocks base method by wrapping the associated func.
func (m *KeyStore) HasAPIKey(key, clusterID, environment string) (bool, error) {
	m.lockHasAPIKey.Lock()
	defer m.lockHasAPIKey.Unlock()

	if m.HasAPIKeyFunc == nil {
		panic("mocker: KeyStore.HasAPIKeyFunc is nil but KeyStore.HasAPIKey was called.")
	}

	call := struct {
		Key         string
		ClusterID   string
		Environment string
	}{
		Key:         key,
		ClusterID:   clusterID,
		Environment: environment,
	}

	m.calls.HasAPIKey = append(m.calls.HasAPIKey, call)

	return m.HasAPIKeyFunc(key, clusterID, environment)
}

// HasAPIKeyCalled returns true if HasAPIKey was called at least once.
func (m *KeyStore) HasAPIKeyCalled() bool {
	m.lockHasAPIKey.Lock()
	defer m.lockHasAPIKey.Unlock()

	return len(m.calls.HasAPIKey) > 0
}

// HasAPIKeyCalls returns the calls made to HasAPIKey.
func (m *KeyStore) HasAPIKeyCalls() []struct {
	Key         string
	ClusterID   string
	Environment string
} {
	m.lockHasAPIKey.Lock()
	defer m.lockHasAPIKey.Unlock()

	return m.calls.HasAPIKey
}

// StoreAPIKey mocks base method by wrapping the associated func.
func (m *KeyStore) StoreAPIKey(clusterID, environment string, key *github_com_confluentinc_ccloudapis_auth_v1.ApiKey) error {
	m.lockStoreAPIKey.Lock()
	defer m.lockStoreAPIKey.Unlock()

	if m.StoreAPIKeyFunc == nil {
		panic("mocker: KeyStore.StoreAPIKeyFunc is nil but KeyStore.StoreAPIKey was called.")
	}

	call := struct {
		ClusterID   string
		Environment string
		Key         *github_com_confluentinc_ccloudapis_auth_v1.ApiKey
	}{
		ClusterID:   clusterID,
		Environment: environment,
		Key:         key,
	}

	m.calls.StoreAPIKey = append(m.calls.StoreAPIKey, call)

	return m.StoreAPIKeyFunc(clusterID, environment, key)
}

// StoreAPIKeyCalled returns true if StoreAPIKey was called at least once.
func (m *KeyStore) StoreAPIKeyCalled() bool {
	m.lockStoreAPIKey.Lock()
	defer m.lockStoreAPIKey.Unlock()

	return len(m.calls.StoreAPIKey) > 0
}

// StoreAPIKeyCalls returns the calls made to StoreAPIKey.
func (m *KeyStore) StoreAPIKeyCalls() []struct {
	ClusterID   string
	Environment string
	Key         *github_com_confluentinc_ccloudapis_auth_v1.ApiKey
} {
	m.lockStoreAPIKey.Lock()
	defer m.lockStoreAPIKey.Unlock()

	return m.calls.StoreAPIKey
}

// Reset resets the calls made to the mocked methods.
func (m *KeyStore) Reset() {
	m.lockHasAPIKey.Lock()
	m.calls.HasAPIKey = nil
	m.lockHasAPIKey.Unlock()
	m.lockStoreAPIKey.Lock()
	m.calls.StoreAPIKey = nil
	m.lockStoreAPIKey.Unlock()
}
