// Code generated by mocker. DO NOT EDIT.
// github.com/travisjeffery/mocker
// Source: launch_darkly.go

package mock

import (
	sync "sync"

	github_com_confluentinc_cli_internal_pkg_cmd "github.com/confluentinc/cli/internal/pkg/cmd"
)

// LaunchDarklyManager is a mock of LaunchDarklyManager interface
type LaunchDarklyManager struct {
	lockBoolVariation sync.Mutex
	BoolVariationFunc func(key string, ctx *github_com_confluentinc_cli_internal_pkg_cmd.DynamicContext, defaultVal bool) bool

	lockStringVariation sync.Mutex
	StringVariationFunc func(key string, ctx *github_com_confluentinc_cli_internal_pkg_cmd.DynamicContext, defaultVal string) string

	lockIntVariation sync.Mutex
	IntVariationFunc func(key string, ctx *github_com_confluentinc_cli_internal_pkg_cmd.DynamicContext, defaultVal int) int

	lockJsonVariation sync.Mutex
	JsonVariationFunc func(key string, ctx *github_com_confluentinc_cli_internal_pkg_cmd.DynamicContext, defaultVal interface{}) interface{}

	calls struct {
		BoolVariation []struct {
			Key        string
			Ctx        *github_com_confluentinc_cli_internal_pkg_cmd.DynamicContext
			DefaultVal bool
		}
		StringVariation []struct {
			Key        string
			Ctx        *github_com_confluentinc_cli_internal_pkg_cmd.DynamicContext
			DefaultVal string
		}
		IntVariation []struct {
			Key        string
			Ctx        *github_com_confluentinc_cli_internal_pkg_cmd.DynamicContext
			DefaultVal int
		}
		JsonVariation []struct {
			Key        string
			Ctx        *github_com_confluentinc_cli_internal_pkg_cmd.DynamicContext
			DefaultVal interface{}
		}
	}
}

// BoolVariation mocks base method by wrapping the associated func.
func (m *LaunchDarklyManager) BoolVariation(key string, ctx *github_com_confluentinc_cli_internal_pkg_cmd.DynamicContext, defaultVal bool) bool {
	m.lockBoolVariation.Lock()
	defer m.lockBoolVariation.Unlock()

	if m.BoolVariationFunc == nil {
		panic("mocker: LaunchDarklyManager.BoolVariationFunc is nil but LaunchDarklyManager.BoolVariation was called.")
	}

	call := struct {
		Key        string
		Ctx        *github_com_confluentinc_cli_internal_pkg_cmd.DynamicContext
		DefaultVal bool
	}{
		Key:        key,
		Ctx:        ctx,
		DefaultVal: defaultVal,
	}

	m.calls.BoolVariation = append(m.calls.BoolVariation, call)

	return m.BoolVariationFunc(key, ctx, defaultVal)
}

// BoolVariationCalled returns true if BoolVariation was called at least once.
func (m *LaunchDarklyManager) BoolVariationCalled() bool {
	m.lockBoolVariation.Lock()
	defer m.lockBoolVariation.Unlock()

	return len(m.calls.BoolVariation) > 0
}

// BoolVariationCalls returns the calls made to BoolVariation.
func (m *LaunchDarklyManager) BoolVariationCalls() []struct {
	Key        string
	Ctx        *github_com_confluentinc_cli_internal_pkg_cmd.DynamicContext
	DefaultVal bool
} {
	m.lockBoolVariation.Lock()
	defer m.lockBoolVariation.Unlock()

	return m.calls.BoolVariation
}

// StringVariation mocks base method by wrapping the associated func.
func (m *LaunchDarklyManager) StringVariation(key string, ctx *github_com_confluentinc_cli_internal_pkg_cmd.DynamicContext, defaultVal string) string {
	m.lockStringVariation.Lock()
	defer m.lockStringVariation.Unlock()

	if m.StringVariationFunc == nil {
		panic("mocker: LaunchDarklyManager.StringVariationFunc is nil but LaunchDarklyManager.StringVariation was called.")
	}

	call := struct {
		Key        string
		Ctx        *github_com_confluentinc_cli_internal_pkg_cmd.DynamicContext
		DefaultVal string
	}{
		Key:        key,
		Ctx:        ctx,
		DefaultVal: defaultVal,
	}

	m.calls.StringVariation = append(m.calls.StringVariation, call)

	return m.StringVariationFunc(key, ctx, defaultVal)
}

// StringVariationCalled returns true if StringVariation was called at least once.
func (m *LaunchDarklyManager) StringVariationCalled() bool {
	m.lockStringVariation.Lock()
	defer m.lockStringVariation.Unlock()

	return len(m.calls.StringVariation) > 0
}

// StringVariationCalls returns the calls made to StringVariation.
func (m *LaunchDarklyManager) StringVariationCalls() []struct {
	Key        string
	Ctx        *github_com_confluentinc_cli_internal_pkg_cmd.DynamicContext
	DefaultVal string
} {
	m.lockStringVariation.Lock()
	defer m.lockStringVariation.Unlock()

	return m.calls.StringVariation
}

// IntVariation mocks base method by wrapping the associated func.
func (m *LaunchDarklyManager) IntVariation(key string, ctx *github_com_confluentinc_cli_internal_pkg_cmd.DynamicContext, defaultVal int) int {
	m.lockIntVariation.Lock()
	defer m.lockIntVariation.Unlock()

	if m.IntVariationFunc == nil {
		panic("mocker: LaunchDarklyManager.IntVariationFunc is nil but LaunchDarklyManager.IntVariation was called.")
	}

	call := struct {
		Key        string
		Ctx        *github_com_confluentinc_cli_internal_pkg_cmd.DynamicContext
		DefaultVal int
	}{
		Key:        key,
		Ctx:        ctx,
		DefaultVal: defaultVal,
	}

	m.calls.IntVariation = append(m.calls.IntVariation, call)

	return m.IntVariationFunc(key, ctx, defaultVal)
}

// IntVariationCalled returns true if IntVariation was called at least once.
func (m *LaunchDarklyManager) IntVariationCalled() bool {
	m.lockIntVariation.Lock()
	defer m.lockIntVariation.Unlock()

	return len(m.calls.IntVariation) > 0
}

// IntVariationCalls returns the calls made to IntVariation.
func (m *LaunchDarklyManager) IntVariationCalls() []struct {
	Key        string
	Ctx        *github_com_confluentinc_cli_internal_pkg_cmd.DynamicContext
	DefaultVal int
} {
	m.lockIntVariation.Lock()
	defer m.lockIntVariation.Unlock()

	return m.calls.IntVariation
}

// JsonVariation mocks base method by wrapping the associated func.
func (m *LaunchDarklyManager) JsonVariation(key string, ctx *github_com_confluentinc_cli_internal_pkg_cmd.DynamicContext, defaultVal interface{}) interface{} {
	m.lockJsonVariation.Lock()
	defer m.lockJsonVariation.Unlock()

	if m.JsonVariationFunc == nil {
		panic("mocker: LaunchDarklyManager.JsonVariationFunc is nil but LaunchDarklyManager.JsonVariation was called.")
	}

	call := struct {
		Key        string
		Ctx        *github_com_confluentinc_cli_internal_pkg_cmd.DynamicContext
		DefaultVal interface{}
	}{
		Key:        key,
		Ctx:        ctx,
		DefaultVal: defaultVal,
	}

	m.calls.JsonVariation = append(m.calls.JsonVariation, call)

	return m.JsonVariationFunc(key, ctx, defaultVal)
}

// JsonVariationCalled returns true if JsonVariation was called at least once.
func (m *LaunchDarklyManager) JsonVariationCalled() bool {
	m.lockJsonVariation.Lock()
	defer m.lockJsonVariation.Unlock()

	return len(m.calls.JsonVariation) > 0
}

// JsonVariationCalls returns the calls made to JsonVariation.
func (m *LaunchDarklyManager) JsonVariationCalls() []struct {
	Key        string
	Ctx        *github_com_confluentinc_cli_internal_pkg_cmd.DynamicContext
	DefaultVal interface{}
} {
	m.lockJsonVariation.Lock()
	defer m.lockJsonVariation.Unlock()

	return m.calls.JsonVariation
}

// Reset resets the calls made to the mocked methods.
func (m *LaunchDarklyManager) Reset() {
	m.lockBoolVariation.Lock()
	m.calls.BoolVariation = nil
	m.lockBoolVariation.Unlock()
	m.lockStringVariation.Lock()
	m.calls.StringVariation = nil
	m.lockStringVariation.Unlock()
	m.lockIntVariation.Lock()
	m.calls.IntVariation = nil
	m.lockIntVariation.Unlock()
	m.lockJsonVariation.Lock()
	m.calls.JsonVariation = nil
	m.lockJsonVariation.Unlock()
}
