// Code generated by mocker. DO NOT EDIT.
// github.com/travisjeffery/mocker
// Source: auth_token_handler.go

package mock

import (
	sync "sync"

	github_com_confluentinc_cc_structs_kafka_org_v1 "github.com/confluentinc/cc-structs/kafka/org/v1"
	github_com_confluentinc_ccloud_sdk_go "github.com/confluentinc/ccloud-sdk-go"
	github_com_confluentinc_mds_sdk_go_mdsv1 "github.com/confluentinc/mds-sdk-go/mdsv1"

	github_com_confluentinc_cli_internal_pkg_log "github.com/confluentinc/cli/internal/pkg/log"
)

// MockAuthTokenHandler is a mock of AuthTokenHandler interface
type MockAuthTokenHandler struct {
	lockGetCCloudUserSSO sync.Mutex
	GetCCloudUserSSOFunc func(client *github_com_confluentinc_ccloud_sdk_go.Client, email string) (*github_com_confluentinc_cc_structs_kafka_org_v1.User, error)

	lockGetCCloudCredentialsToken sync.Mutex
	GetCCloudCredentialsTokenFunc func(client *github_com_confluentinc_ccloud_sdk_go.Client, email, password string) (string, error)

	lockGetCCloudSSOToken sync.Mutex
	GetCCloudSSOTokenFunc func(client *github_com_confluentinc_ccloud_sdk_go.Client, url string, noBrowser bool, email string, logger *github_com_confluentinc_cli_internal_pkg_log.Logger) (string, string, error)

	lockRefreshCCloudSSOToken sync.Mutex
	RefreshCCloudSSOTokenFunc func(client *github_com_confluentinc_ccloud_sdk_go.Client, refreshToken, url string, logger *github_com_confluentinc_cli_internal_pkg_log.Logger) (string, error)

	lockGetConfluentAuthToken sync.Mutex
	GetConfluentAuthTokenFunc func(mdsClient *github_com_confluentinc_mds_sdk_go_mdsv1.APIClient, username, password string, logger *github_com_confluentinc_cli_internal_pkg_log.Logger) (string, error)

	calls struct {
		GetCCloudUserSSO []struct {
			Client *github_com_confluentinc_ccloud_sdk_go.Client
			Email  string
		}
		GetCCloudCredentialsToken []struct {
			Client   *github_com_confluentinc_ccloud_sdk_go.Client
			Email    string
			Password string
		}
		GetCCloudSSOToken []struct {
			Client    *github_com_confluentinc_ccloud_sdk_go.Client
			Url       string
			NoBrowser bool
			Email     string
			Logger    *github_com_confluentinc_cli_internal_pkg_log.Logger
		}
		RefreshCCloudSSOToken []struct {
			Client       *github_com_confluentinc_ccloud_sdk_go.Client
			RefreshToken string
			Url          string
			Logger       *github_com_confluentinc_cli_internal_pkg_log.Logger
		}
		GetConfluentAuthToken []struct {
			MdsClient *github_com_confluentinc_mds_sdk_go_mdsv1.APIClient
			Username  string
			Password  string
			Logger    *github_com_confluentinc_cli_internal_pkg_log.Logger
		}
	}
}

// GetCCloudUserSSO mocks base method by wrapping the associated func.
func (m *MockAuthTokenHandler) GetCCloudUserSSO(client *github_com_confluentinc_ccloud_sdk_go.Client, email string) (*github_com_confluentinc_cc_structs_kafka_org_v1.User, error) {
	m.lockGetCCloudUserSSO.Lock()
	defer m.lockGetCCloudUserSSO.Unlock()

	if m.GetCCloudUserSSOFunc == nil {
		panic("mocker: MockAuthTokenHandler.GetCCloudUserSSOFunc is nil but MockAuthTokenHandler.GetCCloudUserSSO was called.")
	}

	call := struct {
		Client *github_com_confluentinc_ccloud_sdk_go.Client
		Email  string
	}{
		Client: client,
		Email:  email,
	}

	m.calls.GetCCloudUserSSO = append(m.calls.GetCCloudUserSSO, call)

	return m.GetCCloudUserSSOFunc(client, email)
}

// GetCCloudUserSSOCalled returns true if GetCCloudUserSSO was called at least once.
func (m *MockAuthTokenHandler) GetCCloudUserSSOCalled() bool {
	m.lockGetCCloudUserSSO.Lock()
	defer m.lockGetCCloudUserSSO.Unlock()

	return len(m.calls.GetCCloudUserSSO) > 0
}

// GetCCloudUserSSOCalls returns the calls made to GetCCloudUserSSO.
func (m *MockAuthTokenHandler) GetCCloudUserSSOCalls() []struct {
	Client *github_com_confluentinc_ccloud_sdk_go.Client
	Email  string
} {
	m.lockGetCCloudUserSSO.Lock()
	defer m.lockGetCCloudUserSSO.Unlock()

	return m.calls.GetCCloudUserSSO
}

// GetCCloudCredentialsToken mocks base method by wrapping the associated func.
func (m *MockAuthTokenHandler) GetCCloudCredentialsToken(client *github_com_confluentinc_ccloud_sdk_go.Client, email, password string) (string, error) {
	m.lockGetCCloudCredentialsToken.Lock()
	defer m.lockGetCCloudCredentialsToken.Unlock()

	if m.GetCCloudCredentialsTokenFunc == nil {
		panic("mocker: MockAuthTokenHandler.GetCCloudCredentialsTokenFunc is nil but MockAuthTokenHandler.GetCCloudCredentialsToken was called.")
	}

	call := struct {
		Client   *github_com_confluentinc_ccloud_sdk_go.Client
		Email    string
		Password string
	}{
		Client:   client,
		Email:    email,
		Password: password,
	}

	m.calls.GetCCloudCredentialsToken = append(m.calls.GetCCloudCredentialsToken, call)

	return m.GetCCloudCredentialsTokenFunc(client, email, password)
}

// GetCCloudCredentialsTokenCalled returns true if GetCCloudCredentialsToken was called at least once.
func (m *MockAuthTokenHandler) GetCCloudCredentialsTokenCalled() bool {
	m.lockGetCCloudCredentialsToken.Lock()
	defer m.lockGetCCloudCredentialsToken.Unlock()

	return len(m.calls.GetCCloudCredentialsToken) > 0
}

// GetCCloudCredentialsTokenCalls returns the calls made to GetCCloudCredentialsToken.
func (m *MockAuthTokenHandler) GetCCloudCredentialsTokenCalls() []struct {
	Client   *github_com_confluentinc_ccloud_sdk_go.Client
	Email    string
	Password string
} {
	m.lockGetCCloudCredentialsToken.Lock()
	defer m.lockGetCCloudCredentialsToken.Unlock()

	return m.calls.GetCCloudCredentialsToken
}

// GetCCloudSSOToken mocks base method by wrapping the associated func.
func (m *MockAuthTokenHandler) GetCCloudSSOToken(client *github_com_confluentinc_ccloud_sdk_go.Client, url string, noBrowser bool, email string, logger *github_com_confluentinc_cli_internal_pkg_log.Logger) (string, string, error) {
	m.lockGetCCloudSSOToken.Lock()
	defer m.lockGetCCloudSSOToken.Unlock()

	if m.GetCCloudSSOTokenFunc == nil {
		panic("mocker: MockAuthTokenHandler.GetCCloudSSOTokenFunc is nil but MockAuthTokenHandler.GetCCloudSSOToken was called.")
	}

	call := struct {
		Client    *github_com_confluentinc_ccloud_sdk_go.Client
		Url       string
		NoBrowser bool
		Email     string
		Logger    *github_com_confluentinc_cli_internal_pkg_log.Logger
	}{
		Client:    client,
		Url:       url,
		NoBrowser: noBrowser,
		Email:     email,
		Logger:    logger,
	}

	m.calls.GetCCloudSSOToken = append(m.calls.GetCCloudSSOToken, call)

	return m.GetCCloudSSOTokenFunc(client, url, noBrowser, email, logger)
}

// GetCCloudSSOTokenCalled returns true if GetCCloudSSOToken was called at least once.
func (m *MockAuthTokenHandler) GetCCloudSSOTokenCalled() bool {
	m.lockGetCCloudSSOToken.Lock()
	defer m.lockGetCCloudSSOToken.Unlock()

	return len(m.calls.GetCCloudSSOToken) > 0
}

// GetCCloudSSOTokenCalls returns the calls made to GetCCloudSSOToken.
func (m *MockAuthTokenHandler) GetCCloudSSOTokenCalls() []struct {
	Client    *github_com_confluentinc_ccloud_sdk_go.Client
	Url       string
	NoBrowser bool
	Email     string
	Logger    *github_com_confluentinc_cli_internal_pkg_log.Logger
} {
	m.lockGetCCloudSSOToken.Lock()
	defer m.lockGetCCloudSSOToken.Unlock()

	return m.calls.GetCCloudSSOToken
}

// RefreshCCloudSSOToken mocks base method by wrapping the associated func.
func (m *MockAuthTokenHandler) RefreshCCloudSSOToken(client *github_com_confluentinc_ccloud_sdk_go.Client, refreshToken, url string, logger *github_com_confluentinc_cli_internal_pkg_log.Logger) (string, error) {
	m.lockRefreshCCloudSSOToken.Lock()
	defer m.lockRefreshCCloudSSOToken.Unlock()

	if m.RefreshCCloudSSOTokenFunc == nil {
		panic("mocker: MockAuthTokenHandler.RefreshCCloudSSOTokenFunc is nil but MockAuthTokenHandler.RefreshCCloudSSOToken was called.")
	}

	call := struct {
		Client       *github_com_confluentinc_ccloud_sdk_go.Client
		RefreshToken string
		Url          string
		Logger       *github_com_confluentinc_cli_internal_pkg_log.Logger
	}{
		Client:       client,
		RefreshToken: refreshToken,
		Url:          url,
		Logger:       logger,
	}

	m.calls.RefreshCCloudSSOToken = append(m.calls.RefreshCCloudSSOToken, call)

	return m.RefreshCCloudSSOTokenFunc(client, refreshToken, url, logger)
}

// RefreshCCloudSSOTokenCalled returns true if RefreshCCloudSSOToken was called at least once.
func (m *MockAuthTokenHandler) RefreshCCloudSSOTokenCalled() bool {
	m.lockRefreshCCloudSSOToken.Lock()
	defer m.lockRefreshCCloudSSOToken.Unlock()

	return len(m.calls.RefreshCCloudSSOToken) > 0
}

// RefreshCCloudSSOTokenCalls returns the calls made to RefreshCCloudSSOToken.
func (m *MockAuthTokenHandler) RefreshCCloudSSOTokenCalls() []struct {
	Client       *github_com_confluentinc_ccloud_sdk_go.Client
	RefreshToken string
	Url          string
	Logger       *github_com_confluentinc_cli_internal_pkg_log.Logger
} {
	m.lockRefreshCCloudSSOToken.Lock()
	defer m.lockRefreshCCloudSSOToken.Unlock()

	return m.calls.RefreshCCloudSSOToken
}

// GetConfluentAuthToken mocks base method by wrapping the associated func.
func (m *MockAuthTokenHandler) GetConfluentAuthToken(mdsClient *github_com_confluentinc_mds_sdk_go_mdsv1.APIClient, username, password string, logger *github_com_confluentinc_cli_internal_pkg_log.Logger) (string, error) {
	m.lockGetConfluentAuthToken.Lock()
	defer m.lockGetConfluentAuthToken.Unlock()

	if m.GetConfluentAuthTokenFunc == nil {
		panic("mocker: MockAuthTokenHandler.GetConfluentAuthTokenFunc is nil but MockAuthTokenHandler.GetConfluentAuthToken was called.")
	}

	call := struct {
		MdsClient *github_com_confluentinc_mds_sdk_go_mdsv1.APIClient
		Username  string
		Password  string
		Logger    *github_com_confluentinc_cli_internal_pkg_log.Logger
	}{
		MdsClient: mdsClient,
		Username:  username,
		Password:  password,
		Logger:    logger,
	}

	m.calls.GetConfluentAuthToken = append(m.calls.GetConfluentAuthToken, call)

	return m.GetConfluentAuthTokenFunc(mdsClient, username, password, logger)
}

// GetConfluentAuthTokenCalled returns true if GetConfluentAuthToken was called at least once.
func (m *MockAuthTokenHandler) GetConfluentAuthTokenCalled() bool {
	m.lockGetConfluentAuthToken.Lock()
	defer m.lockGetConfluentAuthToken.Unlock()

	return len(m.calls.GetConfluentAuthToken) > 0
}

// GetConfluentAuthTokenCalls returns the calls made to GetConfluentAuthToken.
func (m *MockAuthTokenHandler) GetConfluentAuthTokenCalls() []struct {
	MdsClient *github_com_confluentinc_mds_sdk_go_mdsv1.APIClient
	Username  string
	Password  string
	Logger    *github_com_confluentinc_cli_internal_pkg_log.Logger
} {
	m.lockGetConfluentAuthToken.Lock()
	defer m.lockGetConfluentAuthToken.Unlock()

	return m.calls.GetConfluentAuthToken
}

// Reset resets the calls made to the mocked methods.
func (m *MockAuthTokenHandler) Reset() {
	m.lockGetCCloudUserSSO.Lock()
	m.calls.GetCCloudUserSSO = nil
	m.lockGetCCloudUserSSO.Unlock()
	m.lockGetCCloudCredentialsToken.Lock()
	m.calls.GetCCloudCredentialsToken = nil
	m.lockGetCCloudCredentialsToken.Unlock()
	m.lockGetCCloudSSOToken.Lock()
	m.calls.GetCCloudSSOToken = nil
	m.lockGetCCloudSSOToken.Unlock()
	m.lockRefreshCCloudSSOToken.Lock()
	m.calls.RefreshCCloudSSOToken = nil
	m.lockRefreshCCloudSSOToken.Unlock()
	m.lockGetConfluentAuthToken.Lock()
	m.calls.GetConfluentAuthToken = nil
	m.lockGetConfluentAuthToken.Unlock()
}
