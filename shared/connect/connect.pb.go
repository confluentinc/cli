// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: connect.proto

/*
Package connect is a generated protocol buffer package.

It is generated from these files:
	connect.proto

It has these top-level messages:
*/
package connect

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import kafka_scheduler_v1 "github.com/confluentinc/cc-structs/kafka/scheduler/v1"

import context "golang.org/x/net/context"
import grpc "google.golang.org/grpc"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Connect service

type ConnectClient interface {
	List(ctx context.Context, in *kafka_scheduler_v1.GetConnectClustersRequest, opts ...grpc.CallOption) (*kafka_scheduler_v1.GetConnectClustersReply, error)
	Describe(ctx context.Context, in *kafka_scheduler_v1.GetConnectClusterRequest, opts ...grpc.CallOption) (*kafka_scheduler_v1.GetConnectClusterReply, error)
}

type connectClient struct {
	cc *grpc.ClientConn
}

func NewConnectClient(cc *grpc.ClientConn) ConnectClient {
	return &connectClient{cc}
}

func (c *connectClient) List(ctx context.Context, in *kafka_scheduler_v1.GetConnectClustersRequest, opts ...grpc.CallOption) (*kafka_scheduler_v1.GetConnectClustersReply, error) {
	out := new(kafka_scheduler_v1.GetConnectClustersReply)
	err := grpc.Invoke(ctx, "/connect.Connect/List", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *connectClient) Describe(ctx context.Context, in *kafka_scheduler_v1.GetConnectClusterRequest, opts ...grpc.CallOption) (*kafka_scheduler_v1.GetConnectClusterReply, error) {
	out := new(kafka_scheduler_v1.GetConnectClusterReply)
	err := grpc.Invoke(ctx, "/connect.Connect/Describe", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Connect service

type ConnectServer interface {
	List(context.Context, *kafka_scheduler_v1.GetConnectClustersRequest) (*kafka_scheduler_v1.GetConnectClustersReply, error)
	Describe(context.Context, *kafka_scheduler_v1.GetConnectClusterRequest) (*kafka_scheduler_v1.GetConnectClusterReply, error)
}

func RegisterConnectServer(s *grpc.Server, srv ConnectServer) {
	s.RegisterService(&_Connect_serviceDesc, srv)
}

func _Connect_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(kafka_scheduler_v1.GetConnectClustersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConnectServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/connect.Connect/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConnectServer).List(ctx, req.(*kafka_scheduler_v1.GetConnectClustersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Connect_Describe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(kafka_scheduler_v1.GetConnectClusterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConnectServer).Describe(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/connect.Connect/Describe",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConnectServer).Describe(ctx, req.(*kafka_scheduler_v1.GetConnectClusterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Connect_serviceDesc = grpc.ServiceDesc{
	ServiceName: "connect.Connect",
	HandlerType: (*ConnectServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "List",
			Handler:    _Connect_List_Handler,
		},
		{
			MethodName: "Describe",
			Handler:    _Connect_Describe_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "connect.proto",
}

func init() { proto.RegisterFile("connect.proto", fileDescriptorConnect) }

var fileDescriptorConnect = []byte{
	// 152 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x4d, 0xce, 0xcf, 0xcb,
	0x4b, 0x4d, 0x2e, 0xd1, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x87, 0x72, 0xa5, 0x94, 0xb2,
	0x13, 0xd3, 0xb2, 0x13, 0xf5, 0x8b, 0x93, 0x33, 0x52, 0x53, 0x4a, 0x73, 0x52, 0x8b, 0xf4, 0xcb,
	0x0c, 0x11, 0x1c, 0x88, 0x62, 0xa3, 0xeb, 0x8c, 0x5c, 0xec, 0xce, 0x10, 0xf5, 0x42, 0x29, 0x5c,
	0x2c, 0x3e, 0x99, 0xc5, 0x25, 0x42, 0xba, 0x7a, 0x60, 0x8d, 0x7a, 0x08, 0xb5, 0x65, 0x86, 0x7a,
	0xee, 0xa9, 0x25, 0x50, 0x75, 0xce, 0x39, 0xa5, 0xc5, 0x25, 0xa9, 0x45, 0xc5, 0x41, 0xa9, 0x85,
	0xa5, 0xa9, 0xc5, 0x25, 0x52, 0xda, 0xc4, 0x2a, 0x2f, 0xc8, 0xa9, 0x54, 0x62, 0x10, 0x4a, 0xe3,
	0xe2, 0x70, 0x49, 0x2d, 0x4e, 0x2e, 0xca, 0x4c, 0x4a, 0x15, 0xd2, 0x21, 0x4a, 0x2b, 0xcc, 0x22,
	0x2d, 0x22, 0x55, 0x83, 0xed, 0x49, 0x62, 0x03, 0x7b, 0xd0, 0x18, 0x10, 0x00, 0x00, 0xff, 0xff,
	0xa7, 0xc6, 0x0c, 0xb9, 0x1e, 0x01, 0x00, 0x00,
}
