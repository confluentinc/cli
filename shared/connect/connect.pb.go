// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: connect.proto

package connect

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import v1 "github.com/confluentinc/ccloudapis/connect/v1"
import v11 "github.com/confluentinc/ccloudapis/core/v1"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type S3SinkClusterConfig struct {
	Name                 string            `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	AccountId            string            `protobuf:"bytes,2,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	KafkaClusterId       string            `protobuf:"bytes,3,opt,name=kafka_cluster_id,json=kafkaClusterId,proto3" json:"kafka_cluster_id,omitempty"`
	KafkaUserEmail       string            `protobuf:"bytes,4,opt,name=kafka_user_email,json=kafkaUserEmail,proto3" json:"kafka_user_email,omitempty"`
	Servers              int32             `protobuf:"varint,5,opt,name=servers,proto3" json:"servers,omitempty"`
	Options              *v1.S3SinkOptions `protobuf:"bytes,6,opt,name=options,proto3" json:"options,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *S3SinkClusterConfig) Reset()         { *m = S3SinkClusterConfig{} }
func (m *S3SinkClusterConfig) String() string { return proto.CompactTextString(m) }
func (*S3SinkClusterConfig) ProtoMessage()    {}
func (*S3SinkClusterConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_connect_b967e3e75e049bbe, []int{0}
}
func (m *S3SinkClusterConfig) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_S3SinkClusterConfig.Unmarshal(m, b)
}
func (m *S3SinkClusterConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_S3SinkClusterConfig.Marshal(b, m, deterministic)
}
func (dst *S3SinkClusterConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_S3SinkClusterConfig.Merge(dst, src)
}
func (m *S3SinkClusterConfig) XXX_Size() int {
	return xxx_messageInfo_S3SinkClusterConfig.Size(m)
}
func (m *S3SinkClusterConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_S3SinkClusterConfig.DiscardUnknown(m)
}

var xxx_messageInfo_S3SinkClusterConfig proto.InternalMessageInfo

func (m *S3SinkClusterConfig) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *S3SinkClusterConfig) GetAccountId() string {
	if m != nil {
		return m.AccountId
	}
	return ""
}

func (m *S3SinkClusterConfig) GetKafkaClusterId() string {
	if m != nil {
		return m.KafkaClusterId
	}
	return ""
}

func (m *S3SinkClusterConfig) GetKafkaUserEmail() string {
	if m != nil {
		return m.KafkaUserEmail
	}
	return ""
}

func (m *S3SinkClusterConfig) GetServers() int32 {
	if m != nil {
		return m.Servers
	}
	return 0
}

func (m *S3SinkClusterConfig) GetOptions() *v1.S3SinkOptions {
	if m != nil {
		return m.Options
	}
	return nil
}

type CreateS3SinkClusterRequest struct {
	Config               *S3SinkClusterConfig `protobuf:"bytes,1,opt,name=config,proto3" json:"config,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *CreateS3SinkClusterRequest) Reset()         { *m = CreateS3SinkClusterRequest{} }
func (m *CreateS3SinkClusterRequest) String() string { return proto.CompactTextString(m) }
func (*CreateS3SinkClusterRequest) ProtoMessage()    {}
func (*CreateS3SinkClusterRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_connect_b967e3e75e049bbe, []int{1}
}
func (m *CreateS3SinkClusterRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CreateS3SinkClusterRequest.Unmarshal(m, b)
}
func (m *CreateS3SinkClusterRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CreateS3SinkClusterRequest.Marshal(b, m, deterministic)
}
func (dst *CreateS3SinkClusterRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateS3SinkClusterRequest.Merge(dst, src)
}
func (m *CreateS3SinkClusterRequest) XXX_Size() int {
	return xxx_messageInfo_CreateS3SinkClusterRequest.Size(m)
}
func (m *CreateS3SinkClusterRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateS3SinkClusterRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CreateS3SinkClusterRequest proto.InternalMessageInfo

func (m *CreateS3SinkClusterRequest) GetConfig() *S3SinkClusterConfig {
	if m != nil {
		return m.Config
	}
	return nil
}

type CreateS3SinkClusterReply struct {
	Error                *v11.Error        `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
	Cluster              *v1.S3SinkCluster `protobuf:"bytes,2,opt,name=cluster,proto3" json:"cluster,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *CreateS3SinkClusterReply) Reset()         { *m = CreateS3SinkClusterReply{} }
func (m *CreateS3SinkClusterReply) String() string { return proto.CompactTextString(m) }
func (*CreateS3SinkClusterReply) ProtoMessage()    {}
func (*CreateS3SinkClusterReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_connect_b967e3e75e049bbe, []int{2}
}
func (m *CreateS3SinkClusterReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CreateS3SinkClusterReply.Unmarshal(m, b)
}
func (m *CreateS3SinkClusterReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CreateS3SinkClusterReply.Marshal(b, m, deterministic)
}
func (dst *CreateS3SinkClusterReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateS3SinkClusterReply.Merge(dst, src)
}
func (m *CreateS3SinkClusterReply) XXX_Size() int {
	return xxx_messageInfo_CreateS3SinkClusterReply.Size(m)
}
func (m *CreateS3SinkClusterReply) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateS3SinkClusterReply.DiscardUnknown(m)
}

var xxx_messageInfo_CreateS3SinkClusterReply proto.InternalMessageInfo

func (m *CreateS3SinkClusterReply) GetError() *v11.Error {
	if m != nil {
		return m.Error
	}
	return nil
}

func (m *CreateS3SinkClusterReply) GetCluster() *v1.S3SinkCluster {
	if m != nil {
		return m.Cluster
	}
	return nil
}

func init() {
	proto.RegisterType((*S3SinkClusterConfig)(nil), "connect.S3SinkClusterConfig")
	proto.RegisterType((*CreateS3SinkClusterRequest)(nil), "connect.CreateS3SinkClusterRequest")
	proto.RegisterType((*CreateS3SinkClusterReply)(nil), "connect.CreateS3SinkClusterReply")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ConnectClient is the client API for Connect service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ConnectClient interface {
	List(ctx context.Context, in *v1.GetClustersRequest, opts ...grpc.CallOption) (*v1.GetClustersReply, error)
	Describe(ctx context.Context, in *v1.GetClusterRequest, opts ...grpc.CallOption) (*v1.GetClusterReply, error)
	DescribeS3Sink(ctx context.Context, in *v1.GetS3SinkClusterRequest, opts ...grpc.CallOption) (*v1.GetS3SinkClusterReply, error)
	CreateS3Sink(ctx context.Context, in *v1.CreateS3SinkClusterRequest, opts ...grpc.CallOption) (*v1.CreateS3SinkClusterReply, error)
	UpdateS3Sink(ctx context.Context, in *v1.UpdateS3SinkClusterRequest, opts ...grpc.CallOption) (*v1.UpdateS3SinkClusterReply, error)
	Delete(ctx context.Context, in *v1.DeleteClusterRequest, opts ...grpc.CallOption) (*v1.DeleteClusterReply, error)
}

type connectClient struct {
	cc *grpc.ClientConn
}

func NewConnectClient(cc *grpc.ClientConn) ConnectClient {
	return &connectClient{cc}
}

func (c *connectClient) List(ctx context.Context, in *v1.GetClustersRequest, opts ...grpc.CallOption) (*v1.GetClustersReply, error) {
	out := new(v1.GetClustersReply)
	err := c.cc.Invoke(ctx, "/connect.Connect/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *connectClient) Describe(ctx context.Context, in *v1.GetClusterRequest, opts ...grpc.CallOption) (*v1.GetClusterReply, error) {
	out := new(v1.GetClusterReply)
	err := c.cc.Invoke(ctx, "/connect.Connect/Describe", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *connectClient) DescribeS3Sink(ctx context.Context, in *v1.GetS3SinkClusterRequest, opts ...grpc.CallOption) (*v1.GetS3SinkClusterReply, error) {
	out := new(v1.GetS3SinkClusterReply)
	err := c.cc.Invoke(ctx, "/connect.Connect/DescribeS3Sink", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *connectClient) CreateS3Sink(ctx context.Context, in *v1.CreateS3SinkClusterRequest, opts ...grpc.CallOption) (*v1.CreateS3SinkClusterReply, error) {
	out := new(v1.CreateS3SinkClusterReply)
	err := c.cc.Invoke(ctx, "/connect.Connect/CreateS3Sink", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *connectClient) UpdateS3Sink(ctx context.Context, in *v1.UpdateS3SinkClusterRequest, opts ...grpc.CallOption) (*v1.UpdateS3SinkClusterReply, error) {
	out := new(v1.UpdateS3SinkClusterReply)
	err := c.cc.Invoke(ctx, "/connect.Connect/UpdateS3Sink", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *connectClient) Delete(ctx context.Context, in *v1.DeleteClusterRequest, opts ...grpc.CallOption) (*v1.DeleteClusterReply, error) {
	out := new(v1.DeleteClusterReply)
	err := c.cc.Invoke(ctx, "/connect.Connect/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ConnectServer is the server API for Connect service.
type ConnectServer interface {
	List(context.Context, *v1.GetClustersRequest) (*v1.GetClustersReply, error)
	Describe(context.Context, *v1.GetClusterRequest) (*v1.GetClusterReply, error)
	DescribeS3Sink(context.Context, *v1.GetS3SinkClusterRequest) (*v1.GetS3SinkClusterReply, error)
	CreateS3Sink(context.Context, *v1.CreateS3SinkClusterRequest) (*v1.CreateS3SinkClusterReply, error)
	UpdateS3Sink(context.Context, *v1.UpdateS3SinkClusterRequest) (*v1.UpdateS3SinkClusterReply, error)
	Delete(context.Context, *v1.DeleteClusterRequest) (*v1.DeleteClusterReply, error)
}

func RegisterConnectServer(s *grpc.Server, srv ConnectServer) {
	s.RegisterService(&_Connect_serviceDesc, srv)
}

func _Connect_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.GetClustersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConnectServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/connect.Connect/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConnectServer).List(ctx, req.(*v1.GetClustersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Connect_Describe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.GetClusterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConnectServer).Describe(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/connect.Connect/Describe",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConnectServer).Describe(ctx, req.(*v1.GetClusterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Connect_DescribeS3Sink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.GetS3SinkClusterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConnectServer).DescribeS3Sink(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/connect.Connect/DescribeS3Sink",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConnectServer).DescribeS3Sink(ctx, req.(*v1.GetS3SinkClusterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Connect_CreateS3Sink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.CreateS3SinkClusterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConnectServer).CreateS3Sink(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/connect.Connect/CreateS3Sink",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConnectServer).CreateS3Sink(ctx, req.(*v1.CreateS3SinkClusterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Connect_UpdateS3Sink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.UpdateS3SinkClusterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConnectServer).UpdateS3Sink(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/connect.Connect/UpdateS3Sink",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConnectServer).UpdateS3Sink(ctx, req.(*v1.UpdateS3SinkClusterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Connect_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.DeleteClusterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConnectServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/connect.Connect/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConnectServer).Delete(ctx, req.(*v1.DeleteClusterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Connect_serviceDesc = grpc.ServiceDesc{
	ServiceName: "connect.Connect",
	HandlerType: (*ConnectServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "List",
			Handler:    _Connect_List_Handler,
		},
		{
			MethodName: "Describe",
			Handler:    _Connect_Describe_Handler,
		},
		{
			MethodName: "DescribeS3Sink",
			Handler:    _Connect_DescribeS3Sink_Handler,
		},
		{
			MethodName: "CreateS3Sink",
			Handler:    _Connect_CreateS3Sink_Handler,
		},
		{
			MethodName: "UpdateS3Sink",
			Handler:    _Connect_UpdateS3Sink_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _Connect_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "connect.proto",
}

func init() { proto.RegisterFile("connect.proto", fileDescriptor_connect_b967e3e75e049bbe) }

var fileDescriptor_connect_b967e3e75e049bbe = []byte{
	// 464 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x94, 0x5f, 0x8b, 0xd3, 0x40,
	0x14, 0xc5, 0x8d, 0xf6, 0x8f, 0x7b, 0x57, 0x17, 0x19, 0x5f, 0x62, 0x50, 0x28, 0x45, 0x34, 0x8b,
	0x92, 0xd0, 0xae, 0x3e, 0x09, 0xbe, 0x74, 0x17, 0x11, 0x04, 0x21, 0xcb, 0xbe, 0x89, 0x25, 0x9d,
	0xdc, 0xae, 0x43, 0xd3, 0x99, 0x38, 0x33, 0x29, 0xec, 0x47, 0x10, 0xbf, 0xaf, 0xcf, 0x92, 0x99,
	0xc9, 0x9a, 0x4a, 0x42, 0xb3, 0x6f, 0x9d, 0x99, 0xdf, 0x39, 0x67, 0xee, 0x99, 0x12, 0x78, 0x4c,
	0x05, 0xe7, 0x48, 0x75, 0x54, 0x48, 0xa1, 0x05, 0x19, 0xbb, 0x65, 0xf0, 0xe1, 0x9a, 0xe9, 0x1f,
	0xe5, 0x2a, 0xa2, 0x62, 0x1b, 0x53, 0xc1, 0xd7, 0x79, 0x89, 0x5c, 0x33, 0x4e, 0x63, 0x4a, 0x73,
	0x51, 0x66, 0x69, 0xc1, 0x54, 0xec, 0xd8, 0x78, 0x37, 0x8b, 0xf7, 0x5c, 0x82, 0xf7, 0xbd, 0xc4,
	0x12, 0xad, 0x52, 0xa2, 0x95, 0x4d, 0xff, 0x78, 0xf0, 0xf4, 0xf2, 0xec, 0x92, 0xf1, 0xcd, 0x22,
	0x2f, 0x95, 0x46, 0xb9, 0x10, 0x7c, 0xcd, 0xae, 0x09, 0x81, 0x01, 0x4f, 0xb7, 0xe8, 0x7b, 0x13,
	0x2f, 0x3c, 0x4a, 0xcc, 0x6f, 0xf2, 0x02, 0x20, 0xa5, 0x54, 0x94, 0x5c, 0x2f, 0x59, 0xe6, 0xdf,
	0x37, 0x27, 0x47, 0x6e, 0xe7, 0x73, 0x46, 0x42, 0x78, 0xb2, 0x49, 0xd7, 0x9b, 0x74, 0x49, 0xad,
	0x53, 0x05, 0x3d, 0x30, 0xd0, 0x89, 0xd9, 0x77, 0x01, 0x4d, 0xb2, 0x54, 0x28, 0x97, 0xb8, 0x4d,
	0x59, 0xee, 0x0f, 0x1a, 0xe4, 0x95, 0x42, 0x79, 0x51, 0xed, 0x12, 0x1f, 0xc6, 0x0a, 0xe5, 0x0e,
	0xa5, 0xf2, 0x87, 0x13, 0x2f, 0x1c, 0x26, 0xf5, 0x92, 0x7c, 0x84, 0xb1, 0x28, 0x34, 0x13, 0x5c,
	0xf9, 0xa3, 0x89, 0x17, 0x1e, 0xcf, 0x5f, 0x46, 0xff, 0x26, 0x8d, 0xea, 0x6e, 0x76, 0xb3, 0xc8,
	0x4e, 0xf7, 0xd5, 0xb2, 0x49, 0x2d, 0x9a, 0x26, 0x10, 0x2c, 0x24, 0xa6, 0x1a, 0xf7, 0xa6, 0x4f,
	0xf0, 0x67, 0x89, 0x4a, 0x93, 0x77, 0x30, 0xa2, 0xa6, 0x08, 0x53, 0xc0, 0xf1, 0xfc, 0xf9, 0xad,
	0x63, 0x4b, 0x59, 0x89, 0x63, 0xa7, 0xbf, 0x3d, 0xf0, 0x5b, 0x4d, 0x8b, 0xfc, 0x86, 0xc4, 0x30,
	0x44, 0x29, 0x85, 0x74, 0x8e, 0xcf, 0xf6, 0xaf, 0x2b, 0xb1, 0xba, 0xeb, 0x45, 0x05, 0x24, 0x96,
	0xab, 0x26, 0x74, 0x4d, 0x9a, 0xae, 0x0f, 0x4d, 0x58, 0x87, 0xd5, 0xa2, 0xf9, 0xaf, 0x21, 0x8c,
	0x17, 0x96, 0x22, 0xdf, 0x60, 0xf0, 0x85, 0x29, 0x4d, 0x4e, 0x3b, 0x2c, 0x3e, 0xa1, 0x76, 0x7a,
	0xe5, 0x2a, 0x08, 0x5e, 0xf7, 0x41, 0x8b, 0xfc, 0x66, 0x7a, 0x8f, 0x7c, 0x87, 0x87, 0xe7, 0xa8,
	0xa8, 0x64, 0x2b, 0x24, 0xe1, 0x41, 0x59, 0x1d, 0xf0, 0xaa, 0x07, 0x69, 0xfd, 0x0b, 0x38, 0xa9,
	0xfd, 0xed, 0xac, 0x24, 0xea, 0xd6, 0xb6, 0xbd, 0x67, 0xf0, 0xb6, 0x37, 0x6f, 0x13, 0x35, 0x3c,
	0x6a, 0x3e, 0x24, 0x99, 0x75, 0xe8, 0xbb, 0xff, 0x42, 0x41, 0x7c, 0x17, 0xc9, 0x6d, 0xea, 0x55,
	0x91, 0x1d, 0x4e, 0x6d, 0x42, 0x3d, 0x53, 0x5b, 0x25, 0x36, 0x75, 0x05, 0xa3, 0x73, 0xcc, 0x51,
	0x23, 0x79, 0xd3, 0x21, 0xb6, 0xc7, 0xff, 0x25, 0x9d, 0xf6, 0x83, 0x4d, 0xc6, 0x6a, 0x64, 0xbe,
	0x36, 0x67, 0x7f, 0x03, 0x00, 0x00, 0xff, 0xff, 0x55, 0x8f, 0x44, 0x73, 0xfb, 0x04, 0x00, 0x00,
}
