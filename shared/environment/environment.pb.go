// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: environment.proto

package environment

import (
	context "context"
	fmt "fmt"
	v1 "github.com/confluentinc/ccloudapis/org/v1"
	proto "github.com/gogo/protobuf/proto"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

func init() { proto.RegisterFile("environment.proto", fileDescriptor_64e647b85623514a) }

var fileDescriptor_64e647b85623514a = []byte{
	// 226 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0xd1, 0x3f, 0x4b, 0xc4, 0x30,
	0x18, 0xc7, 0x71, 0xe1, 0xe4, 0x84, 0x38, 0x99, 0xf1, 0xc6, 0xe3, 0xd4, 0x2d, 0xe1, 0xbc, 0x57,
	0x20, 0x0a, 0xb7, 0xb8, 0x28, 0xe8, 0xe0, 0xd6, 0xa6, 0x8f, 0x35, 0x90, 0xe6, 0x89, 0xc9, 0x93,
	0x82, 0xef, 0xd0, 0x97, 0x25, 0x69, 0xea, 0x1f, 0x4a, 0x4b, 0x3b, 0x05, 0xf2, 0xfb, 0xe6, 0xb3,
	0x84, 0x5d, 0x80, 0x6d, 0xb5, 0x47, 0xdb, 0x80, 0x25, 0xe1, 0x3c, 0x12, 0xf2, 0xf3, 0x7f, 0x57,
	0x9b, 0x43, 0xad, 0xe9, 0x3d, 0x96, 0x42, 0x61, 0x23, 0x15, 0xda, 0x37, 0x13, 0xc1, 0x92, 0xb6,
	0x4a, 0x2a, 0x65, 0x30, 0x56, 0x85, 0xd3, 0x41, 0xa2, 0xaf, 0x65, 0xbb, 0x4f, 0x47, 0x16, 0x6e,
	0xbe, 0x56, 0xec, 0xec, 0x56, 0x29, 0x8c, 0x96, 0xf8, 0x2b, 0x5b, 0xdf, 0x79, 0x28, 0x08, 0xf8,
	0xb5, 0xf8, 0x7b, 0x23, 0x52, 0xdc, 0xee, 0x45, 0x9e, 0xfa, 0xf6, 0x09, 0x3e, 0x22, 0x04, 0xda,
	0x5c, 0xce, 0x87, 0xce, 0x7c, 0x6e, 0x4f, 0x92, 0xfd, 0xec, 0xaa, 0x29, 0x3b, 0x4f, 0x0b, 0xec,
	0x41, 0xf8, 0x6b, 0xdf, 0x83, 0x81, 0x09, 0x3b, 0x4f, 0x0b, 0xec, 0x41, 0x98, 0xed, 0x47, 0xb6,
	0x3a, 0x02, 0xf1, 0xdd, 0x48, 0x7f, 0x04, 0x1a, 0xa8, 0xdb, 0x99, 0x2a, 0x93, 0x2f, 0xec, 0xf4,
	0x41, 0x07, 0xe2, 0x57, 0x23, 0x75, 0x1a, 0xfa, 0x3c, 0xfc, 0xa8, 0xbb, 0xd9, 0xae, 0x73, 0xcb,
	0x75, 0xf7, 0xa3, 0x87, 0xef, 0x00, 0x00, 0x00, 0xff, 0xff, 0x34, 0x4b, 0x4b, 0x30, 0x28, 0x02,
	0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// AccountClient is the client API for Account service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type AccountClient interface {
	Create(ctx context.Context, in *v1.CreateAccountRequest, opts ...grpc.CallOption) (*v1.CreateAccountReply, error)
	Update(ctx context.Context, in *v1.UpdateAccountRequest, opts ...grpc.CallOption) (*v1.UpdateAccountReply, error)
	Delete(ctx context.Context, in *v1.DeleteAccountRequest, opts ...grpc.CallOption) (*v1.DeleteAccountReply, error)
	Get(ctx context.Context, in *v1.GetAccountRequest, opts ...grpc.CallOption) (*v1.GetAccountReply, error)
	List(ctx context.Context, in *v1.ListAccountsRequest, opts ...grpc.CallOption) (*v1.ListAccountsReply, error)
}

type accountClient struct {
	cc *grpc.ClientConn
}

func NewAccountClient(cc *grpc.ClientConn) AccountClient {
	return &accountClient{cc}
}

func (c *accountClient) Create(ctx context.Context, in *v1.CreateAccountRequest, opts ...grpc.CallOption) (*v1.CreateAccountReply, error) {
	out := new(v1.CreateAccountReply)
	err := c.cc.Invoke(ctx, "/environment.Account/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountClient) Update(ctx context.Context, in *v1.UpdateAccountRequest, opts ...grpc.CallOption) (*v1.UpdateAccountReply, error) {
	out := new(v1.UpdateAccountReply)
	err := c.cc.Invoke(ctx, "/environment.Account/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountClient) Delete(ctx context.Context, in *v1.DeleteAccountRequest, opts ...grpc.CallOption) (*v1.DeleteAccountReply, error) {
	out := new(v1.DeleteAccountReply)
	err := c.cc.Invoke(ctx, "/environment.Account/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountClient) Get(ctx context.Context, in *v1.GetAccountRequest, opts ...grpc.CallOption) (*v1.GetAccountReply, error) {
	out := new(v1.GetAccountReply)
	err := c.cc.Invoke(ctx, "/environment.Account/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountClient) List(ctx context.Context, in *v1.ListAccountsRequest, opts ...grpc.CallOption) (*v1.ListAccountsReply, error) {
	out := new(v1.ListAccountsReply)
	err := c.cc.Invoke(ctx, "/environment.Account/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AccountServer is the server API for Account service.
type AccountServer interface {
	Create(context.Context, *v1.CreateAccountRequest) (*v1.CreateAccountReply, error)
	Update(context.Context, *v1.UpdateAccountRequest) (*v1.UpdateAccountReply, error)
	Delete(context.Context, *v1.DeleteAccountRequest) (*v1.DeleteAccountReply, error)
	Get(context.Context, *v1.GetAccountRequest) (*v1.GetAccountReply, error)
	List(context.Context, *v1.ListAccountsRequest) (*v1.ListAccountsReply, error)
}

func RegisterAccountServer(s *grpc.Server, srv AccountServer) {
	s.RegisterService(&_Account_serviceDesc, srv)
}

func _Account_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.CreateAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/environment.Account/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServer).Create(ctx, req.(*v1.CreateAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Account_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.UpdateAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/environment.Account/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServer).Update(ctx, req.(*v1.UpdateAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Account_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.DeleteAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/environment.Account/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServer).Delete(ctx, req.(*v1.DeleteAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Account_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.GetAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/environment.Account/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServer).Get(ctx, req.(*v1.GetAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Account_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.ListAccountsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/environment.Account/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServer).List(ctx, req.(*v1.ListAccountsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Account_serviceDesc = grpc.ServiceDesc{
	ServiceName: "environment.Account",
	HandlerType: (*AccountServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _Account_Create_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _Account_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _Account_Delete_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _Account_Get_Handler,
		},
		{
			MethodName: "List",
			Handler:    _Account_List_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "environment.proto",
}
