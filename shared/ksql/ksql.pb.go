// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ksql.proto

package ksql

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import v1 "github.com/confluentinc/cc-structs/kafka/scheduler/v1"

import context "golang.org/x/net/context"
import grpc "google.golang.org/grpc"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Ksql service

type KsqlClient interface {
	List(ctx context.Context, in *v1.GetKSQLClustersRequest, opts ...grpc.CallOption) (*v1.GetKSQLClustersReply, error)
	Describe(ctx context.Context, in *v1.GetKSQLClusterRequest, opts ...grpc.CallOption) (*v1.GetKSQLClusterReply, error)
	Delete(ctx context.Context, in *v1.DeleteKSQLClusterRequest, opts ...grpc.CallOption) (*v1.DeleteKSQLClusterReply, error)
	Create(ctx context.Context, in *v1.CreateKSQLClusterRequest, opts ...grpc.CallOption) (*v1.CreateKSQLClusterReply, error)
}

type ksqlClient struct {
	cc *grpc.ClientConn
}

func NewKsqlClient(cc *grpc.ClientConn) KsqlClient {
	return &ksqlClient{cc}
}

func (c *ksqlClient) List(ctx context.Context, in *v1.GetKSQLClustersRequest, opts ...grpc.CallOption) (*v1.GetKSQLClustersReply, error) {
	out := new(v1.GetKSQLClustersReply)
	err := c.cc.Invoke(ctx, "/ksql.Ksql/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ksqlClient) Describe(ctx context.Context, in *v1.GetKSQLClusterRequest, opts ...grpc.CallOption) (*v1.GetKSQLClusterReply, error) {
	out := new(v1.GetKSQLClusterReply)
	err := c.cc.Invoke(ctx, "/ksql.Ksql/Describe", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ksqlClient) Delete(ctx context.Context, in *v1.DeleteKSQLClusterRequest, opts ...grpc.CallOption) (*v1.DeleteKSQLClusterReply, error) {
	out := new(v1.DeleteKSQLClusterReply)
	err := c.cc.Invoke(ctx, "/ksql.Ksql/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ksqlClient) Create(ctx context.Context, in *v1.CreateKSQLClusterRequest, opts ...grpc.CallOption) (*v1.CreateKSQLClusterReply, error) {
	out := new(v1.CreateKSQLClusterReply)
	err := c.cc.Invoke(ctx, "/ksql.Ksql/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Ksql service

type KsqlServer interface {
	List(context.Context, *v1.GetKSQLClustersRequest) (*v1.GetKSQLClustersReply, error)
	Describe(context.Context, *v1.GetKSQLClusterRequest) (*v1.GetKSQLClusterReply, error)
	Delete(context.Context, *v1.DeleteKSQLClusterRequest) (*v1.DeleteKSQLClusterReply, error)
	Create(context.Context, *v1.CreateKSQLClusterRequest) (*v1.CreateKSQLClusterReply, error)
}

func RegisterKsqlServer(s *grpc.Server, srv KsqlServer) {
	s.RegisterService(&_Ksql_serviceDesc, srv)
}

func _Ksql_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.GetKSQLClustersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KsqlServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ksql.Ksql/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KsqlServer).List(ctx, req.(*v1.GetKSQLClustersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ksql_Describe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.GetKSQLClusterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KsqlServer).Describe(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ksql.Ksql/Describe",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KsqlServer).Describe(ctx, req.(*v1.GetKSQLClusterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ksql_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.DeleteKSQLClusterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KsqlServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ksql.Ksql/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KsqlServer).Delete(ctx, req.(*v1.DeleteKSQLClusterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ksql_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.CreateKSQLClusterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KsqlServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ksql.Ksql/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KsqlServer).Create(ctx, req.(*v1.CreateKSQLClusterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Ksql_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ksql.Ksql",
	HandlerType: (*KsqlServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "List",
			Handler:    _Ksql_List_Handler,
		},
		{
			MethodName: "Describe",
			Handler:    _Ksql_Describe_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _Ksql_Delete_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _Ksql_Create_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ksql.proto",
}

func init() { proto.RegisterFile("ksql.proto", fileDescriptor_ksql_eb5b9682321f18c7) }

var fileDescriptor_ksql_eb5b9682321f18c7 = []byte{
	// 190 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0xca, 0x2e, 0x2e, 0xcc,
	0xd1, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x01, 0xb1, 0xa5, 0x94, 0xb2, 0x13, 0xd3, 0xb2,
	0x13, 0xf5, 0x8b, 0x93, 0x33, 0x52, 0x53, 0x4a, 0x73, 0x52, 0x8b, 0xf4, 0xcb, 0x0c, 0x11, 0x1c,
	0x88, 0x4a, 0xa3, 0x29, 0xcc, 0x5c, 0x2c, 0xde, 0xc5, 0x85, 0x39, 0x42, 0x71, 0x5c, 0x2c, 0x3e,
	0x99, 0xc5, 0x25, 0x42, 0x5a, 0x7a, 0x60, 0x5d, 0x7a, 0x08, 0x85, 0x65, 0x86, 0x7a, 0xee, 0xa9,
	0x25, 0xde, 0xc1, 0x81, 0x3e, 0xce, 0x39, 0xa5, 0xc5, 0x25, 0xa9, 0x45, 0xc5, 0x41, 0xa9, 0x85,
	0xa5, 0xa9, 0xc5, 0x25, 0x52, 0x1a, 0x44, 0xa9, 0x2d, 0xc8, 0xa9, 0x54, 0x62, 0x10, 0x4a, 0xe0,
	0xe2, 0x70, 0x49, 0x2d, 0x4e, 0x2e, 0xca, 0x4c, 0x4a, 0x15, 0xd2, 0x24, 0xac, 0x0f, 0x66, 0x85,
	0x3a, 0x31, 0x4a, 0x21, 0x36, 0xa4, 0x70, 0xb1, 0xb9, 0xa4, 0xe6, 0xa4, 0x96, 0xa4, 0x0a, 0xe9,
	0x60, 0xd3, 0x04, 0x91, 0xc3, 0x62, 0x85, 0x16, 0x91, 0xaa, 0xe1, 0xb6, 0x38, 0x17, 0xa5, 0x26,
	0xe2, 0xb2, 0x05, 0x22, 0x47, 0xac, 0x2d, 0x58, 0x54, 0x83, 0x6d, 0x49, 0x62, 0x03, 0xc7, 0x8e,
	0x31, 0x20, 0x00, 0x00, 0xff, 0xff, 0xb4, 0xf6, 0x5c, 0x77, 0xd5, 0x01, 0x00, 0x00,
}
