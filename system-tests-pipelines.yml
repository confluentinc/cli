jobs:
- job: system_test
  displayName: cli system-tests
  timeoutInMinutes: 150

  pool:
    vmImage: 'ubuntu-18.04'
  
  variables:
    IMAGE_NAME: DUMMY_IMAGE_NAME # dummy image name to stop mk-include/docker.mk from crashing as it requires image name (not needed for CLI system tests)
    CI: "true"
    PATH: "$(Agent.BuildDirectory):$(PATH)"
  
  steps:
    
  - task: HelmInstaller@1 # Azure Pipelines preinstalls helm, replace it with version 3.3.4 specified in cc-helm.mk
    inputs:
      helmVersionToInstall: 3.3.4
    displayName: Install Helm
 
  - template: azure-pipelines-templates/setup-secrets.yml

  - template: azure-pipelines-templates/setup-go.yml
  
  - bash: |
      echo "##vso[task.setvariable variable=GOROOT]$(Agent.BuildDirectory)/go"
      echo "##vso[task.setvariable variable=GOPATH]$(Agent.BuildDirectory)/gopath"
      echo "##vso[task.setvariable variable=GOBIN]$(Agent.BuildDirectory)/go/bin"
      echo "##vso[task.setvariable variable=modulePath]$(Agent.BuildDirectory)/go/src/github.com/$(build.repository.name)"
      echo "##vso[task.prependpath]$(GOROOT)/bin"
      echo "##vso[task.prependpath]$(GOPATH)/bin"
      mkdir -p ${GOPATH}\bin
      mkdir -p ${GOROOT}\bin
    displayName: Set up Go environment and workspace
  
  - task: DownloadSecureFile@1
    name: vaultsecrets
    inputs:
      secureFile: 'vault_secrets'
    displayName: Securely download vault environment variables (VAULT_ADDR, VAULT_ROLE_ID, VAULT_SECRET_ID)
  
  - bash: make deps
    displayName: Download Go dependencies
  
  - bash: make build
    displayName: Build CLI binary
  
  - task: GoTool@0
    inputs:
      version: '1.15.7'
    displayName: Use Go 1.15.7 for cc-system-tests
  
  - bash: |
      echo "include ./mk-files/cli-cpd.mk" >> Makefile
      git clone git@github.com:confluentinc/cc-mk-include.git mk-include
      echo "include ./mk-include/cc-begin.mk" >> Makefile
      echo "include ./mk-include/cc-docker.mk" >> Makefile
      echo "include ./mk-include/cc-vault.mk" >> Makefile
      echo "include ./mk-include/cc-helm.mk" >> Makefile
      echo "include ./mk-include/cc-cpd.mk" >> Makefile
      echo "include ./mk-include/cc-end.mk" >> Makefile
    displayName: Add mk-include targets to Makefile
  
  - bash: make install-vault
    displayName: Install Vault
  
  - bash: |
      . $(vaultsecrets.secureFilePath) # export VAULT_ADDR, VAULT_ROLE_ID, and VAULT_SECRET_ID
      . mk-include/bin/vault-setup
      . vault-sem-get-secret ssh_id_rsa
      . vault-sem-get-secret netrc
      . vault-sem-get-secret semaphore-secrets-global
      . vault-sem-get-secret eng_aws
      . vault-sem-get-secret aws_credentials
      . vault-sem-get-secret cpd_gcloud
      . vault-sem-get-secret ssh_config
      . vault-sem-get-secret gitconfig
      . vault-sem-get-secret artifactory-docker-helm
      . vault-sem-get-secret azure_credentials
      make docker-login-ci
      make helm-setup-ci
      make helm-update-repo
    displayName: Inject Vault secrets, set up Docker and Helm
  
  - bash: make gcloud-install
    displayName: Install gcloud
  
  - bash: make cpd-update
    displayName: Download CPD
  
  - bash: make checkout-cc-system-tests
    displayName: Check out cc-system-tests
  
  - bash: |
      . $(vaultsecrets.secureFilePath)
      make cpd-priv-create-if-missing
    env:
      AZURE_PIPELINES: "true"
      AZURE_PIPELINES_JOB_ID: $(Build.BuildId)
      AZURE_PIPELINES_PROJECT_NAME: "cli"
      CPD_CR_ARGS: "--pool-name ci"
    displayName: Create CPD cluster

  - bash: make cpd-priv-testenv || make cpd-debug-and-err
    displayName: Get environment variables for cc-system-tests
  
  - bash: |
      . $(vault kv get -field=script v1/ci/kv/semaphore2/cc-system-tests)
      cpd priv inject-credentials --id $(kubectl config current-context) --all-namespaces
      make system-test-init-env || make cpd-debug-and-err
    env:
      CREATE_KAFKA_CLUSTERS: "true"
      SKIP_SETUP_S3_BUCKET_FOR_CONNECT: "true"
    displayName: make init-env
  
  - bash: make replace-cli-binary
    displayName: Replace CLI binary
  
  - bash: make run-system-tests || make cpd-debug-and-err
    env:
      GO_TEST_PACKAGE_ARGS: "./test/cli/..."
    displayName: Run system tests
  
  - bash: make cpd-destroy
    condition: always()
    displayName: Free CPD
