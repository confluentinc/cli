version: v1.0
name: Confluent CLI

agent:
  machine:
    type: s1-prod-ubuntu20-04-amd64-1

auto_cancel:
  running:
    when: "branch != 'main'"

execution_time_limit:
  hours: 1

blocks:
  - name: linux/amd64
    dependencies: []
    task:
      jobs:
        - name: linux/amd64
          commands:
            # Get GitHub SSH key from Vault
            - vault login -no-print token="$(vault write -field=token auth/app/devel/login role_id=${VAULT_ROLE_ID} secret_id=${VAULT_SECRET_ID})"
            - vault kv get -field=script "v1/ci/kv/semaphore2/ssh_id_rsa" > script.sh
            - source script.sh

            # Set up Go
            - goenv install --skip-existing
            - export "PATH=$(go env GOPATH)/bin:$PATH"

            # Try to restore cached dependencies
            - cache restore linux-$(checksum go.sum)

            # Set up Git
            - export "GOPRIVATE=github.com/confluentinc"
            - git config --global url."git@github.com:".insteadOf "https://github.com/"

            # Run tests
            - make generate-packaging-patch
            - diff --version
            - diff -w -u <(git cat-file --filters HEAD:debian/patches/standard_build_layout.patch | awk "{if (NR>3) {print}}") <(cat debian/patches/standard_build_layout.patch | awk "{if (NR>3) {print}}")
            - make lint
            - make test
            - make test-installer

            # Cache Go dependencies
            - cache store linux-$(checksum go.sum) $(go env GOPATH)/pkg/mod
      epilogue:
        always:
          commands:
            - test-results publish . -N "linux/amd64"

  - name: darwin/amd64
    dependencies: []
    task:
      agent:
        machine:
          type: s1-prod-macos-13-5-amd64
      jobs:
        - name: darwin/amd64
          commands:
            # Get GitHub SSH key from Vault
            - vault login -no-print token="$(vault write -field=token auth/app/devel/login role_id=${VAULT_ROLE_ID} secret_id=${VAULT_SECRET_ID})"
            - vault kv get -field=script "v1/ci/kv/semaphore2/ssh_id_rsa" > script.sh
            - source script.sh

            # Set up Go
            - checkout
            - goenv install --skip-existing
            - eval "$(goenv init -)"
            - export "PATH=$GOROOT/bin:$PATH"
            - export "PATH=$GOPATH/bin:$PATH"

            # Set up Git
            - export "GOPRIVATE=github.com/confluentinc"
            - git config --global url."git@github.com:".insteadOf "https://github.com/"

            # Run tests
            - make test

  - name: windows/amd64
    dependencies: []
    task:
      agent:
        machine:
          type: s1-prod-windows
      jobs:
        - name: windows/amd64
          commands:
            # Get GitHub SSH key from Vault
            - vault login -no-print token="$(vault.exe write -field=token auth/app/devel/login role_id=$Env:VAULT_ROLE_ID secret_id=$Env:VAULT_SECRET_ID)"
            - vault kv get -field=script "v1/ci/kv/semaphore2/ssh_id_rsa" > script.sh
            - Set-Content id_rsa.b64 $(Select-String "echo" script.sh)[0].Line.Split('"')[1]
            - base64 -d -i id_rsa.b64 -o "C:\Users\semaphore\.ssh\id_rsa"

            # Set up Go
            # TODO: https://confluentinc.atlassian.net/browse/DP-9532

            # Set up Git
            - checkout
            - $Env:GOPRIVATE = "github.com/confluentinc"
            # TODO: https://confluentinc.atlassian.net/browse/DP-8234
            - git config --global url."git@github.com:".insteadOf "https://github.com/"

            # Try to restore cached dependencies
            - cache restore windows-$($(Get-FileHash go.sum).Hash)

            # Run tests
            - make semaphore-deps
            - gotestsum --junitfile unit-test-report.xml -- -v $(go list ./... | Select-String test -NotMatch) -ldflags "-buildmode=exe"
            - gotestsum --junitfile integration-test-report.xml -- -v $(go list ./... | Select-String test)

            # Cache Go dependencies
            - $gopath=$(go env GOPATH); cache store windows-$($(Get-FileHash go.sum).Hash) $gopath\pkg\mod

after_pipeline:
  task:
    jobs:
      - name: Publish Results
        commands:
          - test-results gen-pipeline-report
