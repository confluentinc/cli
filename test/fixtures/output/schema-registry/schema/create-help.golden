Create a schema.

Usage:
  confluent schema-registry schema create [flags]

Examples:
Register a new schema.

  $ confluent schema-registry schema create --subject payments --schema payments.avro --type avro

Where `schemafilepath` may include these contents:

  {
  	"type" : "record",
  	"namespace" : "Example",
  	"name" : "Employee",
  	"fields" : [
  		{ "name" : "Name" , "type" : "string" },
  		{ "name" : "Age" , "type" : "int" }
  	]
  }

For more information on schema types, see https://docs.confluent.io/current/schema-registry/serdes-develop/index.html.

For more information on schema references, see https://docs.confluent.io/current/schema-registry/serdes-develop/index.html#schema-references.

Flags:
      --schema string        REQUIRED: The path to the schema file.
      --subject string       REQUIRED: Subject of the schema.
      --type string          Specify the schema type as "avro", "json", or "protobuf".
      --references string    The path to the references file.
      --metadata string      The path to metadata file.
      --ruleset string       The path to schema ruleset file.
      --normalize            Alphabetize the list of schema fields.
      --api-key string       API key.
      --api-secret string    API key secret.
      --context string       CLI context name.
      --environment string   Environment ID.
  -o, --output string        Specify the output format as "human", "json", or "yaml". (default "human")

Global Flags:
  -h, --help            Show help for this command.
      --unsafe-trace    Equivalent to -vvvv, but also log HTTP requests and responses which may contain plaintext secrets.
  -v, --verbose count   Increase verbosity (-v for warn, -vv for info, -vvv for debug, -vvvv for trace).
