// Code generated by MockGen. DO NOT EDIT.
// Source: internal/cmd/local/shell_runner.go

// Package mock_local is a generated GoMock package.
package mock_local

import (
	gomock "github.com/golang/mock/gomock"
	io "io"
	reflect "reflect"
)

// MockShellRunner is a mock of ShellRunner interface
type MockShellRunner struct {
	ctrl     *gomock.Controller
	recorder *MockShellRunnerMockRecorder
}

// MockShellRunnerMockRecorder is the mock recorder for MockShellRunner
type MockShellRunnerMockRecorder struct {
	mock *MockShellRunner
}

// NewMockShellRunner creates a new mock instance
func NewMockShellRunner(ctrl *gomock.Controller) *MockShellRunner {
	mock := &MockShellRunner{ctrl: ctrl}
	mock.recorder = &MockShellRunnerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockShellRunner) EXPECT() *MockShellRunnerMockRecorder {
	return m.recorder
}

// Init mocks base method
func (m *MockShellRunner) Init(stdout, stderr io.Writer) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Init", stdout, stderr)
}

// Init indicates an expected call of Init
func (mr *MockShellRunnerMockRecorder) Init(stdout, stderr interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Init", reflect.TypeOf((*MockShellRunner)(nil).Init), stdout, stderr)
}

// Export mocks base method
func (m *MockShellRunner) Export(name, value string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Export", name, value)
}

// Export indicates an expected call of Export
func (mr *MockShellRunnerMockRecorder) Export(name, value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Export", reflect.TypeOf((*MockShellRunner)(nil).Export), name, value)
}

// Source mocks base method
func (m *MockShellRunner) Source(filepath string, loader func(string) ([]byte, error)) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Source", filepath, loader)
	ret0, _ := ret[0].(error)
	return ret0
}

// Source indicates an expected call of Source
func (mr *MockShellRunnerMockRecorder) Source(filepath, loader interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Source", reflect.TypeOf((*MockShellRunner)(nil).Source), filepath, loader)
}

// Run mocks base method
func (m *MockShellRunner) Run(command string, args []string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Run", command, args)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Run indicates an expected call of Run
func (mr *MockShellRunnerMockRecorder) Run(command, args interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Run", reflect.TypeOf((*MockShellRunner)(nil).Run), command, args)
}
