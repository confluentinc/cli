// Code generated by mocker. DO NOT EDIT.
// github.com/travisjeffery/mocker
// Source: login_token_handler.go

package mock

import (
	sync "sync"

	github_com_confluentinc_ccloud_sdk_go "github.com/confluentinc/ccloud-sdk-go"
	github_com_confluentinc_cli_internal_pkg_auth "github.com/confluentinc/cli/internal/pkg/auth"
	github_com_confluentinc_cli_internal_pkg_netrc "github.com/confluentinc/cli/internal/pkg/netrc"
	github_com_confluentinc_mds_sdk_go_mdsv1 "github.com/confluentinc/mds-sdk-go/mdsv1"
	github_com_spf13_cobra "github.com/spf13/cobra"
)

// MockLoginTokenHandler is a mock of LoginTokenHandler interface
type MockLoginTokenHandler struct {
	lockGetCCloudTokenAndCredentialsFromEnvVar sync.Mutex
	GetCCloudTokenAndCredentialsFromEnvVarFunc func(cmd *github_com_spf13_cobra.Command, client *github_com_confluentinc_ccloud_sdk_go.Client) (string, *github_com_confluentinc_cli_internal_pkg_auth.Credentials, error)

	lockGetCCloudTokenAndCredentialsFromNetrc sync.Mutex
	GetCCloudTokenAndCredentialsFromNetrcFunc func(cmd *github_com_spf13_cobra.Command, client *github_com_confluentinc_ccloud_sdk_go.Client, url string, filterParams github_com_confluentinc_cli_internal_pkg_netrc.GetMatchingNetrcMachineParams) (string, *github_com_confluentinc_cli_internal_pkg_auth.Credentials, error)

	lockGetCCloudTokenAndCredentialsFromPrompt sync.Mutex
	GetCCloudTokenAndCredentialsFromPromptFunc func(cmd *github_com_spf13_cobra.Command, client *github_com_confluentinc_ccloud_sdk_go.Client, url string) (string, *github_com_confluentinc_cli_internal_pkg_auth.Credentials, error)

	lockGetConfluentTokenAndCredentialsFromEnvVar sync.Mutex
	GetConfluentTokenAndCredentialsFromEnvVarFunc func(cmd *github_com_spf13_cobra.Command, client *github_com_confluentinc_mds_sdk_go_mdsv1.APIClient) (string, *github_com_confluentinc_cli_internal_pkg_auth.Credentials, error)

	lockGetConfluentTokenAndCredentialsFromNetrc sync.Mutex
	GetConfluentTokenAndCredentialsFromNetrcFunc func(cmd *github_com_spf13_cobra.Command, client *github_com_confluentinc_mds_sdk_go_mdsv1.APIClient, filterParams github_com_confluentinc_cli_internal_pkg_netrc.GetMatchingNetrcMachineParams) (string, *github_com_confluentinc_cli_internal_pkg_auth.Credentials, error)

	lockGetConfluentTokenAndCredentialsFromPrompt sync.Mutex
	GetConfluentTokenAndCredentialsFromPromptFunc func(cmd *github_com_spf13_cobra.Command, client *github_com_confluentinc_mds_sdk_go_mdsv1.APIClient) (string, *github_com_confluentinc_cli_internal_pkg_auth.Credentials, error)

	calls struct {
		GetCCloudTokenAndCredentialsFromEnvVar []struct {
			Cmd    *github_com_spf13_cobra.Command
			Client *github_com_confluentinc_ccloud_sdk_go.Client
		}
		GetCCloudTokenAndCredentialsFromNetrc []struct {
			Cmd          *github_com_spf13_cobra.Command
			Client       *github_com_confluentinc_ccloud_sdk_go.Client
			Url          string
			FilterParams github_com_confluentinc_cli_internal_pkg_netrc.GetMatchingNetrcMachineParams
		}
		GetCCloudTokenAndCredentialsFromPrompt []struct {
			Cmd    *github_com_spf13_cobra.Command
			Client *github_com_confluentinc_ccloud_sdk_go.Client
			Url    string
		}
		GetConfluentTokenAndCredentialsFromEnvVar []struct {
			Cmd    *github_com_spf13_cobra.Command
			Client *github_com_confluentinc_mds_sdk_go_mdsv1.APIClient
		}
		GetConfluentTokenAndCredentialsFromNetrc []struct {
			Cmd          *github_com_spf13_cobra.Command
			Client       *github_com_confluentinc_mds_sdk_go_mdsv1.APIClient
			FilterParams github_com_confluentinc_cli_internal_pkg_netrc.GetMatchingNetrcMachineParams
		}
		GetConfluentTokenAndCredentialsFromPrompt []struct {
			Cmd    *github_com_spf13_cobra.Command
			Client *github_com_confluentinc_mds_sdk_go_mdsv1.APIClient
		}
	}
}

// GetCCloudTokenAndCredentialsFromEnvVar mocks base method by wrapping the associated func.
func (m *MockLoginTokenHandler) GetCCloudTokenAndCredentialsFromEnvVar(cmd *github_com_spf13_cobra.Command, client *github_com_confluentinc_ccloud_sdk_go.Client) (string, *github_com_confluentinc_cli_internal_pkg_auth.Credentials, error) {
	m.lockGetCCloudTokenAndCredentialsFromEnvVar.Lock()
	defer m.lockGetCCloudTokenAndCredentialsFromEnvVar.Unlock()

	if m.GetCCloudTokenAndCredentialsFromEnvVarFunc == nil {
		panic("mocker: MockLoginTokenHandler.GetCCloudTokenAndCredentialsFromEnvVarFunc is nil but MockLoginTokenHandler.GetCCloudTokenAndCredentialsFromEnvVar was called.")
	}

	call := struct {
		Cmd    *github_com_spf13_cobra.Command
		Client *github_com_confluentinc_ccloud_sdk_go.Client
	}{
		Cmd:    cmd,
		Client: client,
	}

	m.calls.GetCCloudTokenAndCredentialsFromEnvVar = append(m.calls.GetCCloudTokenAndCredentialsFromEnvVar, call)

	return m.GetCCloudTokenAndCredentialsFromEnvVarFunc(cmd, client)
}

// GetCCloudTokenAndCredentialsFromEnvVarCalled returns true if GetCCloudTokenAndCredentialsFromEnvVar was called at least once.
func (m *MockLoginTokenHandler) GetCCloudTokenAndCredentialsFromEnvVarCalled() bool {
	m.lockGetCCloudTokenAndCredentialsFromEnvVar.Lock()
	defer m.lockGetCCloudTokenAndCredentialsFromEnvVar.Unlock()

	return len(m.calls.GetCCloudTokenAndCredentialsFromEnvVar) > 0
}

// GetCCloudTokenAndCredentialsFromEnvVarCalls returns the calls made to GetCCloudTokenAndCredentialsFromEnvVar.
func (m *MockLoginTokenHandler) GetCCloudTokenAndCredentialsFromEnvVarCalls() []struct {
	Cmd    *github_com_spf13_cobra.Command
	Client *github_com_confluentinc_ccloud_sdk_go.Client
} {
	m.lockGetCCloudTokenAndCredentialsFromEnvVar.Lock()
	defer m.lockGetCCloudTokenAndCredentialsFromEnvVar.Unlock()

	return m.calls.GetCCloudTokenAndCredentialsFromEnvVar
}

// GetCCloudTokenAndCredentialsFromNetrc mocks base method by wrapping the associated func.
func (m *MockLoginTokenHandler) GetCCloudTokenAndCredentialsFromNetrc(cmd *github_com_spf13_cobra.Command, client *github_com_confluentinc_ccloud_sdk_go.Client, url string, filterParams github_com_confluentinc_cli_internal_pkg_netrc.GetMatchingNetrcMachineParams) (string, *github_com_confluentinc_cli_internal_pkg_auth.Credentials, error) {
	m.lockGetCCloudTokenAndCredentialsFromNetrc.Lock()
	defer m.lockGetCCloudTokenAndCredentialsFromNetrc.Unlock()

	if m.GetCCloudTokenAndCredentialsFromNetrcFunc == nil {
		panic("mocker: MockLoginTokenHandler.GetCCloudTokenAndCredentialsFromNetrcFunc is nil but MockLoginTokenHandler.GetCCloudTokenAndCredentialsFromNetrc was called.")
	}

	call := struct {
		Cmd          *github_com_spf13_cobra.Command
		Client       *github_com_confluentinc_ccloud_sdk_go.Client
		Url          string
		FilterParams github_com_confluentinc_cli_internal_pkg_netrc.GetMatchingNetrcMachineParams
	}{
		Cmd:          cmd,
		Client:       client,
		Url:          url,
		FilterParams: filterParams,
	}

	m.calls.GetCCloudTokenAndCredentialsFromNetrc = append(m.calls.GetCCloudTokenAndCredentialsFromNetrc, call)

	return m.GetCCloudTokenAndCredentialsFromNetrcFunc(cmd, client, url, filterParams)
}

// GetCCloudTokenAndCredentialsFromNetrcCalled returns true if GetCCloudTokenAndCredentialsFromNetrc was called at least once.
func (m *MockLoginTokenHandler) GetCCloudTokenAndCredentialsFromNetrcCalled() bool {
	m.lockGetCCloudTokenAndCredentialsFromNetrc.Lock()
	defer m.lockGetCCloudTokenAndCredentialsFromNetrc.Unlock()

	return len(m.calls.GetCCloudTokenAndCredentialsFromNetrc) > 0
}

// GetCCloudTokenAndCredentialsFromNetrcCalls returns the calls made to GetCCloudTokenAndCredentialsFromNetrc.
func (m *MockLoginTokenHandler) GetCCloudTokenAndCredentialsFromNetrcCalls() []struct {
	Cmd          *github_com_spf13_cobra.Command
	Client       *github_com_confluentinc_ccloud_sdk_go.Client
	Url          string
	FilterParams github_com_confluentinc_cli_internal_pkg_netrc.GetMatchingNetrcMachineParams
} {
	m.lockGetCCloudTokenAndCredentialsFromNetrc.Lock()
	defer m.lockGetCCloudTokenAndCredentialsFromNetrc.Unlock()

	return m.calls.GetCCloudTokenAndCredentialsFromNetrc
}

// GetCCloudTokenAndCredentialsFromPrompt mocks base method by wrapping the associated func.
func (m *MockLoginTokenHandler) GetCCloudTokenAndCredentialsFromPrompt(cmd *github_com_spf13_cobra.Command, client *github_com_confluentinc_ccloud_sdk_go.Client, url string) (string, *github_com_confluentinc_cli_internal_pkg_auth.Credentials, error) {
	m.lockGetCCloudTokenAndCredentialsFromPrompt.Lock()
	defer m.lockGetCCloudTokenAndCredentialsFromPrompt.Unlock()

	if m.GetCCloudTokenAndCredentialsFromPromptFunc == nil {
		panic("mocker: MockLoginTokenHandler.GetCCloudTokenAndCredentialsFromPromptFunc is nil but MockLoginTokenHandler.GetCCloudTokenAndCredentialsFromPrompt was called.")
	}

	call := struct {
		Cmd    *github_com_spf13_cobra.Command
		Client *github_com_confluentinc_ccloud_sdk_go.Client
		Url    string
	}{
		Cmd:    cmd,
		Client: client,
		Url:    url,
	}

	m.calls.GetCCloudTokenAndCredentialsFromPrompt = append(m.calls.GetCCloudTokenAndCredentialsFromPrompt, call)

	return m.GetCCloudTokenAndCredentialsFromPromptFunc(cmd, client, url)
}

// GetCCloudTokenAndCredentialsFromPromptCalled returns true if GetCCloudTokenAndCredentialsFromPrompt was called at least once.
func (m *MockLoginTokenHandler) GetCCloudTokenAndCredentialsFromPromptCalled() bool {
	m.lockGetCCloudTokenAndCredentialsFromPrompt.Lock()
	defer m.lockGetCCloudTokenAndCredentialsFromPrompt.Unlock()

	return len(m.calls.GetCCloudTokenAndCredentialsFromPrompt) > 0
}

// GetCCloudTokenAndCredentialsFromPromptCalls returns the calls made to GetCCloudTokenAndCredentialsFromPrompt.
func (m *MockLoginTokenHandler) GetCCloudTokenAndCredentialsFromPromptCalls() []struct {
	Cmd    *github_com_spf13_cobra.Command
	Client *github_com_confluentinc_ccloud_sdk_go.Client
	Url    string
} {
	m.lockGetCCloudTokenAndCredentialsFromPrompt.Lock()
	defer m.lockGetCCloudTokenAndCredentialsFromPrompt.Unlock()

	return m.calls.GetCCloudTokenAndCredentialsFromPrompt
}

// GetConfluentTokenAndCredentialsFromEnvVar mocks base method by wrapping the associated func.
func (m *MockLoginTokenHandler) GetConfluentTokenAndCredentialsFromEnvVar(cmd *github_com_spf13_cobra.Command, client *github_com_confluentinc_mds_sdk_go_mdsv1.APIClient) (string, *github_com_confluentinc_cli_internal_pkg_auth.Credentials, error) {
	m.lockGetConfluentTokenAndCredentialsFromEnvVar.Lock()
	defer m.lockGetConfluentTokenAndCredentialsFromEnvVar.Unlock()

	if m.GetConfluentTokenAndCredentialsFromEnvVarFunc == nil {
		panic("mocker: MockLoginTokenHandler.GetConfluentTokenAndCredentialsFromEnvVarFunc is nil but MockLoginTokenHandler.GetConfluentTokenAndCredentialsFromEnvVar was called.")
	}

	call := struct {
		Cmd    *github_com_spf13_cobra.Command
		Client *github_com_confluentinc_mds_sdk_go_mdsv1.APIClient
	}{
		Cmd:    cmd,
		Client: client,
	}

	m.calls.GetConfluentTokenAndCredentialsFromEnvVar = append(m.calls.GetConfluentTokenAndCredentialsFromEnvVar, call)

	return m.GetConfluentTokenAndCredentialsFromEnvVarFunc(cmd, client)
}

// GetConfluentTokenAndCredentialsFromEnvVarCalled returns true if GetConfluentTokenAndCredentialsFromEnvVar was called at least once.
func (m *MockLoginTokenHandler) GetConfluentTokenAndCredentialsFromEnvVarCalled() bool {
	m.lockGetConfluentTokenAndCredentialsFromEnvVar.Lock()
	defer m.lockGetConfluentTokenAndCredentialsFromEnvVar.Unlock()

	return len(m.calls.GetConfluentTokenAndCredentialsFromEnvVar) > 0
}

// GetConfluentTokenAndCredentialsFromEnvVarCalls returns the calls made to GetConfluentTokenAndCredentialsFromEnvVar.
func (m *MockLoginTokenHandler) GetConfluentTokenAndCredentialsFromEnvVarCalls() []struct {
	Cmd    *github_com_spf13_cobra.Command
	Client *github_com_confluentinc_mds_sdk_go_mdsv1.APIClient
} {
	m.lockGetConfluentTokenAndCredentialsFromEnvVar.Lock()
	defer m.lockGetConfluentTokenAndCredentialsFromEnvVar.Unlock()

	return m.calls.GetConfluentTokenAndCredentialsFromEnvVar
}

// GetConfluentTokenAndCredentialsFromNetrc mocks base method by wrapping the associated func.
func (m *MockLoginTokenHandler) GetConfluentTokenAndCredentialsFromNetrc(cmd *github_com_spf13_cobra.Command, client *github_com_confluentinc_mds_sdk_go_mdsv1.APIClient, filterParams github_com_confluentinc_cli_internal_pkg_netrc.GetMatchingNetrcMachineParams) (string, *github_com_confluentinc_cli_internal_pkg_auth.Credentials, error) {
	m.lockGetConfluentTokenAndCredentialsFromNetrc.Lock()
	defer m.lockGetConfluentTokenAndCredentialsFromNetrc.Unlock()

	if m.GetConfluentTokenAndCredentialsFromNetrcFunc == nil {
		panic("mocker: MockLoginTokenHandler.GetConfluentTokenAndCredentialsFromNetrcFunc is nil but MockLoginTokenHandler.GetConfluentTokenAndCredentialsFromNetrc was called.")
	}

	call := struct {
		Cmd          *github_com_spf13_cobra.Command
		Client       *github_com_confluentinc_mds_sdk_go_mdsv1.APIClient
		FilterParams github_com_confluentinc_cli_internal_pkg_netrc.GetMatchingNetrcMachineParams
	}{
		Cmd:          cmd,
		Client:       client,
		FilterParams: filterParams,
	}

	m.calls.GetConfluentTokenAndCredentialsFromNetrc = append(m.calls.GetConfluentTokenAndCredentialsFromNetrc, call)

	return m.GetConfluentTokenAndCredentialsFromNetrcFunc(cmd, client, filterParams)
}

// GetConfluentTokenAndCredentialsFromNetrcCalled returns true if GetConfluentTokenAndCredentialsFromNetrc was called at least once.
func (m *MockLoginTokenHandler) GetConfluentTokenAndCredentialsFromNetrcCalled() bool {
	m.lockGetConfluentTokenAndCredentialsFromNetrc.Lock()
	defer m.lockGetConfluentTokenAndCredentialsFromNetrc.Unlock()

	return len(m.calls.GetConfluentTokenAndCredentialsFromNetrc) > 0
}

// GetConfluentTokenAndCredentialsFromNetrcCalls returns the calls made to GetConfluentTokenAndCredentialsFromNetrc.
func (m *MockLoginTokenHandler) GetConfluentTokenAndCredentialsFromNetrcCalls() []struct {
	Cmd          *github_com_spf13_cobra.Command
	Client       *github_com_confluentinc_mds_sdk_go_mdsv1.APIClient
	FilterParams github_com_confluentinc_cli_internal_pkg_netrc.GetMatchingNetrcMachineParams
} {
	m.lockGetConfluentTokenAndCredentialsFromNetrc.Lock()
	defer m.lockGetConfluentTokenAndCredentialsFromNetrc.Unlock()

	return m.calls.GetConfluentTokenAndCredentialsFromNetrc
}

// GetConfluentTokenAndCredentialsFromPrompt mocks base method by wrapping the associated func.
func (m *MockLoginTokenHandler) GetConfluentTokenAndCredentialsFromPrompt(cmd *github_com_spf13_cobra.Command, client *github_com_confluentinc_mds_sdk_go_mdsv1.APIClient) (string, *github_com_confluentinc_cli_internal_pkg_auth.Credentials, error) {
	m.lockGetConfluentTokenAndCredentialsFromPrompt.Lock()
	defer m.lockGetConfluentTokenAndCredentialsFromPrompt.Unlock()

	if m.GetConfluentTokenAndCredentialsFromPromptFunc == nil {
		panic("mocker: MockLoginTokenHandler.GetConfluentTokenAndCredentialsFromPromptFunc is nil but MockLoginTokenHandler.GetConfluentTokenAndCredentialsFromPrompt was called.")
	}

	call := struct {
		Cmd    *github_com_spf13_cobra.Command
		Client *github_com_confluentinc_mds_sdk_go_mdsv1.APIClient
	}{
		Cmd:    cmd,
		Client: client,
	}

	m.calls.GetConfluentTokenAndCredentialsFromPrompt = append(m.calls.GetConfluentTokenAndCredentialsFromPrompt, call)

	return m.GetConfluentTokenAndCredentialsFromPromptFunc(cmd, client)
}

// GetConfluentTokenAndCredentialsFromPromptCalled returns true if GetConfluentTokenAndCredentialsFromPrompt was called at least once.
func (m *MockLoginTokenHandler) GetConfluentTokenAndCredentialsFromPromptCalled() bool {
	m.lockGetConfluentTokenAndCredentialsFromPrompt.Lock()
	defer m.lockGetConfluentTokenAndCredentialsFromPrompt.Unlock()

	return len(m.calls.GetConfluentTokenAndCredentialsFromPrompt) > 0
}

// GetConfluentTokenAndCredentialsFromPromptCalls returns the calls made to GetConfluentTokenAndCredentialsFromPrompt.
func (m *MockLoginTokenHandler) GetConfluentTokenAndCredentialsFromPromptCalls() []struct {
	Cmd    *github_com_spf13_cobra.Command
	Client *github_com_confluentinc_mds_sdk_go_mdsv1.APIClient
} {
	m.lockGetConfluentTokenAndCredentialsFromPrompt.Lock()
	defer m.lockGetConfluentTokenAndCredentialsFromPrompt.Unlock()

	return m.calls.GetConfluentTokenAndCredentialsFromPrompt
}

// Reset resets the calls made to the mocked methods.
func (m *MockLoginTokenHandler) Reset() {
	m.lockGetCCloudTokenAndCredentialsFromEnvVar.Lock()
	m.calls.GetCCloudTokenAndCredentialsFromEnvVar = nil
	m.lockGetCCloudTokenAndCredentialsFromEnvVar.Unlock()
	m.lockGetCCloudTokenAndCredentialsFromNetrc.Lock()
	m.calls.GetCCloudTokenAndCredentialsFromNetrc = nil
	m.lockGetCCloudTokenAndCredentialsFromNetrc.Unlock()
	m.lockGetCCloudTokenAndCredentialsFromPrompt.Lock()
	m.calls.GetCCloudTokenAndCredentialsFromPrompt = nil
	m.lockGetCCloudTokenAndCredentialsFromPrompt.Unlock()
	m.lockGetConfluentTokenAndCredentialsFromEnvVar.Lock()
	m.calls.GetConfluentTokenAndCredentialsFromEnvVar = nil
	m.lockGetConfluentTokenAndCredentialsFromEnvVar.Unlock()
	m.lockGetConfluentTokenAndCredentialsFromNetrc.Lock()
	m.calls.GetConfluentTokenAndCredentialsFromNetrc = nil
	m.lockGetConfluentTokenAndCredentialsFromNetrc.Unlock()
	m.lockGetConfluentTokenAndCredentialsFromPrompt.Lock()
	m.calls.GetConfluentTokenAndCredentialsFromPrompt = nil
	m.lockGetConfluentTokenAndCredentialsFromPrompt.Unlock()
}
