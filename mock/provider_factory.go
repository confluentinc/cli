// Code generated by mocker. DO NOT EDIT.
// github.com/travisjeffery/mocker
// Source: cli.go

package mock

import (
	sync "sync"

	github_com_confluentinc_cli_command_common "github.com/confluentinc/cli/command/common"
)

// ProviderFactory is a mock of ProviderFactory interface
type ProviderFactory struct {
	lockCreateProvider sync.Mutex
	CreateProviderFunc func(name string) github_com_confluentinc_cli_command_common.Provider

	calls struct {
		CreateProvider []struct {
			Name string
		}
	}
}

// CreateProvider mocks base method by wrapping the associated func.
func (m *ProviderFactory) CreateProvider(name string) github_com_confluentinc_cli_command_common.Provider {
	m.lockCreateProvider.Lock()
	defer m.lockCreateProvider.Unlock()

	if m.CreateProviderFunc == nil {
		panic("mocker: ProviderFactory.CreateProviderFunc is nil but ProviderFactory.CreateProvider was called.")
	}

	call := struct {
		Name string
	}{
		Name: name,
	}

	m.calls.CreateProvider = append(m.calls.CreateProvider, call)

	return m.CreateProviderFunc(name)
}

// CreateProviderCalled returns true if CreateProvider was called at least once.
func (m *ProviderFactory) CreateProviderCalled() bool {
	m.lockCreateProvider.Lock()
	defer m.lockCreateProvider.Unlock()

	return len(m.calls.CreateProvider) > 0
}

// CreateProviderCalls returns the calls made to CreateProvider.
func (m *ProviderFactory) CreateProviderCalls() []struct {
	Name string
} {
	m.lockCreateProvider.Lock()
	defer m.lockCreateProvider.Unlock()

	return m.calls.CreateProvider
}

// Reset resets the calls made to the mocked methods.
func (m *ProviderFactory) Reset() {
	m.lockCreateProvider.Lock()
	m.calls.CreateProvider = nil
	m.lockCreateProvider.Unlock()
}
