// Code generated by mocker. DO NOT EDIT.
// github.com/travisjeffery/mocker
// Source: pkg/auth/auth_token_handler.go

package mock

import (
	sync "sync"

	github_com_confluentinc_ccloud_sdk_go_v1_public "github.com/confluentinc/ccloud-sdk-go-v1-public"
	github_com_confluentinc_cli_v3_pkg_auth "github.com/confluentinc/cli/v3/pkg/auth"
	github_com_confluentinc_mds_sdk_go_public_mdsv1 "github.com/confluentinc/mds-sdk-go-public/mdsv1"
)

// AuthTokenHandler is a mock of AuthTokenHandler interface
type AuthTokenHandler struct {
	lockGetCCloudTokens sync.Mutex
	GetCCloudTokensFunc func(clientFactory github_com_confluentinc_cli_v3_pkg_auth.CCloudClientFactory, url string, credentials *github_com_confluentinc_cli_v3_pkg_auth.Credentials, noBrowser bool, orgResourceId string) (string, string, error)

	lockGetConfluentToken sync.Mutex
	GetConfluentTokenFunc func(mdsClient *github_com_confluentinc_mds_sdk_go_public_mdsv1.APIClient, credentials *github_com_confluentinc_cli_v3_pkg_auth.Credentials) (string, error)

	lockRevokeRefreshToken sync.Mutex
	RevokeRefreshTokenFunc func(client *github_com_confluentinc_ccloud_sdk_go_v1_public.Client, url string, credentials *github_com_confluentinc_cli_v3_pkg_auth.Credentials) error

	calls struct {
		GetCCloudTokens []struct {
			ClientFactory github_com_confluentinc_cli_v3_pkg_auth.CCloudClientFactory
			Url           string
			Credentials   *github_com_confluentinc_cli_v3_pkg_auth.Credentials
			NoBrowser     bool
			OrgResourceId string
		}
		GetConfluentToken []struct {
			MdsClient   *github_com_confluentinc_mds_sdk_go_public_mdsv1.APIClient
			Credentials *github_com_confluentinc_cli_v3_pkg_auth.Credentials
		}
		RevokeRefreshToken []struct {
			Client      *github_com_confluentinc_ccloud_sdk_go_v1_public.Client
			Url         string
			Credentials *github_com_confluentinc_cli_v3_pkg_auth.Credentials
		}
	}
}

// GetCCloudTokens mocks base method by wrapping the associated func.
func (m *AuthTokenHandler) GetCCloudTokens(clientFactory github_com_confluentinc_cli_v3_pkg_auth.CCloudClientFactory, url string, credentials *github_com_confluentinc_cli_v3_pkg_auth.Credentials, noBrowser bool, orgResourceId string) (string, string, error) {
	m.lockGetCCloudTokens.Lock()
	defer m.lockGetCCloudTokens.Unlock()

	if m.GetCCloudTokensFunc == nil {
		panic("mocker: AuthTokenHandler.GetCCloudTokensFunc is nil but AuthTokenHandler.GetCCloudTokens was called.")
	}

	call := struct {
		ClientFactory github_com_confluentinc_cli_v3_pkg_auth.CCloudClientFactory
		Url           string
		Credentials   *github_com_confluentinc_cli_v3_pkg_auth.Credentials
		NoBrowser     bool
		OrgResourceId string
	}{
		ClientFactory: clientFactory,
		Url:           url,
		Credentials:   credentials,
		NoBrowser:     noBrowser,
		OrgResourceId: orgResourceId,
	}

	m.calls.GetCCloudTokens = append(m.calls.GetCCloudTokens, call)

	return m.GetCCloudTokensFunc(clientFactory, url, credentials, noBrowser, orgResourceId)
}

// GetCCloudTokensCalled returns true if GetCCloudTokens was called at least once.
func (m *AuthTokenHandler) GetCCloudTokensCalled() bool {
	m.lockGetCCloudTokens.Lock()
	defer m.lockGetCCloudTokens.Unlock()

	return len(m.calls.GetCCloudTokens) > 0
}

// GetCCloudTokensCalls returns the calls made to GetCCloudTokens.
func (m *AuthTokenHandler) GetCCloudTokensCalls() []struct {
	ClientFactory github_com_confluentinc_cli_v3_pkg_auth.CCloudClientFactory
	Url           string
	Credentials   *github_com_confluentinc_cli_v3_pkg_auth.Credentials
	NoBrowser     bool
	OrgResourceId string
} {
	m.lockGetCCloudTokens.Lock()
	defer m.lockGetCCloudTokens.Unlock()

	return m.calls.GetCCloudTokens
}

// GetConfluentToken mocks base method by wrapping the associated func.
func (m *AuthTokenHandler) GetConfluentToken(mdsClient *github_com_confluentinc_mds_sdk_go_public_mdsv1.APIClient, credentials *github_com_confluentinc_cli_v3_pkg_auth.Credentials) (string, error) {
	m.lockGetConfluentToken.Lock()
	defer m.lockGetConfluentToken.Unlock()

	if m.GetConfluentTokenFunc == nil {
		panic("mocker: AuthTokenHandler.GetConfluentTokenFunc is nil but AuthTokenHandler.GetConfluentToken was called.")
	}

	call := struct {
		MdsClient   *github_com_confluentinc_mds_sdk_go_public_mdsv1.APIClient
		Credentials *github_com_confluentinc_cli_v3_pkg_auth.Credentials
	}{
		MdsClient:   mdsClient,
		Credentials: credentials,
	}

	m.calls.GetConfluentToken = append(m.calls.GetConfluentToken, call)

	return m.GetConfluentTokenFunc(mdsClient, credentials)
}

// GetConfluentTokenCalled returns true if GetConfluentToken was called at least once.
func (m *AuthTokenHandler) GetConfluentTokenCalled() bool {
	m.lockGetConfluentToken.Lock()
	defer m.lockGetConfluentToken.Unlock()

	return len(m.calls.GetConfluentToken) > 0
}

// GetConfluentTokenCalls returns the calls made to GetConfluentToken.
func (m *AuthTokenHandler) GetConfluentTokenCalls() []struct {
	MdsClient   *github_com_confluentinc_mds_sdk_go_public_mdsv1.APIClient
	Credentials *github_com_confluentinc_cli_v3_pkg_auth.Credentials
} {
	m.lockGetConfluentToken.Lock()
	defer m.lockGetConfluentToken.Unlock()

	return m.calls.GetConfluentToken
}

// RevokeRefreshToken mocks base method by wrapping the associated func.
func (m *AuthTokenHandler) RevokeRefreshToken(client *github_com_confluentinc_ccloud_sdk_go_v1_public.Client, url string, credentials *github_com_confluentinc_cli_v3_pkg_auth.Credentials) error {
	m.lockRevokeRefreshToken.Lock()
	defer m.lockRevokeRefreshToken.Unlock()

	if m.RevokeRefreshTokenFunc == nil {
		panic("mocker: AuthTokenHandler.RevokeRefreshTokenFunc is nil but AuthTokenHandler.RevokeRefreshToken was called.")
	}

	call := struct {
		Client      *github_com_confluentinc_ccloud_sdk_go_v1_public.Client
		Url         string
		Credentials *github_com_confluentinc_cli_v3_pkg_auth.Credentials
	}{
		Client:      client,
		Url:         url,
		Credentials: credentials,
	}

	m.calls.RevokeRefreshToken = append(m.calls.RevokeRefreshToken, call)

	return m.RevokeRefreshTokenFunc(client, url, credentials)
}

// RevokeRefreshTokenCalled returns true if RevokeRefreshToken was called at least once.
func (m *AuthTokenHandler) RevokeRefreshTokenCalled() bool {
	m.lockRevokeRefreshToken.Lock()
	defer m.lockRevokeRefreshToken.Unlock()

	return len(m.calls.RevokeRefreshToken) > 0
}

// RevokeRefreshTokenCalls returns the calls made to RevokeRefreshToken.
func (m *AuthTokenHandler) RevokeRefreshTokenCalls() []struct {
	Client      *github_com_confluentinc_ccloud_sdk_go_v1_public.Client
	Url         string
	Credentials *github_com_confluentinc_cli_v3_pkg_auth.Credentials
} {
	m.lockRevokeRefreshToken.Lock()
	defer m.lockRevokeRefreshToken.Unlock()

	return m.calls.RevokeRefreshToken
}

// Reset resets the calls made to the mocked methods.
func (m *AuthTokenHandler) Reset() {
	m.lockGetCCloudTokens.Lock()
	m.calls.GetCCloudTokens = nil
	m.lockGetCCloudTokens.Unlock()
	m.lockGetConfluentToken.Lock()
	m.calls.GetConfluentToken = nil
	m.lockGetConfluentToken.Unlock()
	m.lockRevokeRefreshToken.Lock()
	m.calls.RevokeRefreshToken = nil
	m.lockRevokeRefreshToken.Unlock()
}
