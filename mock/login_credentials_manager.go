// Code generated by mocker. DO NOT EDIT.
// github.com/travisjeffery/mocker
// Source: login_credentials_manager.go

package mock

import (
	sync "sync"

	github_com_confluentinc_ccloud_sdk_go "github.com/confluentinc/ccloud-sdk-go"
	github_com_spf13_cobra "github.com/spf13/cobra"

	github_com_confluentinc_cli_internal_pkg_auth "github.com/confluentinc/cli/internal/pkg/auth"
	github_com_confluentinc_cli_internal_pkg_netrc "github.com/confluentinc/cli/internal/pkg/netrc"
)

// MockLoginCredentialsManager is a mock of LoginCredentialsManager interface
type MockLoginCredentialsManager struct {
	lockGetCCloudCredentialsFromEnvVar sync.Mutex
	GetCCloudCredentialsFromEnvVarFunc func(cmd *github_com_spf13_cobra.Command) func() (*github_com_confluentinc_cli_internal_pkg_auth.Credentials, error)

	lockGetCCloudCredentialsFromNetrc sync.Mutex
	GetCCloudCredentialsFromNetrcFunc func(cmd *github_com_spf13_cobra.Command, filterParams github_com_confluentinc_cli_internal_pkg_netrc.GetMatchingNetrcMachineParams) func() (*github_com_confluentinc_cli_internal_pkg_auth.Credentials, error)

	lockGetCCloudCredentialsFromPrompt sync.Mutex
	GetCCloudCredentialsFromPromptFunc func(cmd *github_com_spf13_cobra.Command, client *github_com_confluentinc_ccloud_sdk_go.Client) func() (*github_com_confluentinc_cli_internal_pkg_auth.Credentials, error)

	lockGetConfluentCredentialsFromEnvVar sync.Mutex
	GetConfluentCredentialsFromEnvVarFunc func(cmd *github_com_spf13_cobra.Command) func() (*github_com_confluentinc_cli_internal_pkg_auth.Credentials, error)

	lockGetConfluentCredentialsFromNetrc sync.Mutex
	GetConfluentCredentialsFromNetrcFunc func(cmd *github_com_spf13_cobra.Command, filterParams github_com_confluentinc_cli_internal_pkg_netrc.GetMatchingNetrcMachineParams) func() (*github_com_confluentinc_cli_internal_pkg_auth.Credentials, error)

	lockGetConfluentCredentialsFromPrompt sync.Mutex
	GetConfluentCredentialsFromPromptFunc func(cmd *github_com_spf13_cobra.Command) func() (*github_com_confluentinc_cli_internal_pkg_auth.Credentials, error)

	calls struct {
		GetCCloudCredentialsFromEnvVar []struct {
			Cmd *github_com_spf13_cobra.Command
		}
		GetCCloudCredentialsFromNetrc []struct {
			Cmd          *github_com_spf13_cobra.Command
			FilterParams github_com_confluentinc_cli_internal_pkg_netrc.GetMatchingNetrcMachineParams
		}
		GetCCloudCredentialsFromPrompt []struct {
			Cmd    *github_com_spf13_cobra.Command
			Client *github_com_confluentinc_ccloud_sdk_go.Client
		}
		GetConfluentCredentialsFromEnvVar []struct {
			Cmd *github_com_spf13_cobra.Command
		}
		GetConfluentCredentialsFromNetrc []struct {
			Cmd          *github_com_spf13_cobra.Command
			FilterParams github_com_confluentinc_cli_internal_pkg_netrc.GetMatchingNetrcMachineParams
		}
		GetConfluentCredentialsFromPrompt []struct {
			Cmd *github_com_spf13_cobra.Command
		}
	}
}

// GetCCloudCredentialsFromEnvVar mocks base method by wrapping the associated func.
func (m *MockLoginCredentialsManager) GetCCloudCredentialsFromEnvVar(cmd *github_com_spf13_cobra.Command) func() (*github_com_confluentinc_cli_internal_pkg_auth.Credentials, error) {
	m.lockGetCCloudCredentialsFromEnvVar.Lock()
	defer m.lockGetCCloudCredentialsFromEnvVar.Unlock()

	if m.GetCCloudCredentialsFromEnvVarFunc == nil {
		panic("mocker: MockLoginCredentialsManager.GetCCloudCredentialsFromEnvVarFunc is nil but MockLoginCredentialsManager.GetCCloudCredentialsFromEnvVar was called.")
	}

	call := struct {
		Cmd *github_com_spf13_cobra.Command
	}{
		Cmd: cmd,
	}

	m.calls.GetCCloudCredentialsFromEnvVar = append(m.calls.GetCCloudCredentialsFromEnvVar, call)

	return m.GetCCloudCredentialsFromEnvVarFunc(cmd)
}

// GetCCloudCredentialsFromEnvVarCalled returns true if GetCCloudCredentialsFromEnvVar was called at least once.
func (m *MockLoginCredentialsManager) GetCCloudCredentialsFromEnvVarCalled() bool {
	m.lockGetCCloudCredentialsFromEnvVar.Lock()
	defer m.lockGetCCloudCredentialsFromEnvVar.Unlock()

	return len(m.calls.GetCCloudCredentialsFromEnvVar) > 0
}

// GetCCloudCredentialsFromEnvVarCalls returns the calls made to GetCCloudCredentialsFromEnvVar.
func (m *MockLoginCredentialsManager) GetCCloudCredentialsFromEnvVarCalls() []struct {
	Cmd *github_com_spf13_cobra.Command
} {
	m.lockGetCCloudCredentialsFromEnvVar.Lock()
	defer m.lockGetCCloudCredentialsFromEnvVar.Unlock()

	return m.calls.GetCCloudCredentialsFromEnvVar
}

// GetCCloudCredentialsFromNetrc mocks base method by wrapping the associated func.
func (m *MockLoginCredentialsManager) GetCCloudCredentialsFromNetrc(cmd *github_com_spf13_cobra.Command, filterParams github_com_confluentinc_cli_internal_pkg_netrc.GetMatchingNetrcMachineParams) func() (*github_com_confluentinc_cli_internal_pkg_auth.Credentials, error) {
	m.lockGetCCloudCredentialsFromNetrc.Lock()
	defer m.lockGetCCloudCredentialsFromNetrc.Unlock()

	if m.GetCCloudCredentialsFromNetrcFunc == nil {
		panic("mocker: MockLoginCredentialsManager.GetCCloudCredentialsFromNetrcFunc is nil but MockLoginCredentialsManager.GetCCloudCredentialsFromNetrc was called.")
	}

	call := struct {
		Cmd          *github_com_spf13_cobra.Command
		FilterParams github_com_confluentinc_cli_internal_pkg_netrc.GetMatchingNetrcMachineParams
	}{
		Cmd:          cmd,
		FilterParams: filterParams,
	}

	m.calls.GetCCloudCredentialsFromNetrc = append(m.calls.GetCCloudCredentialsFromNetrc, call)

	return m.GetCCloudCredentialsFromNetrcFunc(cmd, filterParams)
}

// GetCCloudCredentialsFromNetrcCalled returns true if GetCCloudCredentialsFromNetrc was called at least once.
func (m *MockLoginCredentialsManager) GetCCloudCredentialsFromNetrcCalled() bool {
	m.lockGetCCloudCredentialsFromNetrc.Lock()
	defer m.lockGetCCloudCredentialsFromNetrc.Unlock()

	return len(m.calls.GetCCloudCredentialsFromNetrc) > 0
}

// GetCCloudCredentialsFromNetrcCalls returns the calls made to GetCCloudCredentialsFromNetrc.
func (m *MockLoginCredentialsManager) GetCCloudCredentialsFromNetrcCalls() []struct {
	Cmd          *github_com_spf13_cobra.Command
	FilterParams github_com_confluentinc_cli_internal_pkg_netrc.GetMatchingNetrcMachineParams
} {
	m.lockGetCCloudCredentialsFromNetrc.Lock()
	defer m.lockGetCCloudCredentialsFromNetrc.Unlock()

	return m.calls.GetCCloudCredentialsFromNetrc
}

// GetCCloudCredentialsFromPrompt mocks base method by wrapping the associated func.
func (m *MockLoginCredentialsManager) GetCCloudCredentialsFromPrompt(cmd *github_com_spf13_cobra.Command, client *github_com_confluentinc_ccloud_sdk_go.Client) func() (*github_com_confluentinc_cli_internal_pkg_auth.Credentials, error) {
	m.lockGetCCloudCredentialsFromPrompt.Lock()
	defer m.lockGetCCloudCredentialsFromPrompt.Unlock()

	if m.GetCCloudCredentialsFromPromptFunc == nil {
		panic("mocker: MockLoginCredentialsManager.GetCCloudCredentialsFromPromptFunc is nil but MockLoginCredentialsManager.GetCCloudCredentialsFromPrompt was called.")
	}

	call := struct {
		Cmd    *github_com_spf13_cobra.Command
		Client *github_com_confluentinc_ccloud_sdk_go.Client
	}{
		Cmd:    cmd,
		Client: client,
	}

	m.calls.GetCCloudCredentialsFromPrompt = append(m.calls.GetCCloudCredentialsFromPrompt, call)

	return m.GetCCloudCredentialsFromPromptFunc(cmd, client)
}

// GetCCloudCredentialsFromPromptCalled returns true if GetCCloudCredentialsFromPrompt was called at least once.
func (m *MockLoginCredentialsManager) GetCCloudCredentialsFromPromptCalled() bool {
	m.lockGetCCloudCredentialsFromPrompt.Lock()
	defer m.lockGetCCloudCredentialsFromPrompt.Unlock()

	return len(m.calls.GetCCloudCredentialsFromPrompt) > 0
}

// GetCCloudCredentialsFromPromptCalls returns the calls made to GetCCloudCredentialsFromPrompt.
func (m *MockLoginCredentialsManager) GetCCloudCredentialsFromPromptCalls() []struct {
	Cmd    *github_com_spf13_cobra.Command
	Client *github_com_confluentinc_ccloud_sdk_go.Client
} {
	m.lockGetCCloudCredentialsFromPrompt.Lock()
	defer m.lockGetCCloudCredentialsFromPrompt.Unlock()

	return m.calls.GetCCloudCredentialsFromPrompt
}

// GetConfluentCredentialsFromEnvVar mocks base method by wrapping the associated func.
func (m *MockLoginCredentialsManager) GetConfluentCredentialsFromEnvVar(cmd *github_com_spf13_cobra.Command) func() (*github_com_confluentinc_cli_internal_pkg_auth.Credentials, error) {
	m.lockGetConfluentCredentialsFromEnvVar.Lock()
	defer m.lockGetConfluentCredentialsFromEnvVar.Unlock()

	if m.GetConfluentCredentialsFromEnvVarFunc == nil {
		panic("mocker: MockLoginCredentialsManager.GetConfluentCredentialsFromEnvVarFunc is nil but MockLoginCredentialsManager.GetConfluentCredentialsFromEnvVar was called.")
	}

	call := struct {
		Cmd *github_com_spf13_cobra.Command
	}{
		Cmd: cmd,
	}

	m.calls.GetConfluentCredentialsFromEnvVar = append(m.calls.GetConfluentCredentialsFromEnvVar, call)

	return m.GetConfluentCredentialsFromEnvVarFunc(cmd)
}

// GetConfluentCredentialsFromEnvVarCalled returns true if GetConfluentCredentialsFromEnvVar was called at least once.
func (m *MockLoginCredentialsManager) GetConfluentCredentialsFromEnvVarCalled() bool {
	m.lockGetConfluentCredentialsFromEnvVar.Lock()
	defer m.lockGetConfluentCredentialsFromEnvVar.Unlock()

	return len(m.calls.GetConfluentCredentialsFromEnvVar) > 0
}

// GetConfluentCredentialsFromEnvVarCalls returns the calls made to GetConfluentCredentialsFromEnvVar.
func (m *MockLoginCredentialsManager) GetConfluentCredentialsFromEnvVarCalls() []struct {
	Cmd *github_com_spf13_cobra.Command
} {
	m.lockGetConfluentCredentialsFromEnvVar.Lock()
	defer m.lockGetConfluentCredentialsFromEnvVar.Unlock()

	return m.calls.GetConfluentCredentialsFromEnvVar
}

// GetConfluentCredentialsFromNetrc mocks base method by wrapping the associated func.
func (m *MockLoginCredentialsManager) GetConfluentCredentialsFromNetrc(cmd *github_com_spf13_cobra.Command, filterParams github_com_confluentinc_cli_internal_pkg_netrc.GetMatchingNetrcMachineParams) func() (*github_com_confluentinc_cli_internal_pkg_auth.Credentials, error) {
	m.lockGetConfluentCredentialsFromNetrc.Lock()
	defer m.lockGetConfluentCredentialsFromNetrc.Unlock()

	if m.GetConfluentCredentialsFromNetrcFunc == nil {
		panic("mocker: MockLoginCredentialsManager.GetConfluentCredentialsFromNetrcFunc is nil but MockLoginCredentialsManager.GetConfluentCredentialsFromNetrc was called.")
	}

	call := struct {
		Cmd          *github_com_spf13_cobra.Command
		FilterParams github_com_confluentinc_cli_internal_pkg_netrc.GetMatchingNetrcMachineParams
	}{
		Cmd:          cmd,
		FilterParams: filterParams,
	}

	m.calls.GetConfluentCredentialsFromNetrc = append(m.calls.GetConfluentCredentialsFromNetrc, call)

	return m.GetConfluentCredentialsFromNetrcFunc(cmd, filterParams)
}

// GetConfluentCredentialsFromNetrcCalled returns true if GetConfluentCredentialsFromNetrc was called at least once.
func (m *MockLoginCredentialsManager) GetConfluentCredentialsFromNetrcCalled() bool {
	m.lockGetConfluentCredentialsFromNetrc.Lock()
	defer m.lockGetConfluentCredentialsFromNetrc.Unlock()

	return len(m.calls.GetConfluentCredentialsFromNetrc) > 0
}

// GetConfluentCredentialsFromNetrcCalls returns the calls made to GetConfluentCredentialsFromNetrc.
func (m *MockLoginCredentialsManager) GetConfluentCredentialsFromNetrcCalls() []struct {
	Cmd          *github_com_spf13_cobra.Command
	FilterParams github_com_confluentinc_cli_internal_pkg_netrc.GetMatchingNetrcMachineParams
} {
	m.lockGetConfluentCredentialsFromNetrc.Lock()
	defer m.lockGetConfluentCredentialsFromNetrc.Unlock()

	return m.calls.GetConfluentCredentialsFromNetrc
}

// GetConfluentCredentialsFromPrompt mocks base method by wrapping the associated func.
func (m *MockLoginCredentialsManager) GetConfluentCredentialsFromPrompt(cmd *github_com_spf13_cobra.Command) func() (*github_com_confluentinc_cli_internal_pkg_auth.Credentials, error) {
	m.lockGetConfluentCredentialsFromPrompt.Lock()
	defer m.lockGetConfluentCredentialsFromPrompt.Unlock()

	if m.GetConfluentCredentialsFromPromptFunc == nil {
		panic("mocker: MockLoginCredentialsManager.GetConfluentCredentialsFromPromptFunc is nil but MockLoginCredentialsManager.GetConfluentCredentialsFromPrompt was called.")
	}

	call := struct {
		Cmd *github_com_spf13_cobra.Command
	}{
		Cmd: cmd,
	}

	m.calls.GetConfluentCredentialsFromPrompt = append(m.calls.GetConfluentCredentialsFromPrompt, call)

	return m.GetConfluentCredentialsFromPromptFunc(cmd)
}

// GetConfluentCredentialsFromPromptCalled returns true if GetConfluentCredentialsFromPrompt was called at least once.
func (m *MockLoginCredentialsManager) GetConfluentCredentialsFromPromptCalled() bool {
	m.lockGetConfluentCredentialsFromPrompt.Lock()
	defer m.lockGetConfluentCredentialsFromPrompt.Unlock()

	return len(m.calls.GetConfluentCredentialsFromPrompt) > 0
}

// GetConfluentCredentialsFromPromptCalls returns the calls made to GetConfluentCredentialsFromPrompt.
func (m *MockLoginCredentialsManager) GetConfluentCredentialsFromPromptCalls() []struct {
	Cmd *github_com_spf13_cobra.Command
} {
	m.lockGetConfluentCredentialsFromPrompt.Lock()
	defer m.lockGetConfluentCredentialsFromPrompt.Unlock()

	return m.calls.GetConfluentCredentialsFromPrompt
}

// Reset resets the calls made to the mocked methods.
func (m *MockLoginCredentialsManager) Reset() {
	m.lockGetCCloudCredentialsFromEnvVar.Lock()
	m.calls.GetCCloudCredentialsFromEnvVar = nil
	m.lockGetCCloudCredentialsFromEnvVar.Unlock()
	m.lockGetCCloudCredentialsFromNetrc.Lock()
	m.calls.GetCCloudCredentialsFromNetrc = nil
	m.lockGetCCloudCredentialsFromNetrc.Unlock()
	m.lockGetCCloudCredentialsFromPrompt.Lock()
	m.calls.GetCCloudCredentialsFromPrompt = nil
	m.lockGetCCloudCredentialsFromPrompt.Unlock()
	m.lockGetConfluentCredentialsFromEnvVar.Lock()
	m.calls.GetConfluentCredentialsFromEnvVar = nil
	m.lockGetConfluentCredentialsFromEnvVar.Unlock()
	m.lockGetConfluentCredentialsFromNetrc.Lock()
	m.calls.GetConfluentCredentialsFromNetrc = nil
	m.lockGetConfluentCredentialsFromNetrc.Unlock()
	m.lockGetConfluentCredentialsFromPrompt.Lock()
	m.calls.GetConfluentCredentialsFromPrompt = nil
	m.lockGetConfluentCredentialsFromPrompt.Unlock()
}
