// Code generated by mocker. DO NOT EDIT.
// github.com/travisjeffery/mocker
// Source: internal/pkg/auth/login_credentials_manager.go

package mock

import (
	sync "sync"

	github_com_confluentinc_ccloud_sdk_go_v1 "github.com/confluentinc/ccloud-sdk-go-v1"
	github_com_confluentinc_cli_internal_pkg_auth "github.com/confluentinc/cli/internal/pkg/auth"
	github_com_confluentinc_cli_internal_pkg_config_v3 "github.com/confluentinc/cli/internal/pkg/config/v3"
	github_com_confluentinc_cli_internal_pkg_netrc "github.com/confluentinc/cli/internal/pkg/netrc"
	github_com_spf13_cobra "github.com/spf13/cobra"
)

// LoginCredentialsManager is a mock of LoginCredentialsManager interface
type LoginCredentialsManager struct {
	lockGetCCloudCredentialsFromEnvVar sync.Mutex
	GetCCloudCredentialsFromEnvVarFunc func(cmd *github_com_spf13_cobra.Command) func() (*github_com_confluentinc_cli_internal_pkg_auth.Credentials, error)

	lockGetCCloudCredentialsFromPrompt sync.Mutex
	GetCCloudCredentialsFromPromptFunc func(cmd *github_com_spf13_cobra.Command) func() (*github_com_confluentinc_cli_internal_pkg_auth.Credentials, error)

	lockGetConfluentCredentialsFromEnvVar sync.Mutex
	GetConfluentCredentialsFromEnvVarFunc func(cmd *github_com_spf13_cobra.Command) func() (*github_com_confluentinc_cli_internal_pkg_auth.Credentials, error)

	lockGetConfluentCredentialsFromPrompt sync.Mutex
	GetConfluentCredentialsFromPromptFunc func(cmd *github_com_spf13_cobra.Command) func() (*github_com_confluentinc_cli_internal_pkg_auth.Credentials, error)

	lockGetCredentialsFromConfig sync.Mutex
	GetCredentialsFromConfigFunc func(cfg *github_com_confluentinc_cli_internal_pkg_config_v3.Config, filterParams github_com_confluentinc_cli_internal_pkg_netrc.GetMatchingNetrcMachineParams) func() (*github_com_confluentinc_cli_internal_pkg_auth.Credentials, error)

	lockGetCredentialsFromNetrc sync.Mutex
	GetCredentialsFromNetrcFunc func(cmd *github_com_spf13_cobra.Command, filterParams github_com_confluentinc_cli_internal_pkg_netrc.GetMatchingNetrcMachineParams) func() (*github_com_confluentinc_cli_internal_pkg_auth.Credentials, error)

	lockGetConfluentPrerunCredentialsFromEnvVar sync.Mutex
	GetConfluentPrerunCredentialsFromEnvVarFunc func(cmd *github_com_spf13_cobra.Command) func() (*github_com_confluentinc_cli_internal_pkg_auth.Credentials, error)

	lockGetConfluentPrerunCredentialsFromNetrc sync.Mutex
	GetConfluentPrerunCredentialsFromNetrcFunc func(cmd *github_com_spf13_cobra.Command) func() (*github_com_confluentinc_cli_internal_pkg_auth.Credentials, error)

	lockSetCCloudClient sync.Mutex
	SetCCloudClientFunc func(client *github_com_confluentinc_ccloud_sdk_go_v1.Client)

	calls struct {
		GetCCloudCredentialsFromEnvVar []struct {
			Cmd *github_com_spf13_cobra.Command
		}
		GetCCloudCredentialsFromPrompt []struct {
			Cmd *github_com_spf13_cobra.Command
		}
		GetConfluentCredentialsFromEnvVar []struct {
			Cmd *github_com_spf13_cobra.Command
		}
		GetConfluentCredentialsFromPrompt []struct {
			Cmd *github_com_spf13_cobra.Command
		}
		GetCredentialsFromConfig []struct {
			Cfg          *github_com_confluentinc_cli_internal_pkg_config_v3.Config
			FilterParams github_com_confluentinc_cli_internal_pkg_netrc.GetMatchingNetrcMachineParams
		}
		GetCredentialsFromNetrc []struct {
			Cmd          *github_com_spf13_cobra.Command
			FilterParams github_com_confluentinc_cli_internal_pkg_netrc.GetMatchingNetrcMachineParams
		}
		GetConfluentPrerunCredentialsFromEnvVar []struct {
			Cmd *github_com_spf13_cobra.Command
		}
		GetConfluentPrerunCredentialsFromNetrc []struct {
			Cmd *github_com_spf13_cobra.Command
		}
		SetCCloudClient []struct {
			Client *github_com_confluentinc_ccloud_sdk_go_v1.Client
		}
	}
}

// GetCCloudCredentialsFromEnvVar mocks base method by wrapping the associated func.
func (m *LoginCredentialsManager) GetCCloudCredentialsFromEnvVar(cmd *github_com_spf13_cobra.Command) func() (*github_com_confluentinc_cli_internal_pkg_auth.Credentials, error) {
	m.lockGetCCloudCredentialsFromEnvVar.Lock()
	defer m.lockGetCCloudCredentialsFromEnvVar.Unlock()

	if m.GetCCloudCredentialsFromEnvVarFunc == nil {
		panic("mocker: LoginCredentialsManager.GetCCloudCredentialsFromEnvVarFunc is nil but LoginCredentialsManager.GetCCloudCredentialsFromEnvVar was called.")
	}

	call := struct {
		Cmd *github_com_spf13_cobra.Command
	}{
		Cmd: cmd,
	}

	m.calls.GetCCloudCredentialsFromEnvVar = append(m.calls.GetCCloudCredentialsFromEnvVar, call)

	return m.GetCCloudCredentialsFromEnvVarFunc(cmd)
}

// GetCCloudCredentialsFromEnvVarCalled returns true if GetCCloudCredentialsFromEnvVar was called at least once.
func (m *LoginCredentialsManager) GetCCloudCredentialsFromEnvVarCalled() bool {
	m.lockGetCCloudCredentialsFromEnvVar.Lock()
	defer m.lockGetCCloudCredentialsFromEnvVar.Unlock()

	return len(m.calls.GetCCloudCredentialsFromEnvVar) > 0
}

// GetCCloudCredentialsFromEnvVarCalls returns the calls made to GetCCloudCredentialsFromEnvVar.
func (m *LoginCredentialsManager) GetCCloudCredentialsFromEnvVarCalls() []struct {
	Cmd *github_com_spf13_cobra.Command
} {
	m.lockGetCCloudCredentialsFromEnvVar.Lock()
	defer m.lockGetCCloudCredentialsFromEnvVar.Unlock()

	return m.calls.GetCCloudCredentialsFromEnvVar
}

// GetCCloudCredentialsFromPrompt mocks base method by wrapping the associated func.
func (m *LoginCredentialsManager) GetCCloudCredentialsFromPrompt(cmd *github_com_spf13_cobra.Command) func() (*github_com_confluentinc_cli_internal_pkg_auth.Credentials, error) {
	m.lockGetCCloudCredentialsFromPrompt.Lock()
	defer m.lockGetCCloudCredentialsFromPrompt.Unlock()

	if m.GetCCloudCredentialsFromPromptFunc == nil {
		panic("mocker: LoginCredentialsManager.GetCCloudCredentialsFromPromptFunc is nil but LoginCredentialsManager.GetCCloudCredentialsFromPrompt was called.")
	}

	call := struct {
		Cmd *github_com_spf13_cobra.Command
	}{
		Cmd: cmd,
	}

	m.calls.GetCCloudCredentialsFromPrompt = append(m.calls.GetCCloudCredentialsFromPrompt, call)

	return m.GetCCloudCredentialsFromPromptFunc(cmd)
}

// GetCCloudCredentialsFromPromptCalled returns true if GetCCloudCredentialsFromPrompt was called at least once.
func (m *LoginCredentialsManager) GetCCloudCredentialsFromPromptCalled() bool {
	m.lockGetCCloudCredentialsFromPrompt.Lock()
	defer m.lockGetCCloudCredentialsFromPrompt.Unlock()

	return len(m.calls.GetCCloudCredentialsFromPrompt) > 0
}

// GetCCloudCredentialsFromPromptCalls returns the calls made to GetCCloudCredentialsFromPrompt.
func (m *LoginCredentialsManager) GetCCloudCredentialsFromPromptCalls() []struct {
	Cmd *github_com_spf13_cobra.Command
} {
	m.lockGetCCloudCredentialsFromPrompt.Lock()
	defer m.lockGetCCloudCredentialsFromPrompt.Unlock()

	return m.calls.GetCCloudCredentialsFromPrompt
}

// GetConfluentCredentialsFromEnvVar mocks base method by wrapping the associated func.
func (m *LoginCredentialsManager) GetConfluentCredentialsFromEnvVar(cmd *github_com_spf13_cobra.Command) func() (*github_com_confluentinc_cli_internal_pkg_auth.Credentials, error) {
	m.lockGetConfluentCredentialsFromEnvVar.Lock()
	defer m.lockGetConfluentCredentialsFromEnvVar.Unlock()

	if m.GetConfluentCredentialsFromEnvVarFunc == nil {
		panic("mocker: LoginCredentialsManager.GetConfluentCredentialsFromEnvVarFunc is nil but LoginCredentialsManager.GetConfluentCredentialsFromEnvVar was called.")
	}

	call := struct {
		Cmd *github_com_spf13_cobra.Command
	}{
		Cmd: cmd,
	}

	m.calls.GetConfluentCredentialsFromEnvVar = append(m.calls.GetConfluentCredentialsFromEnvVar, call)

	return m.GetConfluentCredentialsFromEnvVarFunc(cmd)
}

// GetConfluentCredentialsFromEnvVarCalled returns true if GetConfluentCredentialsFromEnvVar was called at least once.
func (m *LoginCredentialsManager) GetConfluentCredentialsFromEnvVarCalled() bool {
	m.lockGetConfluentCredentialsFromEnvVar.Lock()
	defer m.lockGetConfluentCredentialsFromEnvVar.Unlock()

	return len(m.calls.GetConfluentCredentialsFromEnvVar) > 0
}

// GetConfluentCredentialsFromEnvVarCalls returns the calls made to GetConfluentCredentialsFromEnvVar.
func (m *LoginCredentialsManager) GetConfluentCredentialsFromEnvVarCalls() []struct {
	Cmd *github_com_spf13_cobra.Command
} {
	m.lockGetConfluentCredentialsFromEnvVar.Lock()
	defer m.lockGetConfluentCredentialsFromEnvVar.Unlock()

	return m.calls.GetConfluentCredentialsFromEnvVar
}

// GetConfluentCredentialsFromPrompt mocks base method by wrapping the associated func.
func (m *LoginCredentialsManager) GetConfluentCredentialsFromPrompt(cmd *github_com_spf13_cobra.Command) func() (*github_com_confluentinc_cli_internal_pkg_auth.Credentials, error) {
	m.lockGetConfluentCredentialsFromPrompt.Lock()
	defer m.lockGetConfluentCredentialsFromPrompt.Unlock()

	if m.GetConfluentCredentialsFromPromptFunc == nil {
		panic("mocker: LoginCredentialsManager.GetConfluentCredentialsFromPromptFunc is nil but LoginCredentialsManager.GetConfluentCredentialsFromPrompt was called.")
	}

	call := struct {
		Cmd *github_com_spf13_cobra.Command
	}{
		Cmd: cmd,
	}

	m.calls.GetConfluentCredentialsFromPrompt = append(m.calls.GetConfluentCredentialsFromPrompt, call)

	return m.GetConfluentCredentialsFromPromptFunc(cmd)
}

// GetConfluentCredentialsFromPromptCalled returns true if GetConfluentCredentialsFromPrompt was called at least once.
func (m *LoginCredentialsManager) GetConfluentCredentialsFromPromptCalled() bool {
	m.lockGetConfluentCredentialsFromPrompt.Lock()
	defer m.lockGetConfluentCredentialsFromPrompt.Unlock()

	return len(m.calls.GetConfluentCredentialsFromPrompt) > 0
}

// GetConfluentCredentialsFromPromptCalls returns the calls made to GetConfluentCredentialsFromPrompt.
func (m *LoginCredentialsManager) GetConfluentCredentialsFromPromptCalls() []struct {
	Cmd *github_com_spf13_cobra.Command
} {
	m.lockGetConfluentCredentialsFromPrompt.Lock()
	defer m.lockGetConfluentCredentialsFromPrompt.Unlock()

	return m.calls.GetConfluentCredentialsFromPrompt
}

// GetCredentialsFromConfig mocks base method by wrapping the associated func.
func (m *LoginCredentialsManager) GetCredentialsFromConfig(cfg *github_com_confluentinc_cli_internal_pkg_config_v3.Config, filterParams github_com_confluentinc_cli_internal_pkg_netrc.GetMatchingNetrcMachineParams) func() (*github_com_confluentinc_cli_internal_pkg_auth.Credentials, error) {
	m.lockGetCredentialsFromConfig.Lock()
	defer m.lockGetCredentialsFromConfig.Unlock()

	if m.GetCredentialsFromConfigFunc == nil {
		panic("mocker: LoginCredentialsManager.GetCredentialsFromConfigFunc is nil but LoginCredentialsManager.GetCredentialsFromConfig was called.")
	}

	call := struct {
		Cfg          *github_com_confluentinc_cli_internal_pkg_config_v3.Config
		FilterParams github_com_confluentinc_cli_internal_pkg_netrc.GetMatchingNetrcMachineParams
	}{
		Cfg:          cfg,
		FilterParams: filterParams,
	}

	m.calls.GetCredentialsFromConfig = append(m.calls.GetCredentialsFromConfig, call)

	return m.GetCredentialsFromConfigFunc(cfg, filterParams)
}

// GetCredentialsFromConfigCalled returns true if GetCredentialsFromConfig was called at least once.
func (m *LoginCredentialsManager) GetCredentialsFromConfigCalled() bool {
	m.lockGetCredentialsFromConfig.Lock()
	defer m.lockGetCredentialsFromConfig.Unlock()

	return len(m.calls.GetCredentialsFromConfig) > 0
}

// GetCredentialsFromConfigCalls returns the calls made to GetCredentialsFromConfig.
func (m *LoginCredentialsManager) GetCredentialsFromConfigCalls() []struct {
	Cfg          *github_com_confluentinc_cli_internal_pkg_config_v3.Config
	FilterParams github_com_confluentinc_cli_internal_pkg_netrc.GetMatchingNetrcMachineParams
} {
	m.lockGetCredentialsFromConfig.Lock()
	defer m.lockGetCredentialsFromConfig.Unlock()

	return m.calls.GetCredentialsFromConfig
}

// GetCredentialsFromNetrc mocks base method by wrapping the associated func.
func (m *LoginCredentialsManager) GetCredentialsFromNetrc(cmd *github_com_spf13_cobra.Command, filterParams github_com_confluentinc_cli_internal_pkg_netrc.GetMatchingNetrcMachineParams) func() (*github_com_confluentinc_cli_internal_pkg_auth.Credentials, error) {
	m.lockGetCredentialsFromNetrc.Lock()
	defer m.lockGetCredentialsFromNetrc.Unlock()

	if m.GetCredentialsFromNetrcFunc == nil {
		panic("mocker: LoginCredentialsManager.GetCredentialsFromNetrcFunc is nil but LoginCredentialsManager.GetCredentialsFromNetrc was called.")
	}

	call := struct {
		Cmd          *github_com_spf13_cobra.Command
		FilterParams github_com_confluentinc_cli_internal_pkg_netrc.GetMatchingNetrcMachineParams
	}{
		Cmd:          cmd,
		FilterParams: filterParams,
	}

	m.calls.GetCredentialsFromNetrc = append(m.calls.GetCredentialsFromNetrc, call)

	return m.GetCredentialsFromNetrcFunc(cmd, filterParams)
}

// GetCredentialsFromNetrcCalled returns true if GetCredentialsFromNetrc was called at least once.
func (m *LoginCredentialsManager) GetCredentialsFromNetrcCalled() bool {
	m.lockGetCredentialsFromNetrc.Lock()
	defer m.lockGetCredentialsFromNetrc.Unlock()

	return len(m.calls.GetCredentialsFromNetrc) > 0
}

// GetCredentialsFromNetrcCalls returns the calls made to GetCredentialsFromNetrc.
func (m *LoginCredentialsManager) GetCredentialsFromNetrcCalls() []struct {
	Cmd          *github_com_spf13_cobra.Command
	FilterParams github_com_confluentinc_cli_internal_pkg_netrc.GetMatchingNetrcMachineParams
} {
	m.lockGetCredentialsFromNetrc.Lock()
	defer m.lockGetCredentialsFromNetrc.Unlock()

	return m.calls.GetCredentialsFromNetrc
}

// GetConfluentPrerunCredentialsFromEnvVar mocks base method by wrapping the associated func.
func (m *LoginCredentialsManager) GetConfluentPrerunCredentialsFromEnvVar(cmd *github_com_spf13_cobra.Command) func() (*github_com_confluentinc_cli_internal_pkg_auth.Credentials, error) {
	m.lockGetConfluentPrerunCredentialsFromEnvVar.Lock()
	defer m.lockGetConfluentPrerunCredentialsFromEnvVar.Unlock()

	if m.GetConfluentPrerunCredentialsFromEnvVarFunc == nil {
		panic("mocker: LoginCredentialsManager.GetConfluentPrerunCredentialsFromEnvVarFunc is nil but LoginCredentialsManager.GetConfluentPrerunCredentialsFromEnvVar was called.")
	}

	call := struct {
		Cmd *github_com_spf13_cobra.Command
	}{
		Cmd: cmd,
	}

	m.calls.GetConfluentPrerunCredentialsFromEnvVar = append(m.calls.GetConfluentPrerunCredentialsFromEnvVar, call)

	return m.GetConfluentPrerunCredentialsFromEnvVarFunc(cmd)
}

// GetConfluentPrerunCredentialsFromEnvVarCalled returns true if GetConfluentPrerunCredentialsFromEnvVar was called at least once.
func (m *LoginCredentialsManager) GetConfluentPrerunCredentialsFromEnvVarCalled() bool {
	m.lockGetConfluentPrerunCredentialsFromEnvVar.Lock()
	defer m.lockGetConfluentPrerunCredentialsFromEnvVar.Unlock()

	return len(m.calls.GetConfluentPrerunCredentialsFromEnvVar) > 0
}

// GetConfluentPrerunCredentialsFromEnvVarCalls returns the calls made to GetConfluentPrerunCredentialsFromEnvVar.
func (m *LoginCredentialsManager) GetConfluentPrerunCredentialsFromEnvVarCalls() []struct {
	Cmd *github_com_spf13_cobra.Command
} {
	m.lockGetConfluentPrerunCredentialsFromEnvVar.Lock()
	defer m.lockGetConfluentPrerunCredentialsFromEnvVar.Unlock()

	return m.calls.GetConfluentPrerunCredentialsFromEnvVar
}

// GetConfluentPrerunCredentialsFromNetrc mocks base method by wrapping the associated func.
func (m *LoginCredentialsManager) GetConfluentPrerunCredentialsFromNetrc(cmd *github_com_spf13_cobra.Command) func() (*github_com_confluentinc_cli_internal_pkg_auth.Credentials, error) {
	m.lockGetConfluentPrerunCredentialsFromNetrc.Lock()
	defer m.lockGetConfluentPrerunCredentialsFromNetrc.Unlock()

	if m.GetConfluentPrerunCredentialsFromNetrcFunc == nil {
		panic("mocker: LoginCredentialsManager.GetConfluentPrerunCredentialsFromNetrcFunc is nil but LoginCredentialsManager.GetConfluentPrerunCredentialsFromNetrc was called.")
	}

	call := struct {
		Cmd *github_com_spf13_cobra.Command
	}{
		Cmd: cmd,
	}

	m.calls.GetConfluentPrerunCredentialsFromNetrc = append(m.calls.GetConfluentPrerunCredentialsFromNetrc, call)

	return m.GetConfluentPrerunCredentialsFromNetrcFunc(cmd)
}

// GetConfluentPrerunCredentialsFromNetrcCalled returns true if GetConfluentPrerunCredentialsFromNetrc was called at least once.
func (m *LoginCredentialsManager) GetConfluentPrerunCredentialsFromNetrcCalled() bool {
	m.lockGetConfluentPrerunCredentialsFromNetrc.Lock()
	defer m.lockGetConfluentPrerunCredentialsFromNetrc.Unlock()

	return len(m.calls.GetConfluentPrerunCredentialsFromNetrc) > 0
}

// GetConfluentPrerunCredentialsFromNetrcCalls returns the calls made to GetConfluentPrerunCredentialsFromNetrc.
func (m *LoginCredentialsManager) GetConfluentPrerunCredentialsFromNetrcCalls() []struct {
	Cmd *github_com_spf13_cobra.Command
} {
	m.lockGetConfluentPrerunCredentialsFromNetrc.Lock()
	defer m.lockGetConfluentPrerunCredentialsFromNetrc.Unlock()

	return m.calls.GetConfluentPrerunCredentialsFromNetrc
}

// SetCCloudClient mocks base method by wrapping the associated func.
func (m *LoginCredentialsManager) SetCCloudClient(client *github_com_confluentinc_ccloud_sdk_go_v1.Client) {
	m.lockSetCCloudClient.Lock()
	defer m.lockSetCCloudClient.Unlock()

	if m.SetCCloudClientFunc == nil {
		panic("mocker: LoginCredentialsManager.SetCCloudClientFunc is nil but LoginCredentialsManager.SetCCloudClient was called.")
	}

	call := struct {
		Client *github_com_confluentinc_ccloud_sdk_go_v1.Client
	}{
		Client: client,
	}

	m.calls.SetCCloudClient = append(m.calls.SetCCloudClient, call)

	m.SetCCloudClientFunc(client)
}

// SetCCloudClientCalled returns true if SetCCloudClient was called at least once.
func (m *LoginCredentialsManager) SetCCloudClientCalled() bool {
	m.lockSetCCloudClient.Lock()
	defer m.lockSetCCloudClient.Unlock()

	return len(m.calls.SetCCloudClient) > 0
}

// SetCCloudClientCalls returns the calls made to SetCCloudClient.
func (m *LoginCredentialsManager) SetCCloudClientCalls() []struct {
	Client *github_com_confluentinc_ccloud_sdk_go_v1.Client
} {
	m.lockSetCCloudClient.Lock()
	defer m.lockSetCCloudClient.Unlock()

	return m.calls.SetCCloudClient
}

// Reset resets the calls made to the mocked methods.
func (m *LoginCredentialsManager) Reset() {
	m.lockGetCCloudCredentialsFromEnvVar.Lock()
	m.calls.GetCCloudCredentialsFromEnvVar = nil
	m.lockGetCCloudCredentialsFromEnvVar.Unlock()
	m.lockGetCCloudCredentialsFromPrompt.Lock()
	m.calls.GetCCloudCredentialsFromPrompt = nil
	m.lockGetCCloudCredentialsFromPrompt.Unlock()
	m.lockGetConfluentCredentialsFromEnvVar.Lock()
	m.calls.GetConfluentCredentialsFromEnvVar = nil
	m.lockGetConfluentCredentialsFromEnvVar.Unlock()
	m.lockGetConfluentCredentialsFromPrompt.Lock()
	m.calls.GetConfluentCredentialsFromPrompt = nil
	m.lockGetConfluentCredentialsFromPrompt.Unlock()
	m.lockGetCredentialsFromConfig.Lock()
	m.calls.GetCredentialsFromConfig = nil
	m.lockGetCredentialsFromConfig.Unlock()
	m.lockGetCredentialsFromNetrc.Lock()
	m.calls.GetCredentialsFromNetrc = nil
	m.lockGetCredentialsFromNetrc.Unlock()
	m.lockGetConfluentPrerunCredentialsFromEnvVar.Lock()
	m.calls.GetConfluentPrerunCredentialsFromEnvVar = nil
	m.lockGetConfluentPrerunCredentialsFromEnvVar.Unlock()
	m.lockGetConfluentPrerunCredentialsFromNetrc.Lock()
	m.calls.GetConfluentPrerunCredentialsFromNetrc = nil
	m.lockGetConfluentPrerunCredentialsFromNetrc.Unlock()
	m.lockSetCCloudClient.Lock()
	m.calls.SetCCloudClient = nil
	m.lockSetCCloudClient.Unlock()
}
