// Code generated by mocker. DO NOT EDIT.
// github.com/travisjeffery/mocker
// Source: confluent_home.go

package mock

import (
	sync "sync"
)

// MockConfluentHome is a mock of ConfluentHome interface
type MockConfluentHome struct {
	lockIsConfluentPlatform sync.Mutex
	IsConfluentPlatformFunc func() (bool, error)

	lockFindFile sync.Mutex
	FindFileFunc func(pattern string) ([]string, error)

	lockGetConfig sync.Mutex
	GetConfigFunc func(service string) ([]byte, error)

	lockGetConnectorConfigFile sync.Mutex
	GetConnectorConfigFileFunc func(connector string) (string, error)

	lockGetScriptFile sync.Mutex
	GetScriptFileFunc func(service string) (string, error)

	calls struct {
		IsConfluentPlatform []struct {
		}
		FindFile []struct {
			Pattern string
		}
		GetConfig []struct {
			Service string
		}
		GetConnectorConfigFile []struct {
			Connector string
		}
		GetScriptFile []struct {
			Service string
		}
	}
}

// IsConfluentPlatform mocks base method by wrapping the associated func.
func (m *MockConfluentHome) IsConfluentPlatform() (bool, error) {
	m.lockIsConfluentPlatform.Lock()
	defer m.lockIsConfluentPlatform.Unlock()

	if m.IsConfluentPlatformFunc == nil {
		panic("mocker: MockConfluentHome.IsConfluentPlatformFunc is nil but MockConfluentHome.IsConfluentPlatform was called.")
	}

	call := struct {
	}{}

	m.calls.IsConfluentPlatform = append(m.calls.IsConfluentPlatform, call)

	return m.IsConfluentPlatformFunc()
}

// IsConfluentPlatformCalled returns true if IsConfluentPlatform was called at least once.
func (m *MockConfluentHome) IsConfluentPlatformCalled() bool {
	m.lockIsConfluentPlatform.Lock()
	defer m.lockIsConfluentPlatform.Unlock()

	return len(m.calls.IsConfluentPlatform) > 0
}

// IsConfluentPlatformCalls returns the calls made to IsConfluentPlatform.
func (m *MockConfluentHome) IsConfluentPlatformCalls() []struct {
} {
	m.lockIsConfluentPlatform.Lock()
	defer m.lockIsConfluentPlatform.Unlock()

	return m.calls.IsConfluentPlatform
}

// FindFile mocks base method by wrapping the associated func.
func (m *MockConfluentHome) FindFile(pattern string) ([]string, error) {
	m.lockFindFile.Lock()
	defer m.lockFindFile.Unlock()

	if m.FindFileFunc == nil {
		panic("mocker: MockConfluentHome.FindFileFunc is nil but MockConfluentHome.FindFile was called.")
	}

	call := struct {
		Pattern string
	}{
		Pattern: pattern,
	}

	m.calls.FindFile = append(m.calls.FindFile, call)

	return m.FindFileFunc(pattern)
}

// FindFileCalled returns true if FindFile was called at least once.
func (m *MockConfluentHome) FindFileCalled() bool {
	m.lockFindFile.Lock()
	defer m.lockFindFile.Unlock()

	return len(m.calls.FindFile) > 0
}

// FindFileCalls returns the calls made to FindFile.
func (m *MockConfluentHome) FindFileCalls() []struct {
	Pattern string
} {
	m.lockFindFile.Lock()
	defer m.lockFindFile.Unlock()

	return m.calls.FindFile
}

// GetConfig mocks base method by wrapping the associated func.
func (m *MockConfluentHome) GetConfig(service string) ([]byte, error) {
	m.lockGetConfig.Lock()
	defer m.lockGetConfig.Unlock()

	if m.GetConfigFunc == nil {
		panic("mocker: MockConfluentHome.GetConfigFunc is nil but MockConfluentHome.GetConfig was called.")
	}

	call := struct {
		Service string
	}{
		Service: service,
	}

	m.calls.GetConfig = append(m.calls.GetConfig, call)

	return m.GetConfigFunc(service)
}

// GetConfigCalled returns true if GetConfig was called at least once.
func (m *MockConfluentHome) GetConfigCalled() bool {
	m.lockGetConfig.Lock()
	defer m.lockGetConfig.Unlock()

	return len(m.calls.GetConfig) > 0
}

// GetConfigCalls returns the calls made to GetConfig.
func (m *MockConfluentHome) GetConfigCalls() []struct {
	Service string
} {
	m.lockGetConfig.Lock()
	defer m.lockGetConfig.Unlock()

	return m.calls.GetConfig
}

// GetConnectorConfigFile mocks base method by wrapping the associated func.
func (m *MockConfluentHome) GetConnectorConfigFile(connector string) (string, error) {
	m.lockGetConnectorConfigFile.Lock()
	defer m.lockGetConnectorConfigFile.Unlock()

	if m.GetConnectorConfigFileFunc == nil {
		panic("mocker: MockConfluentHome.GetConnectorConfigFileFunc is nil but MockConfluentHome.GetConnectorConfigFile was called.")
	}

	call := struct {
		Connector string
	}{
		Connector: connector,
	}

	m.calls.GetConnectorConfigFile = append(m.calls.GetConnectorConfigFile, call)

	return m.GetConnectorConfigFileFunc(connector)
}

// GetConnectorConfigFileCalled returns true if GetConnectorConfigFile was called at least once.
func (m *MockConfluentHome) GetConnectorConfigFileCalled() bool {
	m.lockGetConnectorConfigFile.Lock()
	defer m.lockGetConnectorConfigFile.Unlock()

	return len(m.calls.GetConnectorConfigFile) > 0
}

// GetConnectorConfigFileCalls returns the calls made to GetConnectorConfigFile.
func (m *MockConfluentHome) GetConnectorConfigFileCalls() []struct {
	Connector string
} {
	m.lockGetConnectorConfigFile.Lock()
	defer m.lockGetConnectorConfigFile.Unlock()

	return m.calls.GetConnectorConfigFile
}

// GetScriptFile mocks base method by wrapping the associated func.
func (m *MockConfluentHome) GetScriptFile(service string) (string, error) {
	m.lockGetScriptFile.Lock()
	defer m.lockGetScriptFile.Unlock()

	if m.GetScriptFileFunc == nil {
		panic("mocker: MockConfluentHome.GetScriptFileFunc is nil but MockConfluentHome.GetScriptFile was called.")
	}

	call := struct {
		Service string
	}{
		Service: service,
	}

	m.calls.GetScriptFile = append(m.calls.GetScriptFile, call)

	return m.GetScriptFileFunc(service)
}

// GetScriptFileCalled returns true if GetScriptFile was called at least once.
func (m *MockConfluentHome) GetScriptFileCalled() bool {
	m.lockGetScriptFile.Lock()
	defer m.lockGetScriptFile.Unlock()

	return len(m.calls.GetScriptFile) > 0
}

// GetScriptFileCalls returns the calls made to GetScriptFile.
func (m *MockConfluentHome) GetScriptFileCalls() []struct {
	Service string
} {
	m.lockGetScriptFile.Lock()
	defer m.lockGetScriptFile.Unlock()

	return m.calls.GetScriptFile
}

// Reset resets the calls made to the mocked methods.
func (m *MockConfluentHome) Reset() {
	m.lockIsConfluentPlatform.Lock()
	m.calls.IsConfluentPlatform = nil
	m.lockIsConfluentPlatform.Unlock()
	m.lockFindFile.Lock()
	m.calls.FindFile = nil
	m.lockFindFile.Unlock()
	m.lockGetConfig.Lock()
	m.calls.GetConfig = nil
	m.lockGetConfig.Unlock()
	m.lockGetConnectorConfigFile.Lock()
	m.calls.GetConnectorConfigFile = nil
	m.lockGetConnectorConfigFile.Unlock()
	m.lockGetScriptFile.Lock()
	m.calls.GetScriptFile = nil
	m.lockGetScriptFile.Unlock()
}
