// Code generated by mocker. DO NOT EDIT.
// github.com/travisjeffery/mocker
// Source: login_organization_manager.go

package mock

import (
	sync "sync"

	github_com_confluentinc_cli_internal_pkg_config "github.com/confluentinc/cli/internal/pkg/config"
	github_com_spf13_cobra "github.com/spf13/cobra"
)

// LoginOrganizationManager is a mock of LoginOrganizationManager interface
type LoginOrganizationManager struct {
	lockGetLoginOrganizationFromFlag sync.Mutex
	GetLoginOrganizationFromFlagFunc func(arg0 *github_com_spf13_cobra.Command) func() string

	lockGetLoginOrganizationFromEnvironmentVariable sync.Mutex
	GetLoginOrganizationFromEnvironmentVariableFunc func() func() string

	lockGetLoginOrganizationFromConfigurationFile sync.Mutex
	GetLoginOrganizationFromConfigurationFileFunc func(cfg *github_com_confluentinc_cli_internal_pkg_config.Config) func() string

	calls struct {
		GetLoginOrganizationFromFlag []struct {
			Arg0 *github_com_spf13_cobra.Command
		}
		GetLoginOrganizationFromEnvironmentVariable []struct {
		}
		GetLoginOrganizationFromConfigurationFile []struct {
			Cfg *github_com_confluentinc_cli_internal_pkg_config.Config
		}
	}
}

// GetLoginOrganizationFromFlag mocks base method by wrapping the associated func.
func (m *LoginOrganizationManager) GetLoginOrganizationFromFlag(arg0 *github_com_spf13_cobra.Command) func() string {
	m.lockGetLoginOrganizationFromFlag.Lock()
	defer m.lockGetLoginOrganizationFromFlag.Unlock()

	if m.GetLoginOrganizationFromFlagFunc == nil {
		panic("mocker: LoginOrganizationManager.GetLoginOrganizationFromFlagFunc is nil but LoginOrganizationManager.GetLoginOrganizationFromFlag was called.")
	}

	call := struct {
		Arg0 *github_com_spf13_cobra.Command
	}{
		Arg0: arg0,
	}

	m.calls.GetLoginOrganizationFromFlag = append(m.calls.GetLoginOrganizationFromFlag, call)

	return m.GetLoginOrganizationFromFlagFunc(arg0)
}

// GetLoginOrganizationFromFlagCalled returns true if GetLoginOrganizationFromFlag was called at least once.
func (m *LoginOrganizationManager) GetLoginOrganizationFromFlagCalled() bool {
	m.lockGetLoginOrganizationFromFlag.Lock()
	defer m.lockGetLoginOrganizationFromFlag.Unlock()

	return len(m.calls.GetLoginOrganizationFromFlag) > 0
}

// GetLoginOrganizationFromFlagCalls returns the calls made to GetLoginOrganizationFromFlag.
func (m *LoginOrganizationManager) GetLoginOrganizationFromFlagCalls() []struct {
	Arg0 *github_com_spf13_cobra.Command
} {
	m.lockGetLoginOrganizationFromFlag.Lock()
	defer m.lockGetLoginOrganizationFromFlag.Unlock()

	return m.calls.GetLoginOrganizationFromFlag
}

// GetLoginOrganizationFromEnvironmentVariable mocks base method by wrapping the associated func.
func (m *LoginOrganizationManager) GetLoginOrganizationFromEnvironmentVariable() func() string {
	m.lockGetLoginOrganizationFromEnvironmentVariable.Lock()
	defer m.lockGetLoginOrganizationFromEnvironmentVariable.Unlock()

	if m.GetLoginOrganizationFromEnvironmentVariableFunc == nil {
		panic("mocker: LoginOrganizationManager.GetLoginOrganizationFromEnvironmentVariableFunc is nil but LoginOrganizationManager.GetLoginOrganizationFromEnvironmentVariable was called.")
	}

	call := struct {
	}{}

	m.calls.GetLoginOrganizationFromEnvironmentVariable = append(m.calls.GetLoginOrganizationFromEnvironmentVariable, call)

	return m.GetLoginOrganizationFromEnvironmentVariableFunc()
}

// GetLoginOrganizationFromEnvironmentVariableCalled returns true if GetLoginOrganizationFromEnvironmentVariable was called at least once.
func (m *LoginOrganizationManager) GetLoginOrganizationFromEnvironmentVariableCalled() bool {
	m.lockGetLoginOrganizationFromEnvironmentVariable.Lock()
	defer m.lockGetLoginOrganizationFromEnvironmentVariable.Unlock()

	return len(m.calls.GetLoginOrganizationFromEnvironmentVariable) > 0
}

// GetLoginOrganizationFromEnvironmentVariableCalls returns the calls made to GetLoginOrganizationFromEnvironmentVariable.
func (m *LoginOrganizationManager) GetLoginOrganizationFromEnvironmentVariableCalls() []struct {
} {
	m.lockGetLoginOrganizationFromEnvironmentVariable.Lock()
	defer m.lockGetLoginOrganizationFromEnvironmentVariable.Unlock()

	return m.calls.GetLoginOrganizationFromEnvironmentVariable
}

// GetLoginOrganizationFromConfigurationFile mocks base method by wrapping the associated func.
func (m *LoginOrganizationManager) GetLoginOrganizationFromConfigurationFile(cfg *github_com_confluentinc_cli_internal_pkg_config.Config) func() string {
	m.lockGetLoginOrganizationFromConfigurationFile.Lock()
	defer m.lockGetLoginOrganizationFromConfigurationFile.Unlock()

	if m.GetLoginOrganizationFromConfigurationFileFunc == nil {
		panic("mocker: LoginOrganizationManager.GetLoginOrganizationFromConfigurationFileFunc is nil but LoginOrganizationManager.GetLoginOrganizationFromConfigurationFile was called.")
	}

	call := struct {
		Cfg *github_com_confluentinc_cli_internal_pkg_config.Config
	}{
		Cfg: cfg,
	}

	m.calls.GetLoginOrganizationFromConfigurationFile = append(m.calls.GetLoginOrganizationFromConfigurationFile, call)

	return m.GetLoginOrganizationFromConfigurationFileFunc(cfg)
}

// GetLoginOrganizationFromConfigurationFileCalled returns true if GetLoginOrganizationFromConfigurationFile was called at least once.
func (m *LoginOrganizationManager) GetLoginOrganizationFromConfigurationFileCalled() bool {
	m.lockGetLoginOrganizationFromConfigurationFile.Lock()
	defer m.lockGetLoginOrganizationFromConfigurationFile.Unlock()

	return len(m.calls.GetLoginOrganizationFromConfigurationFile) > 0
}

// GetLoginOrganizationFromConfigurationFileCalls returns the calls made to GetLoginOrganizationFromConfigurationFile.
func (m *LoginOrganizationManager) GetLoginOrganizationFromConfigurationFileCalls() []struct {
	Cfg *github_com_confluentinc_cli_internal_pkg_config.Config
} {
	m.lockGetLoginOrganizationFromConfigurationFile.Lock()
	defer m.lockGetLoginOrganizationFromConfigurationFile.Unlock()

	return m.calls.GetLoginOrganizationFromConfigurationFile
}

// Reset resets the calls made to the mocked methods.
func (m *LoginOrganizationManager) Reset() {
	m.lockGetLoginOrganizationFromFlag.Lock()
	m.calls.GetLoginOrganizationFromFlag = nil
	m.lockGetLoginOrganizationFromFlag.Unlock()
	m.lockGetLoginOrganizationFromEnvironmentVariable.Lock()
	m.calls.GetLoginOrganizationFromEnvironmentVariable = nil
	m.lockGetLoginOrganizationFromEnvironmentVariable.Unlock()
	m.lockGetLoginOrganizationFromConfigurationFile.Lock()
	m.calls.GetLoginOrganizationFromConfigurationFile = nil
	m.lockGetLoginOrganizationFromConfigurationFile.Unlock()
}
