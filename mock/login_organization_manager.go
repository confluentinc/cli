// Code generated by mocker. DO NOT EDIT.
// github.com/travisjeffery/mocker
// Source: internal/pkg/auth/login_organization_manager.go

package mock

import (
	sync "sync"

	github_com_spf13_cobra "github.com/spf13/cobra"
)

// LoginOrganizationManager is a mock of LoginOrganizationManager interface
type LoginOrganizationManager struct {
	lockGetLoginOrganizationFromArgs sync.Mutex
	GetLoginOrganizationFromArgsFunc func(arg0 *github_com_spf13_cobra.Command) func() (string, error)

	lockGetLoginOrganizationFromEnvVar sync.Mutex
	GetLoginOrganizationFromEnvVarFunc func(arg0 *github_com_spf13_cobra.Command) func() (string, error)

	lockGetDefaultLoginOrganization sync.Mutex
	GetDefaultLoginOrganizationFunc func() func() (string, error)

	calls struct {
		GetLoginOrganizationFromArgs []struct {
			Arg0 *github_com_spf13_cobra.Command
		}
		GetLoginOrganizationFromEnvVar []struct {
			Arg0 *github_com_spf13_cobra.Command
		}
		GetDefaultLoginOrganization []struct {
		}
	}
}

// GetLoginOrganizationFromArgs mocks base method by wrapping the associated func.
func (m *LoginOrganizationManager) GetLoginOrganizationFromArgs(arg0 *github_com_spf13_cobra.Command) func() (string, error) {
	m.lockGetLoginOrganizationFromArgs.Lock()
	defer m.lockGetLoginOrganizationFromArgs.Unlock()

	if m.GetLoginOrganizationFromArgsFunc == nil {
		panic("mocker: LoginOrganizationManager.GetLoginOrganizationFromArgsFunc is nil but LoginOrganizationManager.GetLoginOrganizationFromArgs was called.")
	}

	call := struct {
		Arg0 *github_com_spf13_cobra.Command
	}{
		Arg0: arg0,
	}

	m.calls.GetLoginOrganizationFromArgs = append(m.calls.GetLoginOrganizationFromArgs, call)

	return m.GetLoginOrganizationFromArgsFunc(arg0)
}

// GetLoginOrganizationFromArgsCalled returns true if GetLoginOrganizationFromArgs was called at least once.
func (m *LoginOrganizationManager) GetLoginOrganizationFromArgsCalled() bool {
	m.lockGetLoginOrganizationFromArgs.Lock()
	defer m.lockGetLoginOrganizationFromArgs.Unlock()

	return len(m.calls.GetLoginOrganizationFromArgs) > 0
}

// GetLoginOrganizationFromArgsCalls returns the calls made to GetLoginOrganizationFromArgs.
func (m *LoginOrganizationManager) GetLoginOrganizationFromArgsCalls() []struct {
	Arg0 *github_com_spf13_cobra.Command
} {
	m.lockGetLoginOrganizationFromArgs.Lock()
	defer m.lockGetLoginOrganizationFromArgs.Unlock()

	return m.calls.GetLoginOrganizationFromArgs
}

// GetLoginOrganizationFromEnvVar mocks base method by wrapping the associated func.
func (m *LoginOrganizationManager) GetLoginOrganizationFromEnvVar(arg0 *github_com_spf13_cobra.Command) func() (string, error) {
	m.lockGetLoginOrganizationFromEnvVar.Lock()
	defer m.lockGetLoginOrganizationFromEnvVar.Unlock()

	if m.GetLoginOrganizationFromEnvVarFunc == nil {
		panic("mocker: LoginOrganizationManager.GetLoginOrganizationFromEnvVarFunc is nil but LoginOrganizationManager.GetLoginOrganizationFromEnvVar was called.")
	}

	call := struct {
		Arg0 *github_com_spf13_cobra.Command
	}{
		Arg0: arg0,
	}

	m.calls.GetLoginOrganizationFromEnvVar = append(m.calls.GetLoginOrganizationFromEnvVar, call)

	return m.GetLoginOrganizationFromEnvVarFunc(arg0)
}

// GetLoginOrganizationFromEnvVarCalled returns true if GetLoginOrganizationFromEnvVar was called at least once.
func (m *LoginOrganizationManager) GetLoginOrganizationFromEnvVarCalled() bool {
	m.lockGetLoginOrganizationFromEnvVar.Lock()
	defer m.lockGetLoginOrganizationFromEnvVar.Unlock()

	return len(m.calls.GetLoginOrganizationFromEnvVar) > 0
}

// GetLoginOrganizationFromEnvVarCalls returns the calls made to GetLoginOrganizationFromEnvVar.
func (m *LoginOrganizationManager) GetLoginOrganizationFromEnvVarCalls() []struct {
	Arg0 *github_com_spf13_cobra.Command
} {
	m.lockGetLoginOrganizationFromEnvVar.Lock()
	defer m.lockGetLoginOrganizationFromEnvVar.Unlock()

	return m.calls.GetLoginOrganizationFromEnvVar
}

// GetDefaultLoginOrganization mocks base method by wrapping the associated func.
func (m *LoginOrganizationManager) GetDefaultLoginOrganization() func() (string, error) {
	m.lockGetDefaultLoginOrganization.Lock()
	defer m.lockGetDefaultLoginOrganization.Unlock()

	if m.GetDefaultLoginOrganizationFunc == nil {
		panic("mocker: LoginOrganizationManager.GetDefaultLoginOrganizationFunc is nil but LoginOrganizationManager.GetDefaultLoginOrganization was called.")
	}

	call := struct {
	}{}

	m.calls.GetDefaultLoginOrganization = append(m.calls.GetDefaultLoginOrganization, call)

	return m.GetDefaultLoginOrganizationFunc()
}

// GetDefaultLoginOrganizationCalled returns true if GetDefaultLoginOrganization was called at least once.
func (m *LoginOrganizationManager) GetDefaultLoginOrganizationCalled() bool {
	m.lockGetDefaultLoginOrganization.Lock()
	defer m.lockGetDefaultLoginOrganization.Unlock()

	return len(m.calls.GetDefaultLoginOrganization) > 0
}

// GetDefaultLoginOrganizationCalls returns the calls made to GetDefaultLoginOrganization.
func (m *LoginOrganizationManager) GetDefaultLoginOrganizationCalls() []struct {
} {
	m.lockGetDefaultLoginOrganization.Lock()
	defer m.lockGetDefaultLoginOrganization.Unlock()

	return m.calls.GetDefaultLoginOrganization
}

// Reset resets the calls made to the mocked methods.
func (m *LoginOrganizationManager) Reset() {
	m.lockGetLoginOrganizationFromArgs.Lock()
	m.calls.GetLoginOrganizationFromArgs = nil
	m.lockGetLoginOrganizationFromArgs.Unlock()
	m.lockGetLoginOrganizationFromEnvVar.Lock()
	m.calls.GetLoginOrganizationFromEnvVar = nil
	m.lockGetLoginOrganizationFromEnvVar.Unlock()
	m.lockGetDefaultLoginOrganization.Lock()
	m.calls.GetDefaultLoginOrganization = nil
	m.lockGetDefaultLoginOrganization.Unlock()
}
