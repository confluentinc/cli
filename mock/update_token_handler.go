// Code generated by mocker. DO NOT EDIT.
// github.com/travisjeffery/mocker
// Source: update_token_handler.go

package mock

import (
	sync "sync"

	github_com_confluentinc_cli_internal_pkg_config_v3 "github.com/confluentinc/cli/internal/pkg/config/v3"
	github_com_confluentinc_cli_internal_pkg_log "github.com/confluentinc/cli/internal/pkg/log"
)

// MockUpdateTokenHandler is a mock of UpdateTokenHandler interface
type MockUpdateTokenHandler struct {
	lockUpdateCCloudAuthToken sync.Mutex
	UpdateCCloudAuthTokenFunc func(ctx *github_com_confluentinc_cli_internal_pkg_config_v3.Context, userAgent string, logger *github_com_confluentinc_cli_internal_pkg_log.Logger) error

	lockUpdateConfluentAuthToken sync.Mutex
	UpdateConfluentAuthTokenFunc func(ctx *github_com_confluentinc_cli_internal_pkg_config_v3.Context, logger *github_com_confluentinc_cli_internal_pkg_log.Logger) error

	calls struct {
		UpdateCCloudAuthToken []struct {
			Ctx       *github_com_confluentinc_cli_internal_pkg_config_v3.Context
			UserAgent string
			Logger    *github_com_confluentinc_cli_internal_pkg_log.Logger
		}
		UpdateConfluentAuthToken []struct {
			Ctx    *github_com_confluentinc_cli_internal_pkg_config_v3.Context
			Logger *github_com_confluentinc_cli_internal_pkg_log.Logger
		}
	}
}

// UpdateCCloudAuthToken mocks base method by wrapping the associated func.
func (m *MockUpdateTokenHandler) UpdateCCloudAuthToken(ctx *github_com_confluentinc_cli_internal_pkg_config_v3.Context, userAgent string, logger *github_com_confluentinc_cli_internal_pkg_log.Logger) error {
	m.lockUpdateCCloudAuthToken.Lock()
	defer m.lockUpdateCCloudAuthToken.Unlock()

	if m.UpdateCCloudAuthTokenFunc == nil {
		panic("mocker: MockUpdateTokenHandler.UpdateCCloudAuthTokenFunc is nil but MockUpdateTokenHandler.UpdateCCloudAuthToken was called.")
	}

	call := struct {
		Ctx       *github_com_confluentinc_cli_internal_pkg_config_v3.Context
		UserAgent string
		Logger    *github_com_confluentinc_cli_internal_pkg_log.Logger
	}{
		Ctx:       ctx,
		UserAgent: userAgent,
		Logger:    logger,
	}

	m.calls.UpdateCCloudAuthToken = append(m.calls.UpdateCCloudAuthToken, call)

	return m.UpdateCCloudAuthTokenFunc(ctx, userAgent, logger)
}

// UpdateCCloudAuthTokenCalled returns true if UpdateCCloudAuthToken was called at least once.
func (m *MockUpdateTokenHandler) UpdateCCloudAuthTokenCalled() bool {
	m.lockUpdateCCloudAuthToken.Lock()
	defer m.lockUpdateCCloudAuthToken.Unlock()

	return len(m.calls.UpdateCCloudAuthToken) > 0
}

// UpdateCCloudAuthTokenCalls returns the calls made to UpdateCCloudAuthToken.
func (m *MockUpdateTokenHandler) UpdateCCloudAuthTokenCalls() []struct {
	Ctx       *github_com_confluentinc_cli_internal_pkg_config_v3.Context
	UserAgent string
	Logger    *github_com_confluentinc_cli_internal_pkg_log.Logger
} {
	m.lockUpdateCCloudAuthToken.Lock()
	defer m.lockUpdateCCloudAuthToken.Unlock()

	return m.calls.UpdateCCloudAuthToken
}

// UpdateConfluentAuthToken mocks base method by wrapping the associated func.
func (m *MockUpdateTokenHandler) UpdateConfluentAuthToken(ctx *github_com_confluentinc_cli_internal_pkg_config_v3.Context, logger *github_com_confluentinc_cli_internal_pkg_log.Logger) error {
	m.lockUpdateConfluentAuthToken.Lock()
	defer m.lockUpdateConfluentAuthToken.Unlock()

	if m.UpdateConfluentAuthTokenFunc == nil {
		panic("mocker: MockUpdateTokenHandler.UpdateConfluentAuthTokenFunc is nil but MockUpdateTokenHandler.UpdateConfluentAuthToken was called.")
	}

	call := struct {
		Ctx    *github_com_confluentinc_cli_internal_pkg_config_v3.Context
		Logger *github_com_confluentinc_cli_internal_pkg_log.Logger
	}{
		Ctx:    ctx,
		Logger: logger,
	}

	m.calls.UpdateConfluentAuthToken = append(m.calls.UpdateConfluentAuthToken, call)

	return m.UpdateConfluentAuthTokenFunc(ctx, logger)
}

// UpdateConfluentAuthTokenCalled returns true if UpdateConfluentAuthToken was called at least once.
func (m *MockUpdateTokenHandler) UpdateConfluentAuthTokenCalled() bool {
	m.lockUpdateConfluentAuthToken.Lock()
	defer m.lockUpdateConfluentAuthToken.Unlock()

	return len(m.calls.UpdateConfluentAuthToken) > 0
}

// UpdateConfluentAuthTokenCalls returns the calls made to UpdateConfluentAuthToken.
func (m *MockUpdateTokenHandler) UpdateConfluentAuthTokenCalls() []struct {
	Ctx    *github_com_confluentinc_cli_internal_pkg_config_v3.Context
	Logger *github_com_confluentinc_cli_internal_pkg_log.Logger
} {
	m.lockUpdateConfluentAuthToken.Lock()
	defer m.lockUpdateConfluentAuthToken.Unlock()

	return m.calls.UpdateConfluentAuthToken
}

// Reset resets the calls made to the mocked methods.
func (m *MockUpdateTokenHandler) Reset() {
	m.lockUpdateCCloudAuthToken.Lock()
	m.calls.UpdateCCloudAuthToken = nil
	m.lockUpdateCCloudAuthToken.Unlock()
	m.lockUpdateConfluentAuthToken.Lock()
	m.calls.UpdateConfluentAuthToken = nil
	m.lockUpdateConfluentAuthToken.Unlock()
}
