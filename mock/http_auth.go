// Code generated by mocker; DO NOT EDIT
// github.com/travisjeffery/mocker
package mock

import (
	"github.com/confluentinc/cli/shared"
	"sync"
)

var (
	lockAuthLogin sync.RWMutex
	lockAuthUser  sync.RWMutex
)

// Auth is a mock implementation of Auth.
//
//     func TestSomethingThatUsesAuth(t *testing.T) {
//
//         // make and configure a mocked Auth
//         mockedAuth := &Auth{
//             LoginFunc: func(username string,password string) (string, error) {
// 	               panic("TODO: mock out the Login method")
//             },
//             UserFunc: func() (*shared.AuthConfig, error) {
// 	               panic("TODO: mock out the User method")
//             },
//         }
//
//         // TODO: use mockedAuth in code that requires Auth
//         //       and then make assertions.
//
//     }
type Auth struct {
	// LoginFunc mocks the Login method.
	LoginFunc func(username string, password string) (string, error)

	// UserFunc mocks the User method.
	UserFunc func() (*shared.AuthConfig, error)

	// calls tracks calls to the methods.
	calls struct {
		// Login holds details about calls to the Login method.
		Login []struct {
			// Username is the username argument value.
			Username string
			// Password is the password argument value.
			Password string
		}
		// User holds details about calls to the User method.
		User []struct {
		}
	}
}

// Reset resets the calls made to the mocked APIs.
func (mock *Auth) Reset() {
	lockAuthLogin.Lock()
	mock.calls.Login = nil
	lockAuthLogin.Unlock()
	lockAuthUser.Lock()
	mock.calls.User = nil
	lockAuthUser.Unlock()
}

// Login calls LoginFunc.
func (mock *Auth) Login(username string, password string) (string, error) {
	if mock.LoginFunc == nil {
		panic("moq: Auth.LoginFunc is nil but Auth.Login was just called")
	}
	callInfo := struct {
		Username string
		Password string
	}{
		Username: username,
		Password: password,
	}
	lockAuthLogin.Lock()
	mock.calls.Login = append(mock.calls.Login, callInfo)
	lockAuthLogin.Unlock()
	return mock.LoginFunc(username, password)
}

// LoginCalled returns true if at least one call was made to Login.
func (mock *Auth) LoginCalled() bool {
	lockAuthLogin.RLock()
	defer lockAuthLogin.RUnlock()
	return len(mock.calls.Login) > 0
}

// LoginCalls gets all the calls that were made to Login.
// Check the length with:
//     len(mockedAuth.LoginCalls())
func (mock *Auth) LoginCalls() []struct {
	Username string
	Password string
} {
	var calls []struct {
		Username string
		Password string
	}
	lockAuthLogin.RLock()
	calls = mock.calls.Login
	lockAuthLogin.RUnlock()
	return calls
}

// User calls UserFunc.
func (mock *Auth) User() (*shared.AuthConfig, error) {
	if mock.UserFunc == nil {
		panic("moq: Auth.UserFunc is nil but Auth.User was just called")
	}
	callInfo := struct {
	}{}
	lockAuthUser.Lock()
	mock.calls.User = append(mock.calls.User, callInfo)
	lockAuthUser.Unlock()
	return mock.UserFunc()
}

// UserCalled returns true if at least one call was made to User.
func (mock *Auth) UserCalled() bool {
	lockAuthUser.RLock()
	defer lockAuthUser.RUnlock()
	return len(mock.calls.User) > 0
}

// UserCalls gets all the calls that were made to User.
// Check the length with:
//     len(mockedAuth.UserCalls())
func (mock *Auth) UserCalls() []struct {
} {
	var calls []struct {
	}
	lockAuthUser.RLock()
	calls = mock.calls.User
	lockAuthUser.RUnlock()
	return calls
}
