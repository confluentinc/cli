// Code generated by mocker; DO NOT EDIT
// github.com/travisjeffery/mocker
package mock

import (
	"sync"
)

var (
	lockPromptReadPassword sync.RWMutex
	lockPromptReadString   sync.RWMutex
)

// Prompt is a mock implementation of Prompt.
//
//     func TestSomethingThatUsesPrompt(t *testing.T) {
//
//         // make and configure a mocked Prompt
//         mockedPrompt := &Prompt{
//             ReadPasswordFunc: func(fd int) ([]byte, error) {
// 	               panic("TODO: mock out the ReadPassword method")
//             },
//             ReadStringFunc: func(delim byte) (string, error) {
// 	               panic("TODO: mock out the ReadString method")
//             },
//         }
//
//         // TODO: use mockedPrompt in code that requires Prompt
//         //       and then make assertions.
//
//     }
type Prompt struct {
	// ReadPasswordFunc mocks the ReadPassword method.
	ReadPasswordFunc func(fd int) ([]byte, error)

	// ReadStringFunc mocks the ReadString method.
	ReadStringFunc func(delim byte) (string, error)

	// calls tracks calls to the methods.
	calls struct {
		// ReadPassword holds details about calls to the ReadPassword method.
		ReadPassword []struct {
			// Fd is the fd argument value.
			Fd int
		}
		// ReadString holds details about calls to the ReadString method.
		ReadString []struct {
			// Delim is the delim argument value.
			Delim byte
		}
	}
}

// Reset resets the calls made to the mocked APIs.
func (mock *Prompt) Reset() {
	lockPromptReadPassword.Lock()
	mock.calls.ReadPassword = nil
	lockPromptReadPassword.Unlock()
	lockPromptReadString.Lock()
	mock.calls.ReadString = nil
	lockPromptReadString.Unlock()
}

// ReadPassword calls ReadPasswordFunc.
func (mock *Prompt) ReadPassword(fd int) ([]byte, error) {
	if mock.ReadPasswordFunc == nil {
		panic("moq: Prompt.ReadPasswordFunc is nil but Prompt.ReadPassword was just called")
	}
	callInfo := struct {
		Fd int
	}{
		Fd: fd,
	}
	lockPromptReadPassword.Lock()
	mock.calls.ReadPassword = append(mock.calls.ReadPassword, callInfo)
	lockPromptReadPassword.Unlock()
	return mock.ReadPasswordFunc(fd)
}

// ReadPasswordCalled returns true if at least one call was made to ReadPassword.
func (mock *Prompt) ReadPasswordCalled() bool {
	lockPromptReadPassword.RLock()
	defer lockPromptReadPassword.RUnlock()
	return len(mock.calls.ReadPassword) > 0
}

// ReadPasswordCalls gets all the calls that were made to ReadPassword.
// Check the length with:
//     len(mockedPrompt.ReadPasswordCalls())
func (mock *Prompt) ReadPasswordCalls() []struct {
	Fd int
} {
	var calls []struct {
		Fd int
	}
	lockPromptReadPassword.RLock()
	calls = mock.calls.ReadPassword
	lockPromptReadPassword.RUnlock()
	return calls
}

// ReadString calls ReadStringFunc.
func (mock *Prompt) ReadString(delim byte) (string, error) {
	if mock.ReadStringFunc == nil {
		panic("moq: Prompt.ReadStringFunc is nil but Prompt.ReadString was just called")
	}
	callInfo := struct {
		Delim byte
	}{
		Delim: delim,
	}
	lockPromptReadString.Lock()
	mock.calls.ReadString = append(mock.calls.ReadString, callInfo)
	lockPromptReadString.Unlock()
	return mock.ReadStringFunc(delim)
}

// ReadStringCalled returns true if at least one call was made to ReadString.
func (mock *Prompt) ReadStringCalled() bool {
	lockPromptReadString.RLock()
	defer lockPromptReadString.RUnlock()
	return len(mock.calls.ReadString) > 0
}

// ReadStringCalls gets all the calls that were made to ReadString.
// Check the length with:
//     len(mockedPrompt.ReadStringCalls())
func (mock *Prompt) ReadStringCalls() []struct {
	Delim byte
} {
	var calls []struct {
		Delim byte
	}
	lockPromptReadString.RLock()
	calls = mock.calls.ReadString
	lockPromptReadString.RUnlock()
	return calls
}
