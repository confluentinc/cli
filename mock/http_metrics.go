// Code generated by mocker; DO NOT EDIT
// github.com/travisjeffery/mocker
package mock

import (
	metricsv1 "github.com/confluentinc/cc-structs/kafka/metrics/v1"
	"net/http"
	"sync"
)

var (
	lockMetricsKafkaMetrics          sync.RWMutex
	lockMetricsSchemaRegistryMetrics sync.RWMutex
)

// Metrics is a mock implementation of Metrics.
//
//     func TestSomethingThatUsesMetrics(t *testing.T) {
//
//         // make and configure a mocked Metrics
//         mockedMetrics := &Metrics{
//             KafkaMetricsFunc: func(clusterIDs []string,dateStart string,dateEnd string) (map[string]*metricsv1.KafkaMetric, *http.Response, error) {
// 	               panic("TODO: mock out the KafkaMetrics method")
//             },
//             SchemaRegistryMetricsFunc: func(clusterID string) (*metricsv1.SchemaRegistryMetric, *http.Response, error) {
// 	               panic("TODO: mock out the SchemaRegistryMetrics method")
//             },
//         }
//
//         // TODO: use mockedMetrics in code that requires Metrics
//         //       and then make assertions.
//
//     }
type Metrics struct {
	// KafkaMetricsFunc mocks the KafkaMetrics method.
	KafkaMetricsFunc func(clusterIDs []string, dateStart string, dateEnd string) (map[string]*metricsv1.KafkaMetric, *http.Response, error)

	// SchemaRegistryMetricsFunc mocks the SchemaRegistryMetrics method.
	SchemaRegistryMetricsFunc func(clusterID string) (*metricsv1.SchemaRegistryMetric, *http.Response, error)

	// calls tracks calls to the methods.
	calls struct {
		// KafkaMetrics holds details about calls to the KafkaMetrics method.
		KafkaMetrics []struct {
			// ClusterIDs is the clusterIDs argument value.
			ClusterIDs []string
			// DateStart is the dateStart argument value.
			DateStart string
			// DateEnd is the dateEnd argument value.
			DateEnd string
		}
		// SchemaRegistryMetrics holds details about calls to the SchemaRegistryMetrics method.
		SchemaRegistryMetrics []struct {
			// ClusterID is the clusterID argument value.
			ClusterID string
		}
	}
}

// Reset resets the calls made to the mocked APIs.
func (mock *Metrics) Reset() {
	lockMetricsKafkaMetrics.Lock()
	mock.calls.KafkaMetrics = nil
	lockMetricsKafkaMetrics.Unlock()
	lockMetricsSchemaRegistryMetrics.Lock()
	mock.calls.SchemaRegistryMetrics = nil
	lockMetricsSchemaRegistryMetrics.Unlock()
}

// KafkaMetrics calls KafkaMetricsFunc.
func (mock *Metrics) KafkaMetrics(clusterIDs []string, dateStart string, dateEnd string) (map[string]*metricsv1.KafkaMetric, *http.Response, error) {
	if mock.KafkaMetricsFunc == nil {
		panic("moq: Metrics.KafkaMetricsFunc is nil but Metrics.KafkaMetrics was just called")
	}
	callInfo := struct {
		ClusterIDs []string
		DateStart  string
		DateEnd    string
	}{
		ClusterIDs: clusterIDs,
		DateStart:  dateStart,
		DateEnd:    dateEnd,
	}
	lockMetricsKafkaMetrics.Lock()
	mock.calls.KafkaMetrics = append(mock.calls.KafkaMetrics, callInfo)
	lockMetricsKafkaMetrics.Unlock()
	return mock.KafkaMetricsFunc(clusterIDs, dateStart, dateEnd)
}

// KafkaMetricsCalled returns true if at least one call was made to KafkaMetrics.
func (mock *Metrics) KafkaMetricsCalled() bool {
	lockMetricsKafkaMetrics.RLock()
	defer lockMetricsKafkaMetrics.RUnlock()
	return len(mock.calls.KafkaMetrics) > 0
}

// KafkaMetricsCalls gets all the calls that were made to KafkaMetrics.
// Check the length with:
//     len(mockedMetrics.KafkaMetricsCalls())
func (mock *Metrics) KafkaMetricsCalls() []struct {
	ClusterIDs []string
	DateStart  string
	DateEnd    string
} {
	var calls []struct {
		ClusterIDs []string
		DateStart  string
		DateEnd    string
	}
	lockMetricsKafkaMetrics.RLock()
	calls = mock.calls.KafkaMetrics
	lockMetricsKafkaMetrics.RUnlock()
	return calls
}

// SchemaRegistryMetrics calls SchemaRegistryMetricsFunc.
func (mock *Metrics) SchemaRegistryMetrics(clusterID string) (*metricsv1.SchemaRegistryMetric, *http.Response, error) {
	if mock.SchemaRegistryMetricsFunc == nil {
		panic("moq: Metrics.SchemaRegistryMetricsFunc is nil but Metrics.SchemaRegistryMetrics was just called")
	}
	callInfo := struct {
		ClusterID string
	}{
		ClusterID: clusterID,
	}
	lockMetricsSchemaRegistryMetrics.Lock()
	mock.calls.SchemaRegistryMetrics = append(mock.calls.SchemaRegistryMetrics, callInfo)
	lockMetricsSchemaRegistryMetrics.Unlock()
	return mock.SchemaRegistryMetricsFunc(clusterID)
}

// SchemaRegistryMetricsCalled returns true if at least one call was made to SchemaRegistryMetrics.
func (mock *Metrics) SchemaRegistryMetricsCalled() bool {
	lockMetricsSchemaRegistryMetrics.RLock()
	defer lockMetricsSchemaRegistryMetrics.RUnlock()
	return len(mock.calls.SchemaRegistryMetrics) > 0
}

// SchemaRegistryMetricsCalls gets all the calls that were made to SchemaRegistryMetrics.
// Check the length with:
//     len(mockedMetrics.SchemaRegistryMetricsCalls())
func (mock *Metrics) SchemaRegistryMetricsCalls() []struct {
	ClusterID string
} {
	var calls []struct {
		ClusterID string
	}
	lockMetricsSchemaRegistryMetrics.RLock()
	calls = mock.calls.SchemaRegistryMetrics
	lockMetricsSchemaRegistryMetrics.RUnlock()
	return calls
}
