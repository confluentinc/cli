// Code generated by mocker. DO NOT EDIT.
// github.com/travisjeffery/mocker
// Source: plugin.go

package mock

import (
	sync "sync"

	github_com_confluentinc_cli_command_common "github.com/confluentinc/cli/command/common"
)

// GRPCPluginFactory is a mock of GRPCPluginFactory interface
type GRPCPluginFactory struct {
	lockCreate sync.Mutex
	CreateFunc func(name string) github_com_confluentinc_cli_command_common.GRPCPlugin

	calls struct {
		Create []struct {
			Name string
		}
	}
}

// Create mocks base method by wrapping the associated func.
func (m *GRPCPluginFactory) Create(name string) github_com_confluentinc_cli_command_common.GRPCPlugin {
	m.lockCreate.Lock()
	defer m.lockCreate.Unlock()

	if m.CreateFunc == nil {
		panic("mocker: GRPCPluginFactory.CreateFunc is nil but GRPCPluginFactory.Create was called.")
	}

	call := struct {
		Name string
	}{
		Name: name,
	}

	m.calls.Create = append(m.calls.Create, call)

	return m.CreateFunc(name)
}

// CreateCalled returns true if Create was called at least once.
func (m *GRPCPluginFactory) CreateCalled() bool {
	m.lockCreate.Lock()
	defer m.lockCreate.Unlock()

	return len(m.calls.Create) > 0
}

// CreateCalls returns the calls made to Create.
func (m *GRPCPluginFactory) CreateCalls() []struct {
	Name string
} {
	m.lockCreate.Lock()
	defer m.lockCreate.Unlock()

	return m.calls.Create
}

// Reset resets the calls made to the mocked methods.
func (m *GRPCPluginFactory) Reset() {
	m.lockCreate.Lock()
	m.calls.Create = nil
	m.lockCreate.Unlock()
}
