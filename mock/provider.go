// Code generated by mocker. DO NOT EDIT.
// github.com/travisjeffery/mocker
// Source: cli.go

package mock

import (
	sync "sync"
)

// Provider is a mock of Provider interface
type Provider struct {
	lockLookupPlugin sync.Mutex
	LookupPluginFunc func() (string, error)

	lockLoadPlugin sync.Mutex
	LoadPluginFunc func(arg0 interface{}) error

	calls struct {
		LookupPlugin []struct {
		}
		LoadPlugin []struct {
			Arg0 interface{}
		}
	}
}

// LookupPlugin mocks base method by wrapping the associated func.
func (m *Provider) LookupPlugin() (string, error) {
	m.lockLookupPlugin.Lock()
	defer m.lockLookupPlugin.Unlock()

	if m.LookupPluginFunc == nil {
		panic("mocker: Provider.LookupPluginFunc is nil but Provider.LookupPlugin was called.")
	}

	call := struct {
	}{}

	m.calls.LookupPlugin = append(m.calls.LookupPlugin, call)

	return m.LookupPluginFunc()
}

// LookupPluginCalled returns true if LookupPlugin was called at least once.
func (m *Provider) LookupPluginCalled() bool {
	m.lockLookupPlugin.Lock()
	defer m.lockLookupPlugin.Unlock()

	return len(m.calls.LookupPlugin) > 0
}

// LookupPluginCalls returns the calls made to LookupPlugin.
func (m *Provider) LookupPluginCalls() []struct {
} {
	m.lockLookupPlugin.Lock()
	defer m.lockLookupPlugin.Unlock()

	return m.calls.LookupPlugin
}

// LoadPlugin mocks base method by wrapping the associated func.
func (m *Provider) LoadPlugin(arg0 interface{}) error {
	m.lockLoadPlugin.Lock()
	defer m.lockLoadPlugin.Unlock()

	if m.LoadPluginFunc == nil {
		panic("mocker: Provider.LoadPluginFunc is nil but Provider.LoadPlugin was called.")
	}

	call := struct {
		Arg0 interface{}
	}{
		Arg0: arg0,
	}

	m.calls.LoadPlugin = append(m.calls.LoadPlugin, call)

	return m.LoadPluginFunc(arg0)
}

// LoadPluginCalled returns true if LoadPlugin was called at least once.
func (m *Provider) LoadPluginCalled() bool {
	m.lockLoadPlugin.Lock()
	defer m.lockLoadPlugin.Unlock()

	return len(m.calls.LoadPlugin) > 0
}

// LoadPluginCalls returns the calls made to LoadPlugin.
func (m *Provider) LoadPluginCalls() []struct {
	Arg0 interface{}
} {
	m.lockLoadPlugin.Lock()
	defer m.lockLoadPlugin.Unlock()

	return m.calls.LoadPlugin
}

// Reset resets the calls made to the mocked methods.
func (m *Provider) Reset() {
	m.lockLookupPlugin.Lock()
	m.calls.LookupPlugin = nil
	m.lockLookupPlugin.Unlock()
	m.lockLoadPlugin.Lock()
	m.calls.LoadPlugin = nil
	m.lockLoadPlugin.Unlock()
}
