// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/confluentinc/cli/v3/pkg/flink/types (interfaces: InputControllerInterface)
//
// Generated by this command:
//
//	mockgen -destination input_controller_mock.go -package=mock github.com/confluentinc/cli/v3/pkg/flink/types InputControllerInterface
//
// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockInputControllerInterface is a mock of InputControllerInterface interface.
type MockInputControllerInterface struct {
	ctrl     *gomock.Controller
	recorder *MockInputControllerInterfaceMockRecorder
}

// MockInputControllerInterfaceMockRecorder is the mock recorder for MockInputControllerInterface.
type MockInputControllerInterfaceMockRecorder struct {
	mock *MockInputControllerInterface
}

// NewMockInputControllerInterface creates a new mock instance.
func NewMockInputControllerInterface(ctrl *gomock.Controller) *MockInputControllerInterface {
	mock := &MockInputControllerInterface{ctrl: ctrl}
	mock.recorder = &MockInputControllerInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockInputControllerInterface) EXPECT() *MockInputControllerInterfaceMockRecorder {
	return m.recorder
}

// GetUserInput mocks base method.
func (m *MockInputControllerInterface) GetUserInput() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserInput")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetUserInput indicates an expected call of GetUserInput.
func (mr *MockInputControllerInterfaceMockRecorder) GetUserInput() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserInput", reflect.TypeOf((*MockInputControllerInterface)(nil).GetUserInput))
}

// GetWindowWidth mocks base method.
func (m *MockInputControllerInterface) GetWindowWidth() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWindowWidth")
	ret0, _ := ret[0].(int)
	return ret0
}

// GetWindowWidth indicates an expected call of GetWindowWidth.
func (mr *MockInputControllerInterfaceMockRecorder) GetWindowWidth() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWindowWidth", reflect.TypeOf((*MockInputControllerInterface)(nil).GetWindowWidth))
}

// HasUserEnabledReverseSearch mocks base method.
func (m *MockInputControllerInterface) HasUserEnabledReverseSearch() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HasUserEnabledReverseSearch")
	ret0, _ := ret[0].(bool)
	return ret0
}

// HasUserEnabledReverseSearch indicates an expected call of HasUserEnabledReverseSearch.
func (mr *MockInputControllerInterfaceMockRecorder) HasUserEnabledReverseSearch() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasUserEnabledReverseSearch", reflect.TypeOf((*MockInputControllerInterface)(nil).HasUserEnabledReverseSearch))
}

// HasUserInitiatedExit mocks base method.
func (m *MockInputControllerInterface) HasUserInitiatedExit(arg0 string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HasUserInitiatedExit", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// HasUserInitiatedExit indicates an expected call of HasUserInitiatedExit.
func (mr *MockInputControllerInterfaceMockRecorder) HasUserInitiatedExit(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasUserInitiatedExit", reflect.TypeOf((*MockInputControllerInterface)(nil).HasUserInitiatedExit), arg0)
}

// StartReverseSearch mocks base method.
func (m *MockInputControllerInterface) StartReverseSearch() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "StartReverseSearch")
}

// StartReverseSearch indicates an expected call of StartReverseSearch.
func (mr *MockInputControllerInterfaceMockRecorder) StartReverseSearch() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartReverseSearch", reflect.TypeOf((*MockInputControllerInterface)(nil).StartReverseSearch))
}
