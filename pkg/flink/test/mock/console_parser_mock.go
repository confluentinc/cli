// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/confluentinc/go-prompt (interfaces: ConsoleParser)
//
// Generated by this command:
//
//	mockgen -destination console_parser_mock.go -package=mock github.com/confluentinc/go-prompt ConsoleParser
//
// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	prompt "github.com/confluentinc/go-prompt"
	gomock "go.uber.org/mock/gomock"
)

// MockConsoleParser is a mock of ConsoleParser interface.
type MockConsoleParser struct {
	ctrl     *gomock.Controller
	recorder *MockConsoleParserMockRecorder
}

// MockConsoleParserMockRecorder is the mock recorder for MockConsoleParser.
type MockConsoleParserMockRecorder struct {
	mock *MockConsoleParser
}

// NewMockConsoleParser creates a new mock instance.
func NewMockConsoleParser(ctrl *gomock.Controller) *MockConsoleParser {
	mock := &MockConsoleParser{ctrl: ctrl}
	mock.recorder = &MockConsoleParserMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockConsoleParser) EXPECT() *MockConsoleParserMockRecorder {
	return m.recorder
}

// GetWinSize mocks base method.
func (m *MockConsoleParser) GetWinSize() *prompt.WinSize {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWinSize")
	ret0, _ := ret[0].(*prompt.WinSize)
	return ret0
}

// GetWinSize indicates an expected call of GetWinSize.
func (mr *MockConsoleParserMockRecorder) GetWinSize() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWinSize", reflect.TypeOf((*MockConsoleParser)(nil).GetWinSize))
}

// Read mocks base method.
func (m *MockConsoleParser) Read() ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Read")
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Read indicates an expected call of Read.
func (mr *MockConsoleParserMockRecorder) Read() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Read", reflect.TypeOf((*MockConsoleParser)(nil).Read))
}

// Setup mocks base method.
func (m *MockConsoleParser) Setup() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Setup")
	ret0, _ := ret[0].(error)
	return ret0
}

// Setup indicates an expected call of Setup.
func (mr *MockConsoleParserMockRecorder) Setup() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Setup", reflect.TypeOf((*MockConsoleParser)(nil).Setup))
}

// TearDown mocks base method.
func (m *MockConsoleParser) TearDown() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TearDown")
	ret0, _ := ret[0].(error)
	return ret0
}

// TearDown indicates an expected call of TearDown.
func (mr *MockConsoleParserMockRecorder) TearDown() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TearDown", reflect.TypeOf((*MockConsoleParser)(nil).TearDown))
}
