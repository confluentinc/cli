// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/confluentinc/cli/v4/pkg/flink/types (interfaces: StoreInterface)
//
// Generated by this command:
//
//	mockgen -destination store_mock.go -package=mock github.com/confluentinc/cli/v4/pkg/flink/types StoreInterface
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	types "github.com/confluentinc/cli/v4/pkg/flink/types"
	gomock "go.uber.org/mock/gomock"
)

// MockStoreInterface is a mock of StoreInterface interface.
type MockStoreInterface struct {
	ctrl     *gomock.Controller
	recorder *MockStoreInterfaceMockRecorder
	isgomock struct{}
}

// MockStoreInterfaceMockRecorder is the mock recorder for MockStoreInterface.
type MockStoreInterfaceMockRecorder struct {
	mock *MockStoreInterface
}

// NewMockStoreInterface creates a new mock instance.
func NewMockStoreInterface(ctrl *gomock.Controller) *MockStoreInterface {
	mock := &MockStoreInterface{ctrl: ctrl}
	mock.recorder = &MockStoreInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStoreInterface) EXPECT() *MockStoreInterfaceMockRecorder {
	return m.recorder
}

// DeleteStatement mocks base method.
func (m *MockStoreInterface) DeleteStatement(statementName string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteStatement", statementName)
	ret0, _ := ret[0].(bool)
	return ret0
}

// DeleteStatement indicates an expected call of DeleteStatement.
func (mr *MockStoreInterfaceMockRecorder) DeleteStatement(statementName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteStatement", reflect.TypeOf((*MockStoreInterface)(nil).DeleteStatement), statementName)
}

// FetchStatementResults mocks base method.
func (m *MockStoreInterface) FetchStatementResults(arg0 types.ProcessedStatement) (*types.ProcessedStatement, *types.StatementError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchStatementResults", arg0)
	ret0, _ := ret[0].(*types.ProcessedStatement)
	ret1, _ := ret[1].(*types.StatementError)
	return ret0, ret1
}

// FetchStatementResults indicates an expected call of FetchStatementResults.
func (mr *MockStoreInterfaceMockRecorder) FetchStatementResults(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchStatementResults", reflect.TypeOf((*MockStoreInterface)(nil).FetchStatementResults), arg0)
}

// ProcessStatement mocks base method.
func (m *MockStoreInterface) ProcessStatement(statement string) (*types.ProcessedStatement, *types.StatementError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProcessStatement", statement)
	ret0, _ := ret[0].(*types.ProcessedStatement)
	ret1, _ := ret[1].(*types.StatementError)
	return ret0, ret1
}

// ProcessStatement indicates an expected call of ProcessStatement.
func (mr *MockStoreInterfaceMockRecorder) ProcessStatement(statement any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProcessStatement", reflect.TypeOf((*MockStoreInterface)(nil).ProcessStatement), statement)
}

// StopStatement mocks base method.
func (m *MockStoreInterface) StopStatement(statementName string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StopStatement", statementName)
	ret0, _ := ret[0].(bool)
	return ret0
}

// StopStatement indicates an expected call of StopStatement.
func (mr *MockStoreInterfaceMockRecorder) StopStatement(statementName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopStatement", reflect.TypeOf((*MockStoreInterface)(nil).StopStatement), statementName)
}

// WaitForTerminalStatementState mocks base method.
func (m *MockStoreInterface) WaitForTerminalStatementState(ctx context.Context, statement types.ProcessedStatement) (*types.ProcessedStatement, *types.StatementError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WaitForTerminalStatementState", ctx, statement)
	ret0, _ := ret[0].(*types.ProcessedStatement)
	ret1, _ := ret[1].(*types.StatementError)
	return ret0, ret1
}

// WaitForTerminalStatementState indicates an expected call of WaitForTerminalStatementState.
func (mr *MockStoreInterfaceMockRecorder) WaitForTerminalStatementState(ctx, statement any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WaitForTerminalStatementState", reflect.TypeOf((*MockStoreInterface)(nil).WaitForTerminalStatementState), ctx, statement)
}

// WaitPendingStatement mocks base method.
func (m *MockStoreInterface) WaitPendingStatement(ctx context.Context, statement types.ProcessedStatement) (*types.ProcessedStatement, *types.StatementError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WaitPendingStatement", ctx, statement)
	ret0, _ := ret[0].(*types.ProcessedStatement)
	ret1, _ := ret[1].(*types.StatementError)
	return ret0, ret1
}

// WaitPendingStatement indicates an expected call of WaitPendingStatement.
func (mr *MockStoreInterfaceMockRecorder) WaitPendingStatement(ctx, statement any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WaitPendingStatement", reflect.TypeOf((*MockStoreInterface)(nil).WaitPendingStatement), ctx, statement)
}
