// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/confluentinc/cli/v3/pkg/flink/types (interfaces: ApplicationControllerInterface)

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	types "github.com/confluentinc/cli/v3/pkg/flink/types"
	gomock "github.com/golang/mock/gomock"
)

// MockApplicationControllerInterface is a mock of ApplicationControllerInterface interface.
type MockApplicationControllerInterface struct {
	ctrl     *gomock.Controller
	recorder *MockApplicationControllerInterfaceMockRecorder
}

// MockApplicationControllerInterfaceMockRecorder is the mock recorder for MockApplicationControllerInterface.
type MockApplicationControllerInterfaceMockRecorder struct {
	mock *MockApplicationControllerInterface
}

// NewMockApplicationControllerInterface creates a new mock instance.
func NewMockApplicationControllerInterface(ctrl *gomock.Controller) *MockApplicationControllerInterface {
	mock := &MockApplicationControllerInterface{ctrl: ctrl}
	mock.recorder = &MockApplicationControllerInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockApplicationControllerInterface) EXPECT() *MockApplicationControllerInterfaceMockRecorder {
	return m.recorder
}

// AddCleanupFunction mocks base method.
func (m *MockApplicationControllerInterface) AddCleanupFunction(arg0 func()) types.ApplicationControllerInterface {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddCleanupFunction", arg0)
	ret0, _ := ret[0].(types.ApplicationControllerInterface)
	return ret0
}

// AddCleanupFunction indicates an expected call of AddCleanupFunction.
func (mr *MockApplicationControllerInterfaceMockRecorder) AddCleanupFunction(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddCleanupFunction", reflect.TypeOf((*MockApplicationControllerInterface)(nil).AddCleanupFunction), arg0)
}

// ExitApplication mocks base method.
func (m *MockApplicationControllerInterface) ExitApplication() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ExitApplication")
}

// ExitApplication indicates an expected call of ExitApplication.
func (mr *MockApplicationControllerInterfaceMockRecorder) ExitApplication() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExitApplication", reflect.TypeOf((*MockApplicationControllerInterface)(nil).ExitApplication))
}
