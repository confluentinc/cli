// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/confluentinc/cli/v3/pkg/ccloudv2 (interfaces: GatewayClientInterface)
//
// Generated by this command:
//
//	mockgen -destination gateway_client_mock.go -package=mock github.com/confluentinc/cli/v3/pkg/ccloudv2 GatewayClientInterface
//
// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	v1beta1 "github.com/confluentinc/ccloud-sdk-go-v2/flink-gateway/v1beta1"
	gomock "go.uber.org/mock/gomock"
)

// MockGatewayClientInterface is a mock of GatewayClientInterface interface.
type MockGatewayClientInterface struct {
	ctrl     *gomock.Controller
	recorder *MockGatewayClientInterfaceMockRecorder
}

// MockGatewayClientInterfaceMockRecorder is the mock recorder for MockGatewayClientInterface.
type MockGatewayClientInterfaceMockRecorder struct {
	mock *MockGatewayClientInterface
}

// NewMockGatewayClientInterface creates a new mock instance.
func NewMockGatewayClientInterface(ctrl *gomock.Controller) *MockGatewayClientInterface {
	mock := &MockGatewayClientInterface{ctrl: ctrl}
	mock.recorder = &MockGatewayClientInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGatewayClientInterface) EXPECT() *MockGatewayClientInterfaceMockRecorder {
	return m.recorder
}

// CreateStatement mocks base method.
func (m *MockGatewayClientInterface) CreateStatement(arg0 v1beta1.SqlV1beta1Statement, arg1, arg2, arg3 string) (v1beta1.SqlV1beta1Statement, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateStatement", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(v1beta1.SqlV1beta1Statement)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateStatement indicates an expected call of CreateStatement.
func (mr *MockGatewayClientInterfaceMockRecorder) CreateStatement(arg0, arg1, arg2, arg3 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateStatement", reflect.TypeOf((*MockGatewayClientInterface)(nil).CreateStatement), arg0, arg1, arg2, arg3)
}

// DeleteStatement mocks base method.
func (m *MockGatewayClientInterface) DeleteStatement(arg0, arg1, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteStatement", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteStatement indicates an expected call of DeleteStatement.
func (mr *MockGatewayClientInterfaceMockRecorder) DeleteStatement(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteStatement", reflect.TypeOf((*MockGatewayClientInterface)(nil).DeleteStatement), arg0, arg1, arg2)
}

// GetExceptions mocks base method.
func (m *MockGatewayClientInterface) GetExceptions(arg0, arg1, arg2 string) (v1beta1.SqlV1beta1StatementExceptionList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetExceptions", arg0, arg1, arg2)
	ret0, _ := ret[0].(v1beta1.SqlV1beta1StatementExceptionList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetExceptions indicates an expected call of GetExceptions.
func (mr *MockGatewayClientInterfaceMockRecorder) GetExceptions(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetExceptions", reflect.TypeOf((*MockGatewayClientInterface)(nil).GetExceptions), arg0, arg1, arg2)
}

// GetStatement mocks base method.
func (m *MockGatewayClientInterface) GetStatement(arg0, arg1, arg2 string) (v1beta1.SqlV1beta1Statement, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStatement", arg0, arg1, arg2)
	ret0, _ := ret[0].(v1beta1.SqlV1beta1Statement)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStatement indicates an expected call of GetStatement.
func (mr *MockGatewayClientInterfaceMockRecorder) GetStatement(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStatement", reflect.TypeOf((*MockGatewayClientInterface)(nil).GetStatement), arg0, arg1, arg2)
}

// GetStatementResults mocks base method.
func (m *MockGatewayClientInterface) GetStatementResults(arg0, arg1, arg2, arg3 string) (v1beta1.SqlV1beta1StatementResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStatementResults", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(v1beta1.SqlV1beta1StatementResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStatementResults indicates an expected call of GetStatementResults.
func (mr *MockGatewayClientInterfaceMockRecorder) GetStatementResults(arg0, arg1, arg2, arg3 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStatementResults", reflect.TypeOf((*MockGatewayClientInterface)(nil).GetStatementResults), arg0, arg1, arg2, arg3)
}

// ListStatements mocks base method.
func (m *MockGatewayClientInterface) ListStatements(arg0, arg1, arg2, arg3 string) (v1beta1.SqlV1beta1StatementList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListStatements", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(v1beta1.SqlV1beta1StatementList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListStatements indicates an expected call of ListStatements.
func (mr *MockGatewayClientInterfaceMockRecorder) ListStatements(arg0, arg1, arg2, arg3 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListStatements", reflect.TypeOf((*MockGatewayClientInterface)(nil).ListStatements), arg0, arg1, arg2, arg3)
}

// UpdateStatement mocks base method.
func (m *MockGatewayClientInterface) UpdateStatement(arg0, arg1, arg2 string, arg3 v1beta1.SqlV1beta1Statement) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateStatement", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateStatement indicates an expected call of UpdateStatement.
func (mr *MockGatewayClientInterfaceMockRecorder) UpdateStatement(arg0, arg1, arg2, arg3 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateStatement", reflect.TypeOf((*MockGatewayClientInterface)(nil).UpdateStatement), arg0, arg1, arg2, arg3)
}
