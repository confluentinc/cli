// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/confluentinc/cli/v4/pkg/ccloudv2 (interfaces: GatewayClientInterface)
//
// Generated by this command:
//
//	mockgen -destination gateway_client_mock.go -package=mock github.com/confluentinc/cli/v4/pkg/ccloudv2 GatewayClientInterface
//

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	v1 "github.com/confluentinc/ccloud-sdk-go-v2/flink-gateway/v1"
	gomock "go.uber.org/mock/gomock"
)

// MockGatewayClientInterface is a mock of GatewayClientInterface interface.
type MockGatewayClientInterface struct {
	ctrl     *gomock.Controller
	recorder *MockGatewayClientInterfaceMockRecorder
	isgomock struct{}
}

// MockGatewayClientInterfaceMockRecorder is the mock recorder for MockGatewayClientInterface.
type MockGatewayClientInterfaceMockRecorder struct {
	mock *MockGatewayClientInterface
}

// NewMockGatewayClientInterface creates a new mock instance.
func NewMockGatewayClientInterface(ctrl *gomock.Controller) *MockGatewayClientInterface {
	mock := &MockGatewayClientInterface{ctrl: ctrl}
	mock.recorder = &MockGatewayClientInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGatewayClientInterface) EXPECT() *MockGatewayClientInterfaceMockRecorder {
	return m.recorder
}

// CreateConnection mocks base method.
func (m *MockGatewayClientInterface) CreateConnection(connection v1.SqlV1Connection, environmentId, orgId string) (v1.SqlV1Connection, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateConnection", connection, environmentId, orgId)
	ret0, _ := ret[0].(v1.SqlV1Connection)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateConnection indicates an expected call of CreateConnection.
func (mr *MockGatewayClientInterfaceMockRecorder) CreateConnection(connection, environmentId, orgId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateConnection", reflect.TypeOf((*MockGatewayClientInterface)(nil).CreateConnection), connection, environmentId, orgId)
}

// CreateStatement mocks base method.
func (m *MockGatewayClientInterface) CreateStatement(statement v1.SqlV1Statement, principal, environmentId, orgId string) (v1.SqlV1Statement, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateStatement", statement, principal, environmentId, orgId)
	ret0, _ := ret[0].(v1.SqlV1Statement)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateStatement indicates an expected call of CreateStatement.
func (mr *MockGatewayClientInterfaceMockRecorder) CreateStatement(statement, principal, environmentId, orgId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateStatement", reflect.TypeOf((*MockGatewayClientInterface)(nil).CreateStatement), statement, principal, environmentId, orgId)
}

// DeleteConnection mocks base method.
func (m *MockGatewayClientInterface) DeleteConnection(environmentId, connectionName, orgId string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteConnection", environmentId, connectionName, orgId)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteConnection indicates an expected call of DeleteConnection.
func (mr *MockGatewayClientInterfaceMockRecorder) DeleteConnection(environmentId, connectionName, orgId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteConnection", reflect.TypeOf((*MockGatewayClientInterface)(nil).DeleteConnection), environmentId, connectionName, orgId)
}

// DeleteStatement mocks base method.
func (m *MockGatewayClientInterface) DeleteStatement(environmentId, statementName, orgId string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteStatement", environmentId, statementName, orgId)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteStatement indicates an expected call of DeleteStatement.
func (mr *MockGatewayClientInterfaceMockRecorder) DeleteStatement(environmentId, statementName, orgId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteStatement", reflect.TypeOf((*MockGatewayClientInterface)(nil).DeleteStatement), environmentId, statementName, orgId)
}

// GetAuthToken mocks base method.
func (m *MockGatewayClientInterface) GetAuthToken() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAuthToken")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetAuthToken indicates an expected call of GetAuthToken.
func (mr *MockGatewayClientInterfaceMockRecorder) GetAuthToken() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAuthToken", reflect.TypeOf((*MockGatewayClientInterface)(nil).GetAuthToken))
}

// GetConnection mocks base method.
func (m *MockGatewayClientInterface) GetConnection(environmentId, connectionName, orgId string) (v1.SqlV1Connection, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetConnection", environmentId, connectionName, orgId)
	ret0, _ := ret[0].(v1.SqlV1Connection)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetConnection indicates an expected call of GetConnection.
func (mr *MockGatewayClientInterfaceMockRecorder) GetConnection(environmentId, connectionName, orgId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConnection", reflect.TypeOf((*MockGatewayClientInterface)(nil).GetConnection), environmentId, connectionName, orgId)
}

// GetExceptions mocks base method.
func (m *MockGatewayClientInterface) GetExceptions(environmentId, statementId, orgId string) ([]v1.SqlV1StatementException, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetExceptions", environmentId, statementId, orgId)
	ret0, _ := ret[0].([]v1.SqlV1StatementException)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetExceptions indicates an expected call of GetExceptions.
func (mr *MockGatewayClientInterfaceMockRecorder) GetExceptions(environmentId, statementId, orgId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetExceptions", reflect.TypeOf((*MockGatewayClientInterface)(nil).GetExceptions), environmentId, statementId, orgId)
}

// GetStatement mocks base method.
func (m *MockGatewayClientInterface) GetStatement(environmentId, statementName, orgId string) (v1.SqlV1Statement, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStatement", environmentId, statementName, orgId)
	ret0, _ := ret[0].(v1.SqlV1Statement)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStatement indicates an expected call of GetStatement.
func (mr *MockGatewayClientInterfaceMockRecorder) GetStatement(environmentId, statementName, orgId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStatement", reflect.TypeOf((*MockGatewayClientInterface)(nil).GetStatement), environmentId, statementName, orgId)
}

// GetStatementResults mocks base method.
func (m *MockGatewayClientInterface) GetStatementResults(environmentId, statementId, orgId, pageToken string) (v1.SqlV1StatementResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStatementResults", environmentId, statementId, orgId, pageToken)
	ret0, _ := ret[0].(v1.SqlV1StatementResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStatementResults indicates an expected call of GetStatementResults.
func (mr *MockGatewayClientInterfaceMockRecorder) GetStatementResults(environmentId, statementId, orgId, pageToken any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStatementResults", reflect.TypeOf((*MockGatewayClientInterface)(nil).GetStatementResults), environmentId, statementId, orgId, pageToken)
}

// ListConnections mocks base method.
func (m *MockGatewayClientInterface) ListConnections(environmentId, orgId, connectionType string) ([]v1.SqlV1Connection, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListConnections", environmentId, orgId, connectionType)
	ret0, _ := ret[0].([]v1.SqlV1Connection)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListConnections indicates an expected call of ListConnections.
func (mr *MockGatewayClientInterfaceMockRecorder) ListConnections(environmentId, orgId, connectionType any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListConnections", reflect.TypeOf((*MockGatewayClientInterface)(nil).ListConnections), environmentId, orgId, connectionType)
}

// ListStatements mocks base method.
func (m *MockGatewayClientInterface) ListStatements(environmentId, orgId, computePoolId string) ([]v1.SqlV1Statement, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListStatements", environmentId, orgId, computePoolId)
	ret0, _ := ret[0].([]v1.SqlV1Statement)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListStatements indicates an expected call of ListStatements.
func (mr *MockGatewayClientInterfaceMockRecorder) ListStatements(environmentId, orgId, computePoolId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListStatements", reflect.TypeOf((*MockGatewayClientInterface)(nil).ListStatements), environmentId, orgId, computePoolId)
}

// UpdateConnection mocks base method.
func (m *MockGatewayClientInterface) UpdateConnection(environmentId, connectionName, organizationId string, connection v1.SqlV1Connection) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateConnection", environmentId, connectionName, organizationId, connection)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateConnection indicates an expected call of UpdateConnection.
func (mr *MockGatewayClientInterfaceMockRecorder) UpdateConnection(environmentId, connectionName, organizationId, connection any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateConnection", reflect.TypeOf((*MockGatewayClientInterface)(nil).UpdateConnection), environmentId, connectionName, organizationId, connection)
}

// UpdateStatement mocks base method.
func (m *MockGatewayClientInterface) UpdateStatement(environmentId, statementName, orgId string, statement v1.SqlV1Statement) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateStatement", environmentId, statementName, orgId, statement)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateStatement indicates an expected call of UpdateStatement.
func (mr *MockGatewayClientInterfaceMockRecorder) UpdateStatement(environmentId, statementName, orgId, statement any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateStatement", reflect.TypeOf((*MockGatewayClientInterface)(nil).UpdateStatement), environmentId, statementName, orgId, statement)
}
