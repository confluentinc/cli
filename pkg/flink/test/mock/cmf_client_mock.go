// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/confluentinc/cli/v4/pkg/flink (interfaces: CmfClientInterface)
//
// Generated by this command:
//
//	mockgen -destination pkg/flink/test/mock/cmf_client_mock.go -package=mock github.com/confluentinc/cli/v4/pkg/flink CmfClientInterface
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	v1 "github.com/confluentinc/cmf-sdk-go/v1"
	gomock "go.uber.org/mock/gomock"
)

// MockCmfClientInterface is a mock of CmfClientInterface interface.
type MockCmfClientInterface struct {
	ctrl     *gomock.Controller
	recorder *MockCmfClientInterfaceMockRecorder
	isgomock struct{}
}

// MockCmfClientInterfaceMockRecorder is the mock recorder for MockCmfClientInterface.
type MockCmfClientInterfaceMockRecorder struct {
	mock *MockCmfClientInterface
}

// NewMockCmfClientInterface creates a new mock instance.
func NewMockCmfClientInterface(ctrl *gomock.Controller) *MockCmfClientInterface {
	mock := &MockCmfClientInterface{ctrl: ctrl}
	mock.recorder = &MockCmfClientInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCmfClientInterface) EXPECT() *MockCmfClientInterfaceMockRecorder {
	return m.recorder
}

// CmfApiContext mocks base method.
func (m *MockCmfClientInterface) CmfApiContext() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CmfApiContext")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// CmfApiContext indicates an expected call of CmfApiContext.
func (mr *MockCmfClientInterfaceMockRecorder) CmfApiContext() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CmfApiContext", reflect.TypeOf((*MockCmfClientInterface)(nil).CmfApiContext))
}

// CreateStatement mocks base method.
func (m *MockCmfClientInterface) CreateStatement(ctx context.Context, environment string, statement v1.Statement) (v1.Statement, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateStatement", ctx, environment, statement)
	ret0, _ := ret[0].(v1.Statement)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateStatement indicates an expected call of CreateStatement.
func (mr *MockCmfClientInterfaceMockRecorder) CreateStatement(ctx, environment, statement any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateStatement", reflect.TypeOf((*MockCmfClientInterface)(nil).CreateStatement), ctx, environment, statement)
}

// DeleteStatement mocks base method.
func (m *MockCmfClientInterface) DeleteStatement(ctx context.Context, environment, statement string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteStatement", ctx, environment, statement)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteStatement indicates an expected call of DeleteStatement.
func (mr *MockCmfClientInterfaceMockRecorder) DeleteStatement(ctx, environment, statement any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteStatement", reflect.TypeOf((*MockCmfClientInterface)(nil).DeleteStatement), ctx, environment, statement)
}

// GetStatement mocks base method.
func (m *MockCmfClientInterface) GetStatement(ctx context.Context, environment, name string) (v1.Statement, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStatement", ctx, environment, name)
	ret0, _ := ret[0].(v1.Statement)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStatement indicates an expected call of GetStatement.
func (mr *MockCmfClientInterfaceMockRecorder) GetStatement(ctx, environment, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStatement", reflect.TypeOf((*MockCmfClientInterface)(nil).GetStatement), ctx, environment, name)
}

// GetStatementResults mocks base method.
func (m *MockCmfClientInterface) GetStatementResults(ctx context.Context, environment, statementName, pageToken string) (v1.StatementResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStatementResults", ctx, environment, statementName, pageToken)
	ret0, _ := ret[0].(v1.StatementResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStatementResults indicates an expected call of GetStatementResults.
func (mr *MockCmfClientInterfaceMockRecorder) GetStatementResults(ctx, environment, statementName, pageToken any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStatementResults", reflect.TypeOf((*MockCmfClientInterface)(nil).GetStatementResults), ctx, environment, statementName, pageToken)
}

// ListStatementExceptions mocks base method.
func (m *MockCmfClientInterface) ListStatementExceptions(ctx context.Context, environment, statementName string) (v1.StatementExceptionList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListStatementExceptions", ctx, environment, statementName)
	ret0, _ := ret[0].(v1.StatementExceptionList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListStatementExceptions indicates an expected call of ListStatementExceptions.
func (mr *MockCmfClientInterfaceMockRecorder) ListStatementExceptions(ctx, environment, statementName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListStatementExceptions", reflect.TypeOf((*MockCmfClientInterface)(nil).ListStatementExceptions), ctx, environment, statementName)
}

// ListStatements mocks base method.
func (m *MockCmfClientInterface) ListStatements(ctx context.Context, environment, computePool, status string) ([]v1.Statement, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListStatements", ctx, environment, computePool, status)
	ret0, _ := ret[0].([]v1.Statement)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListStatements indicates an expected call of ListStatements.
func (mr *MockCmfClientInterfaceMockRecorder) ListStatements(ctx, environment, computePool, status any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListStatements", reflect.TypeOf((*MockCmfClientInterface)(nil).ListStatements), ctx, environment, computePool, status)
}

// UpdateStatement mocks base method.
func (m *MockCmfClientInterface) UpdateStatement(ctx context.Context, environment, statementName string, statement v1.Statement) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateStatement", ctx, environment, statementName, statement)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateStatement indicates an expected call of UpdateStatement.
func (mr *MockCmfClientInterfaceMockRecorder) UpdateStatement(ctx, environment, statementName, statement any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateStatement", reflect.TypeOf((*MockCmfClientInterface)(nil).UpdateStatement), ctx, environment, statementName, statement)
}
