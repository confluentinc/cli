// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/confluentinc/cli/v3/pkg/flink/components (interfaces: TableViewInterface)
//
// Generated by this command:
//
//	mockgen -destination table_view_mock.go -package=mock github.com/confluentinc/cli/v3/pkg/flink/components TableViewInterface
//
// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"
	time "time"

	types "github.com/confluentinc/cli/v3/pkg/flink/types"
	tview "github.com/rivo/tview"
	gomock "go.uber.org/mock/gomock"
)

// MockTableViewInterface is a mock of TableViewInterface interface.
type MockTableViewInterface struct {
	ctrl     *gomock.Controller
	recorder *MockTableViewInterfaceMockRecorder
}

// MockTableViewInterfaceMockRecorder is the mock recorder for MockTableViewInterface.
type MockTableViewInterfaceMockRecorder struct {
	mock *MockTableViewInterface
}

// NewMockTableViewInterface creates a new mock instance.
func NewMockTableViewInterface(ctrl *gomock.Controller) *MockTableViewInterface {
	mock := &MockTableViewInterface{ctrl: ctrl}
	mock.recorder = &MockTableViewInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTableViewInterface) EXPECT() *MockTableViewInterfaceMockRecorder {
	return m.recorder
}

// GetFocusableElement mocks base method.
func (m *MockTableViewInterface) GetFocusableElement() *tview.Table {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFocusableElement")
	ret0, _ := ret[0].(*tview.Table)
	return ret0
}

// GetFocusableElement indicates an expected call of GetFocusableElement.
func (mr *MockTableViewInterfaceMockRecorder) GetFocusableElement() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFocusableElement", reflect.TypeOf((*MockTableViewInterface)(nil).GetFocusableElement))
}

// GetRoot mocks base method.
func (m *MockTableViewInterface) GetRoot() tview.Primitive {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRoot")
	ret0, _ := ret[0].(tview.Primitive)
	return ret0
}

// GetRoot indicates an expected call of GetRoot.
func (mr *MockTableViewInterfaceMockRecorder) GetRoot() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRoot", reflect.TypeOf((*MockTableViewInterface)(nil).GetRoot))
}

// GetSelectedRow mocks base method.
func (m *MockTableViewInterface) GetSelectedRow() *types.StatementResultRow {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSelectedRow")
	ret0, _ := ret[0].(*types.StatementResultRow)
	return ret0
}

// GetSelectedRow indicates an expected call of GetSelectedRow.
func (mr *MockTableViewInterfaceMockRecorder) GetSelectedRow() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSelectedRow", reflect.TypeOf((*MockTableViewInterface)(nil).GetSelectedRow))
}

// Init mocks base method.
func (m *MockTableViewInterface) Init() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Init")
}

// Init indicates an expected call of Init.
func (mr *MockTableViewInterfaceMockRecorder) Init() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Init", reflect.TypeOf((*MockTableViewInterface)(nil).Init))
}

// JumpDown mocks base method.
func (m *MockTableViewInterface) JumpDown() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "JumpDown")
}

// JumpDown indicates an expected call of JumpDown.
func (mr *MockTableViewInterfaceMockRecorder) JumpDown() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "JumpDown", reflect.TypeOf((*MockTableViewInterface)(nil).JumpDown))
}

// JumpUp mocks base method.
func (m *MockTableViewInterface) JumpUp() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "JumpUp")
}

// JumpUp indicates an expected call of JumpUp.
func (mr *MockTableViewInterfaceMockRecorder) JumpUp() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "JumpUp", reflect.TypeOf((*MockTableViewInterface)(nil).JumpUp))
}

// RenderTable mocks base method.
func (m *MockTableViewInterface) RenderTable(arg0 string, arg1 *types.MaterializedStatementResults, arg2 *time.Time, arg3 types.RefreshState) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RenderTable", arg0, arg1, arg2, arg3)
}

// RenderTable indicates an expected call of RenderTable.
func (mr *MockTableViewInterfaceMockRecorder) RenderTable(arg0, arg1, arg2, arg3 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RenderTable", reflect.TypeOf((*MockTableViewInterface)(nil).RenderTable), arg0, arg1, arg2, arg3)
}
