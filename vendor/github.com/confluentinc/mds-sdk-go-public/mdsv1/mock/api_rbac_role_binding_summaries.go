// Code generated by mocker. DO NOT EDIT.
// github.com/travisjeffery/mocker
// Source: api_rbac_role_binding_summaries.go

package mock

import (
	context "context"
	net_http "net/http"
	sync "sync"

	github_com_confluentinc_mds_sdk_go_public_mdsv1 "github.com/confluentinc/mds-sdk-go-public/mdsv1"
)

// RBACRoleBindingSummariesApi is a mock of RBACRoleBindingSummariesApi interface
type RBACRoleBindingSummariesApi struct {
	lockLookupPrincipalsWithRole sync.Mutex
	LookupPrincipalsWithRoleFunc func(ctx context.Context, roleName string, mdsScope github_com_confluentinc_mds_sdk_go_public_mdsv1.MdsScope) ([]string, *net_http.Response, error)

	lockLookupPrincipalsWithRoleOnResource sync.Mutex
	LookupPrincipalsWithRoleOnResourceFunc func(ctx context.Context, roleName, resourceType, resourceName string, mdsScope github_com_confluentinc_mds_sdk_go_public_mdsv1.MdsScope) ([]string, *net_http.Response, error)

	lockLookupResourcesForPrincipal sync.Mutex
	LookupResourcesForPrincipalFunc func(ctx context.Context, principal string, mdsScope github_com_confluentinc_mds_sdk_go_public_mdsv1.MdsScope) (map[string]map[string][]github_com_confluentinc_mds_sdk_go_public_mdsv1.ResourcePattern, *net_http.Response, error)

	lockScopedPrincipalRolenames sync.Mutex
	ScopedPrincipalRolenamesFunc func(ctx context.Context, principal string, mdsScope github_com_confluentinc_mds_sdk_go_public_mdsv1.MdsScope) ([]string, *net_http.Response, error)

	calls struct {
		LookupPrincipalsWithRole []struct {
			Ctx      context.Context
			RoleName string
			MdsScope github_com_confluentinc_mds_sdk_go_public_mdsv1.MdsScope
		}
		LookupPrincipalsWithRoleOnResource []struct {
			Ctx          context.Context
			RoleName     string
			ResourceType string
			ResourceName string
			MdsScope     github_com_confluentinc_mds_sdk_go_public_mdsv1.MdsScope
		}
		LookupResourcesForPrincipal []struct {
			Ctx       context.Context
			Principal string
			MdsScope  github_com_confluentinc_mds_sdk_go_public_mdsv1.MdsScope
		}
		ScopedPrincipalRolenames []struct {
			Ctx       context.Context
			Principal string
			MdsScope  github_com_confluentinc_mds_sdk_go_public_mdsv1.MdsScope
		}
	}
}

// LookupPrincipalsWithRole mocks base method by wrapping the associated func.
func (m *RBACRoleBindingSummariesApi) LookupPrincipalsWithRole(ctx context.Context, roleName string, mdsScope github_com_confluentinc_mds_sdk_go_public_mdsv1.MdsScope) ([]string, *net_http.Response, error) {
	m.lockLookupPrincipalsWithRole.Lock()
	defer m.lockLookupPrincipalsWithRole.Unlock()

	if m.LookupPrincipalsWithRoleFunc == nil {
		panic("mocker: RBACRoleBindingSummariesApi.LookupPrincipalsWithRoleFunc is nil but RBACRoleBindingSummariesApi.LookupPrincipalsWithRole was called.")
	}

	call := struct {
		Ctx      context.Context
		RoleName string
		MdsScope github_com_confluentinc_mds_sdk_go_public_mdsv1.MdsScope
	}{
		Ctx:      ctx,
		RoleName: roleName,
		MdsScope: mdsScope,
	}

	m.calls.LookupPrincipalsWithRole = append(m.calls.LookupPrincipalsWithRole, call)

	return m.LookupPrincipalsWithRoleFunc(ctx, roleName, mdsScope)
}

// LookupPrincipalsWithRoleCalled returns true if LookupPrincipalsWithRole was called at least once.
func (m *RBACRoleBindingSummariesApi) LookupPrincipalsWithRoleCalled() bool {
	m.lockLookupPrincipalsWithRole.Lock()
	defer m.lockLookupPrincipalsWithRole.Unlock()

	return len(m.calls.LookupPrincipalsWithRole) > 0
}

// LookupPrincipalsWithRoleCalls returns the calls made to LookupPrincipalsWithRole.
func (m *RBACRoleBindingSummariesApi) LookupPrincipalsWithRoleCalls() []struct {
	Ctx      context.Context
	RoleName string
	MdsScope github_com_confluentinc_mds_sdk_go_public_mdsv1.MdsScope
} {
	m.lockLookupPrincipalsWithRole.Lock()
	defer m.lockLookupPrincipalsWithRole.Unlock()

	return m.calls.LookupPrincipalsWithRole
}

// LookupPrincipalsWithRoleOnResource mocks base method by wrapping the associated func.
func (m *RBACRoleBindingSummariesApi) LookupPrincipalsWithRoleOnResource(ctx context.Context, roleName, resourceType, resourceName string, mdsScope github_com_confluentinc_mds_sdk_go_public_mdsv1.MdsScope) ([]string, *net_http.Response, error) {
	m.lockLookupPrincipalsWithRoleOnResource.Lock()
	defer m.lockLookupPrincipalsWithRoleOnResource.Unlock()

	if m.LookupPrincipalsWithRoleOnResourceFunc == nil {
		panic("mocker: RBACRoleBindingSummariesApi.LookupPrincipalsWithRoleOnResourceFunc is nil but RBACRoleBindingSummariesApi.LookupPrincipalsWithRoleOnResource was called.")
	}

	call := struct {
		Ctx          context.Context
		RoleName     string
		ResourceType string
		ResourceName string
		MdsScope     github_com_confluentinc_mds_sdk_go_public_mdsv1.MdsScope
	}{
		Ctx:          ctx,
		RoleName:     roleName,
		ResourceType: resourceType,
		ResourceName: resourceName,
		MdsScope:     mdsScope,
	}

	m.calls.LookupPrincipalsWithRoleOnResource = append(m.calls.LookupPrincipalsWithRoleOnResource, call)

	return m.LookupPrincipalsWithRoleOnResourceFunc(ctx, roleName, resourceType, resourceName, mdsScope)
}

// LookupPrincipalsWithRoleOnResourceCalled returns true if LookupPrincipalsWithRoleOnResource was called at least once.
func (m *RBACRoleBindingSummariesApi) LookupPrincipalsWithRoleOnResourceCalled() bool {
	m.lockLookupPrincipalsWithRoleOnResource.Lock()
	defer m.lockLookupPrincipalsWithRoleOnResource.Unlock()

	return len(m.calls.LookupPrincipalsWithRoleOnResource) > 0
}

// LookupPrincipalsWithRoleOnResourceCalls returns the calls made to LookupPrincipalsWithRoleOnResource.
func (m *RBACRoleBindingSummariesApi) LookupPrincipalsWithRoleOnResourceCalls() []struct {
	Ctx          context.Context
	RoleName     string
	ResourceType string
	ResourceName string
	MdsScope     github_com_confluentinc_mds_sdk_go_public_mdsv1.MdsScope
} {
	m.lockLookupPrincipalsWithRoleOnResource.Lock()
	defer m.lockLookupPrincipalsWithRoleOnResource.Unlock()

	return m.calls.LookupPrincipalsWithRoleOnResource
}

// LookupResourcesForPrincipal mocks base method by wrapping the associated func.
func (m *RBACRoleBindingSummariesApi) LookupResourcesForPrincipal(ctx context.Context, principal string, mdsScope github_com_confluentinc_mds_sdk_go_public_mdsv1.MdsScope) (map[string]map[string][]github_com_confluentinc_mds_sdk_go_public_mdsv1.ResourcePattern, *net_http.Response, error) {
	m.lockLookupResourcesForPrincipal.Lock()
	defer m.lockLookupResourcesForPrincipal.Unlock()

	if m.LookupResourcesForPrincipalFunc == nil {
		panic("mocker: RBACRoleBindingSummariesApi.LookupResourcesForPrincipalFunc is nil but RBACRoleBindingSummariesApi.LookupResourcesForPrincipal was called.")
	}

	call := struct {
		Ctx       context.Context
		Principal string
		MdsScope  github_com_confluentinc_mds_sdk_go_public_mdsv1.MdsScope
	}{
		Ctx:       ctx,
		Principal: principal,
		MdsScope:  mdsScope,
	}

	m.calls.LookupResourcesForPrincipal = append(m.calls.LookupResourcesForPrincipal, call)

	return m.LookupResourcesForPrincipalFunc(ctx, principal, mdsScope)
}

// LookupResourcesForPrincipalCalled returns true if LookupResourcesForPrincipal was called at least once.
func (m *RBACRoleBindingSummariesApi) LookupResourcesForPrincipalCalled() bool {
	m.lockLookupResourcesForPrincipal.Lock()
	defer m.lockLookupResourcesForPrincipal.Unlock()

	return len(m.calls.LookupResourcesForPrincipal) > 0
}

// LookupResourcesForPrincipalCalls returns the calls made to LookupResourcesForPrincipal.
func (m *RBACRoleBindingSummariesApi) LookupResourcesForPrincipalCalls() []struct {
	Ctx       context.Context
	Principal string
	MdsScope  github_com_confluentinc_mds_sdk_go_public_mdsv1.MdsScope
} {
	m.lockLookupResourcesForPrincipal.Lock()
	defer m.lockLookupResourcesForPrincipal.Unlock()

	return m.calls.LookupResourcesForPrincipal
}

// ScopedPrincipalRolenames mocks base method by wrapping the associated func.
func (m *RBACRoleBindingSummariesApi) ScopedPrincipalRolenames(ctx context.Context, principal string, mdsScope github_com_confluentinc_mds_sdk_go_public_mdsv1.MdsScope) ([]string, *net_http.Response, error) {
	m.lockScopedPrincipalRolenames.Lock()
	defer m.lockScopedPrincipalRolenames.Unlock()

	if m.ScopedPrincipalRolenamesFunc == nil {
		panic("mocker: RBACRoleBindingSummariesApi.ScopedPrincipalRolenamesFunc is nil but RBACRoleBindingSummariesApi.ScopedPrincipalRolenames was called.")
	}

	call := struct {
		Ctx       context.Context
		Principal string
		MdsScope  github_com_confluentinc_mds_sdk_go_public_mdsv1.MdsScope
	}{
		Ctx:       ctx,
		Principal: principal,
		MdsScope:  mdsScope,
	}

	m.calls.ScopedPrincipalRolenames = append(m.calls.ScopedPrincipalRolenames, call)

	return m.ScopedPrincipalRolenamesFunc(ctx, principal, mdsScope)
}

// ScopedPrincipalRolenamesCalled returns true if ScopedPrincipalRolenames was called at least once.
func (m *RBACRoleBindingSummariesApi) ScopedPrincipalRolenamesCalled() bool {
	m.lockScopedPrincipalRolenames.Lock()
	defer m.lockScopedPrincipalRolenames.Unlock()

	return len(m.calls.ScopedPrincipalRolenames) > 0
}

// ScopedPrincipalRolenamesCalls returns the calls made to ScopedPrincipalRolenames.
func (m *RBACRoleBindingSummariesApi) ScopedPrincipalRolenamesCalls() []struct {
	Ctx       context.Context
	Principal string
	MdsScope  github_com_confluentinc_mds_sdk_go_public_mdsv1.MdsScope
} {
	m.lockScopedPrincipalRolenames.Lock()
	defer m.lockScopedPrincipalRolenames.Unlock()

	return m.calls.ScopedPrincipalRolenames
}

// Reset resets the calls made to the mocked methods.
func (m *RBACRoleBindingSummariesApi) Reset() {
	m.lockLookupPrincipalsWithRole.Lock()
	m.calls.LookupPrincipalsWithRole = nil
	m.lockLookupPrincipalsWithRole.Unlock()
	m.lockLookupPrincipalsWithRoleOnResource.Lock()
	m.calls.LookupPrincipalsWithRoleOnResource = nil
	m.lockLookupPrincipalsWithRoleOnResource.Unlock()
	m.lockLookupResourcesForPrincipal.Lock()
	m.calls.LookupResourcesForPrincipal = nil
	m.lockLookupResourcesForPrincipal.Unlock()
	m.lockScopedPrincipalRolenames.Lock()
	m.calls.ScopedPrincipalRolenames = nil
	m.lockScopedPrincipalRolenames.Unlock()
}
