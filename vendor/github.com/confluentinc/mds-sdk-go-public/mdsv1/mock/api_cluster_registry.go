// Code generated by mocker. DO NOT EDIT.
// github.com/travisjeffery/mocker
// Source: api_cluster_registry.go

package mock

import (
	context "context"
	net_http "net/http"
	sync "sync"

	github_com_confluentinc_mds_sdk_go_public_mdsv1 "github.com/confluentinc/mds-sdk-go-public/mdsv1"
)

// ClusterRegistryApi is a mock of ClusterRegistryApi interface
type ClusterRegistryApi struct {
	lockClusterRegistryList sync.Mutex
	ClusterRegistryListFunc func(ctx context.Context, localVarOptionals *github_com_confluentinc_mds_sdk_go_public_mdsv1.ClusterRegistryListOpts) ([]github_com_confluentinc_mds_sdk_go_public_mdsv1.ClusterInfo, *net_http.Response, error)

	lockDeleteNamedCluster sync.Mutex
	DeleteNamedClusterFunc func(ctx context.Context, clusterName string) (*net_http.Response, error)

	lockGetNamedCluster sync.Mutex
	GetNamedClusterFunc func(ctx context.Context, clusterName string) (github_com_confluentinc_mds_sdk_go_public_mdsv1.ClusterInfo, *net_http.Response, error)

	lockUpdateClusters sync.Mutex
	UpdateClustersFunc func(ctx context.Context, clusterInfo []github_com_confluentinc_mds_sdk_go_public_mdsv1.ClusterInfo) (*net_http.Response, error)

	calls struct {
		ClusterRegistryList []struct {
			Ctx               context.Context
			LocalVarOptionals *github_com_confluentinc_mds_sdk_go_public_mdsv1.ClusterRegistryListOpts
		}
		DeleteNamedCluster []struct {
			Ctx         context.Context
			ClusterName string
		}
		GetNamedCluster []struct {
			Ctx         context.Context
			ClusterName string
		}
		UpdateClusters []struct {
			Ctx         context.Context
			ClusterInfo []github_com_confluentinc_mds_sdk_go_public_mdsv1.ClusterInfo
		}
	}
}

// ClusterRegistryList mocks base method by wrapping the associated func.
func (m *ClusterRegistryApi) ClusterRegistryList(ctx context.Context, localVarOptionals *github_com_confluentinc_mds_sdk_go_public_mdsv1.ClusterRegistryListOpts) ([]github_com_confluentinc_mds_sdk_go_public_mdsv1.ClusterInfo, *net_http.Response, error) {
	m.lockClusterRegistryList.Lock()
	defer m.lockClusterRegistryList.Unlock()

	if m.ClusterRegistryListFunc == nil {
		panic("mocker: ClusterRegistryApi.ClusterRegistryListFunc is nil but ClusterRegistryApi.ClusterRegistryList was called.")
	}

	call := struct {
		Ctx               context.Context
		LocalVarOptionals *github_com_confluentinc_mds_sdk_go_public_mdsv1.ClusterRegistryListOpts
	}{
		Ctx:               ctx,
		LocalVarOptionals: localVarOptionals,
	}

	m.calls.ClusterRegistryList = append(m.calls.ClusterRegistryList, call)

	return m.ClusterRegistryListFunc(ctx, localVarOptionals)
}

// ClusterRegistryListCalled returns true if ClusterRegistryList was called at least once.
func (m *ClusterRegistryApi) ClusterRegistryListCalled() bool {
	m.lockClusterRegistryList.Lock()
	defer m.lockClusterRegistryList.Unlock()

	return len(m.calls.ClusterRegistryList) > 0
}

// ClusterRegistryListCalls returns the calls made to ClusterRegistryList.
func (m *ClusterRegistryApi) ClusterRegistryListCalls() []struct {
	Ctx               context.Context
	LocalVarOptionals *github_com_confluentinc_mds_sdk_go_public_mdsv1.ClusterRegistryListOpts
} {
	m.lockClusterRegistryList.Lock()
	defer m.lockClusterRegistryList.Unlock()

	return m.calls.ClusterRegistryList
}

// DeleteNamedCluster mocks base method by wrapping the associated func.
func (m *ClusterRegistryApi) DeleteNamedCluster(ctx context.Context, clusterName string) (*net_http.Response, error) {
	m.lockDeleteNamedCluster.Lock()
	defer m.lockDeleteNamedCluster.Unlock()

	if m.DeleteNamedClusterFunc == nil {
		panic("mocker: ClusterRegistryApi.DeleteNamedClusterFunc is nil but ClusterRegistryApi.DeleteNamedCluster was called.")
	}

	call := struct {
		Ctx         context.Context
		ClusterName string
	}{
		Ctx:         ctx,
		ClusterName: clusterName,
	}

	m.calls.DeleteNamedCluster = append(m.calls.DeleteNamedCluster, call)

	return m.DeleteNamedClusterFunc(ctx, clusterName)
}

// DeleteNamedClusterCalled returns true if DeleteNamedCluster was called at least once.
func (m *ClusterRegistryApi) DeleteNamedClusterCalled() bool {
	m.lockDeleteNamedCluster.Lock()
	defer m.lockDeleteNamedCluster.Unlock()

	return len(m.calls.DeleteNamedCluster) > 0
}

// DeleteNamedClusterCalls returns the calls made to DeleteNamedCluster.
func (m *ClusterRegistryApi) DeleteNamedClusterCalls() []struct {
	Ctx         context.Context
	ClusterName string
} {
	m.lockDeleteNamedCluster.Lock()
	defer m.lockDeleteNamedCluster.Unlock()

	return m.calls.DeleteNamedCluster
}

// GetNamedCluster mocks base method by wrapping the associated func.
func (m *ClusterRegistryApi) GetNamedCluster(ctx context.Context, clusterName string) (github_com_confluentinc_mds_sdk_go_public_mdsv1.ClusterInfo, *net_http.Response, error) {
	m.lockGetNamedCluster.Lock()
	defer m.lockGetNamedCluster.Unlock()

	if m.GetNamedClusterFunc == nil {
		panic("mocker: ClusterRegistryApi.GetNamedClusterFunc is nil but ClusterRegistryApi.GetNamedCluster was called.")
	}

	call := struct {
		Ctx         context.Context
		ClusterName string
	}{
		Ctx:         ctx,
		ClusterName: clusterName,
	}

	m.calls.GetNamedCluster = append(m.calls.GetNamedCluster, call)

	return m.GetNamedClusterFunc(ctx, clusterName)
}

// GetNamedClusterCalled returns true if GetNamedCluster was called at least once.
func (m *ClusterRegistryApi) GetNamedClusterCalled() bool {
	m.lockGetNamedCluster.Lock()
	defer m.lockGetNamedCluster.Unlock()

	return len(m.calls.GetNamedCluster) > 0
}

// GetNamedClusterCalls returns the calls made to GetNamedCluster.
func (m *ClusterRegistryApi) GetNamedClusterCalls() []struct {
	Ctx         context.Context
	ClusterName string
} {
	m.lockGetNamedCluster.Lock()
	defer m.lockGetNamedCluster.Unlock()

	return m.calls.GetNamedCluster
}

// UpdateClusters mocks base method by wrapping the associated func.
func (m *ClusterRegistryApi) UpdateClusters(ctx context.Context, clusterInfo []github_com_confluentinc_mds_sdk_go_public_mdsv1.ClusterInfo) (*net_http.Response, error) {
	m.lockUpdateClusters.Lock()
	defer m.lockUpdateClusters.Unlock()

	if m.UpdateClustersFunc == nil {
		panic("mocker: ClusterRegistryApi.UpdateClustersFunc is nil but ClusterRegistryApi.UpdateClusters was called.")
	}

	call := struct {
		Ctx         context.Context
		ClusterInfo []github_com_confluentinc_mds_sdk_go_public_mdsv1.ClusterInfo
	}{
		Ctx:         ctx,
		ClusterInfo: clusterInfo,
	}

	m.calls.UpdateClusters = append(m.calls.UpdateClusters, call)

	return m.UpdateClustersFunc(ctx, clusterInfo)
}

// UpdateClustersCalled returns true if UpdateClusters was called at least once.
func (m *ClusterRegistryApi) UpdateClustersCalled() bool {
	m.lockUpdateClusters.Lock()
	defer m.lockUpdateClusters.Unlock()

	return len(m.calls.UpdateClusters) > 0
}

// UpdateClustersCalls returns the calls made to UpdateClusters.
func (m *ClusterRegistryApi) UpdateClustersCalls() []struct {
	Ctx         context.Context
	ClusterInfo []github_com_confluentinc_mds_sdk_go_public_mdsv1.ClusterInfo
} {
	m.lockUpdateClusters.Lock()
	defer m.lockUpdateClusters.Unlock()

	return m.calls.UpdateClusters
}

// Reset resets the calls made to the mocked methods.
func (m *ClusterRegistryApi) Reset() {
	m.lockClusterRegistryList.Lock()
	m.calls.ClusterRegistryList = nil
	m.lockClusterRegistryList.Unlock()
	m.lockDeleteNamedCluster.Lock()
	m.calls.DeleteNamedCluster = nil
	m.lockDeleteNamedCluster.Unlock()
	m.lockGetNamedCluster.Lock()
	m.calls.GetNamedCluster = nil
	m.lockGetNamedCluster.Unlock()
	m.lockUpdateClusters.Lock()
	m.calls.UpdateClusters = nil
	m.lockUpdateClusters.Unlock()
}
