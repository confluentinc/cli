// Code generated by mocker. DO NOT EDIT.
// github.com/travisjeffery/mocker
// Source: api_tokens_and_authentication.go

package mock

import (
	context "context"
	net_http "net/http"
	sync "sync"

	github_com_confluentinc_mds_sdk_go_public_mdsv1 "github.com/confluentinc/mds-sdk-go-public/mdsv1"
)

// TokensAndAuthenticationApi is a mock of TokensAndAuthenticationApi interface
type TokensAndAuthenticationApi struct {
	lockGetToken sync.Mutex
	GetTokenFunc func(ctx context.Context) (github_com_confluentinc_mds_sdk_go_public_mdsv1.AuthenticationResponse, *net_http.Response, error)

	calls struct {
		GetToken []struct {
			Ctx context.Context
		}
	}
}

// GetToken mocks base method by wrapping the associated func.
func (m *TokensAndAuthenticationApi) GetToken(ctx context.Context) (github_com_confluentinc_mds_sdk_go_public_mdsv1.AuthenticationResponse, *net_http.Response, error) {
	m.lockGetToken.Lock()
	defer m.lockGetToken.Unlock()

	if m.GetTokenFunc == nil {
		panic("mocker: TokensAndAuthenticationApi.GetTokenFunc is nil but TokensAndAuthenticationApi.GetToken was called.")
	}

	call := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}

	m.calls.GetToken = append(m.calls.GetToken, call)

	return m.GetTokenFunc(ctx)
}

// GetTokenCalled returns true if GetToken was called at least once.
func (m *TokensAndAuthenticationApi) GetTokenCalled() bool {
	m.lockGetToken.Lock()
	defer m.lockGetToken.Unlock()

	return len(m.calls.GetToken) > 0
}

// GetTokenCalls returns the calls made to GetToken.
func (m *TokensAndAuthenticationApi) GetTokenCalls() []struct {
	Ctx context.Context
} {
	m.lockGetToken.Lock()
	defer m.lockGetToken.Unlock()

	return m.calls.GetToken
}

// Reset resets the calls made to the mocked methods.
func (m *TokensAndAuthenticationApi) Reset() {
	m.lockGetToken.Lock()
	m.calls.GetToken = nil
	m.lockGetToken.Unlock()
}
