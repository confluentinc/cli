// Copyright 2021 Confluent Inc. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*
Confluent Schema Registry

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package schemaregistry

import (
	"encoding/json"
)

import (
	"reflect"
)

// RuleSet Schema rule set
type RuleSet struct {
	MigrationRules *[]Rule `json:"migrationRules,omitempty"`
	DomainRules *[]Rule `json:"domainRules,omitempty"`
}

// NewRuleSet instantiates a new RuleSet object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRuleSet() *RuleSet {
	this := RuleSet{}
	return &this
}

// NewRuleSetWithDefaults instantiates a new RuleSet object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRuleSetWithDefaults() *RuleSet {
	this := RuleSet{}
	return &this
}

// GetMigrationRules returns the MigrationRules field value if set, zero value otherwise.
func (o *RuleSet) GetMigrationRules() []Rule {
	if o == nil || o.MigrationRules == nil {
		var ret []Rule
		return ret
	}
	return *o.MigrationRules
}

// GetMigrationRulesOk returns a tuple with the MigrationRules field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RuleSet) GetMigrationRulesOk() (*[]Rule, bool) {
	if o == nil || o.MigrationRules == nil {
		return nil, false
	}
	return o.MigrationRules, true
}

// HasMigrationRules returns a boolean if a field has been set.
func (o *RuleSet) HasMigrationRules() bool {
	if o != nil && o.MigrationRules != nil {
		return true
	}

	return false
}

// SetMigrationRules gets a reference to the given []Rule and assigns it to the MigrationRules field.
func (o *RuleSet) SetMigrationRules(v []Rule) {
	o.MigrationRules = &v
}

// GetDomainRules returns the DomainRules field value if set, zero value otherwise.
func (o *RuleSet) GetDomainRules() []Rule {
	if o == nil || o.DomainRules == nil {
		var ret []Rule
		return ret
	}
	return *o.DomainRules
}

// GetDomainRulesOk returns a tuple with the DomainRules field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RuleSet) GetDomainRulesOk() (*[]Rule, bool) {
	if o == nil || o.DomainRules == nil {
		return nil, false
	}
	return o.DomainRules, true
}

// HasDomainRules returns a boolean if a field has been set.
func (o *RuleSet) HasDomainRules() bool {
	if o != nil && o.DomainRules != nil {
		return true
	}

	return false
}

// SetDomainRules gets a reference to the given []Rule and assigns it to the DomainRules field.
func (o *RuleSet) SetDomainRules(v []Rule) {
	o.DomainRules = &v
}

// Redact resets all sensitive fields to their zero value.
func (o *RuleSet) Redact() {
    o.recurseRedact(o.MigrationRules)
    o.recurseRedact(o.DomainRules)
}

func (o *RuleSet) recurseRedact(v interface{}) {
    type redactor interface {
        Redact()
    }
    if r, ok := v.(redactor); ok {
        r.Redact()
    } else {
        val := reflect.ValueOf(v)
        if val.Kind() == reflect.Ptr {
            val = val.Elem()
        }
        switch val.Kind() {
        case reflect.Slice, reflect.Array:
            for i := 0; i < val.Len(); i++ {
                // support data types declared without pointers
                o.recurseRedact(val.Index(i).Interface())
                // ... and data types that were declared without but need pointers (for Redact)
                if val.Index(i).CanAddr() {
                    o.recurseRedact(val.Index(i).Addr().Interface())
                }
            }
        }
    }
}

func (o RuleSet) zeroField(v interface{}) {
    p := reflect.ValueOf(v).Elem()
    p.Set(reflect.Zero(p.Type()))
}

func (o RuleSet) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.MigrationRules != nil {
		toSerialize["migrationRules"] = o.MigrationRules
	}
	if o.DomainRules != nil {
		toSerialize["domainRules"] = o.DomainRules
	}
	return json.Marshal(toSerialize)
}

type NullableRuleSet struct {
	value *RuleSet
	isSet bool
}

func (v NullableRuleSet) Get() *RuleSet {
	return v.value
}

func (v *NullableRuleSet) Set(val *RuleSet) {
	v.value = val
	v.isSet = true
}

func (v NullableRuleSet) IsSet() bool {
	return v.isSet
}

func (v *NullableRuleSet) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRuleSet(val *RuleSet) *NullableRuleSet {
	return &NullableRuleSet{value: val, isSet: true}
}

func (v NullableRuleSet) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRuleSet) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


