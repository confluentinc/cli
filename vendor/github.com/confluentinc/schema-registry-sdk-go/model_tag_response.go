// Copyright 2021 Confluent Inc. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*
Confluent Schema Registry

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package schemaregistry

import (
	"encoding/json"
)

import (
	"reflect"
)

// TagResponse struct for TagResponse
type TagResponse struct {
	TypeName *string `json:"typeName,omitempty"`
	Attributes *map[string]map[string]interface{} `json:"attributes,omitempty"`
	EntityGuid *string `json:"entityGuid,omitempty"`
	EntityStatus *string `json:"entityStatus,omitempty"`
	Propagate *bool `json:"propagate,omitempty"`
	ValidityPeriods *[]TimeBoundary `json:"validityPeriods,omitempty"`
	RemovePropagationsOnEntityDelete *bool `json:"removePropagationsOnEntityDelete,omitempty"`
	EntityType *string `json:"entityType,omitempty"`
	EntityName *string `json:"entityName,omitempty"`
	Error *ErrorMessage `json:"error,omitempty"`
}

// NewTagResponse instantiates a new TagResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTagResponse() *TagResponse {
	this := TagResponse{}
	return &this
}

// NewTagResponseWithDefaults instantiates a new TagResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTagResponseWithDefaults() *TagResponse {
	this := TagResponse{}
	return &this
}

// GetTypeName returns the TypeName field value if set, zero value otherwise.
func (o *TagResponse) GetTypeName() string {
	if o == nil || o.TypeName == nil {
		var ret string
		return ret
	}
	return *o.TypeName
}

// GetTypeNameOk returns a tuple with the TypeName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TagResponse) GetTypeNameOk() (*string, bool) {
	if o == nil || o.TypeName == nil {
		return nil, false
	}
	return o.TypeName, true
}

// HasTypeName returns a boolean if a field has been set.
func (o *TagResponse) HasTypeName() bool {
	if o != nil && o.TypeName != nil {
		return true
	}

	return false
}

// SetTypeName gets a reference to the given string and assigns it to the TypeName field.
func (o *TagResponse) SetTypeName(v string) {
	o.TypeName = &v
}

// GetAttributes returns the Attributes field value if set, zero value otherwise.
func (o *TagResponse) GetAttributes() map[string]map[string]interface{} {
	if o == nil || o.Attributes == nil {
		var ret map[string]map[string]interface{}
		return ret
	}
	return *o.Attributes
}

// GetAttributesOk returns a tuple with the Attributes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TagResponse) GetAttributesOk() (*map[string]map[string]interface{}, bool) {
	if o == nil || o.Attributes == nil {
		return nil, false
	}
	return o.Attributes, true
}

// HasAttributes returns a boolean if a field has been set.
func (o *TagResponse) HasAttributes() bool {
	if o != nil && o.Attributes != nil {
		return true
	}

	return false
}

// SetAttributes gets a reference to the given map[string]map[string]interface{} and assigns it to the Attributes field.
func (o *TagResponse) SetAttributes(v map[string]map[string]interface{}) {
	o.Attributes = &v
}

// GetEntityGuid returns the EntityGuid field value if set, zero value otherwise.
func (o *TagResponse) GetEntityGuid() string {
	if o == nil || o.EntityGuid == nil {
		var ret string
		return ret
	}
	return *o.EntityGuid
}

// GetEntityGuidOk returns a tuple with the EntityGuid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TagResponse) GetEntityGuidOk() (*string, bool) {
	if o == nil || o.EntityGuid == nil {
		return nil, false
	}
	return o.EntityGuid, true
}

// HasEntityGuid returns a boolean if a field has been set.
func (o *TagResponse) HasEntityGuid() bool {
	if o != nil && o.EntityGuid != nil {
		return true
	}

	return false
}

// SetEntityGuid gets a reference to the given string and assigns it to the EntityGuid field.
func (o *TagResponse) SetEntityGuid(v string) {
	o.EntityGuid = &v
}

// GetEntityStatus returns the EntityStatus field value if set, zero value otherwise.
func (o *TagResponse) GetEntityStatus() string {
	if o == nil || o.EntityStatus == nil {
		var ret string
		return ret
	}
	return *o.EntityStatus
}

// GetEntityStatusOk returns a tuple with the EntityStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TagResponse) GetEntityStatusOk() (*string, bool) {
	if o == nil || o.EntityStatus == nil {
		return nil, false
	}
	return o.EntityStatus, true
}

// HasEntityStatus returns a boolean if a field has been set.
func (o *TagResponse) HasEntityStatus() bool {
	if o != nil && o.EntityStatus != nil {
		return true
	}

	return false
}

// SetEntityStatus gets a reference to the given string and assigns it to the EntityStatus field.
func (o *TagResponse) SetEntityStatus(v string) {
	o.EntityStatus = &v
}

// GetPropagate returns the Propagate field value if set, zero value otherwise.
func (o *TagResponse) GetPropagate() bool {
	if o == nil || o.Propagate == nil {
		var ret bool
		return ret
	}
	return *o.Propagate
}

// GetPropagateOk returns a tuple with the Propagate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TagResponse) GetPropagateOk() (*bool, bool) {
	if o == nil || o.Propagate == nil {
		return nil, false
	}
	return o.Propagate, true
}

// HasPropagate returns a boolean if a field has been set.
func (o *TagResponse) HasPropagate() bool {
	if o != nil && o.Propagate != nil {
		return true
	}

	return false
}

// SetPropagate gets a reference to the given bool and assigns it to the Propagate field.
func (o *TagResponse) SetPropagate(v bool) {
	o.Propagate = &v
}

// GetValidityPeriods returns the ValidityPeriods field value if set, zero value otherwise.
func (o *TagResponse) GetValidityPeriods() []TimeBoundary {
	if o == nil || o.ValidityPeriods == nil {
		var ret []TimeBoundary
		return ret
	}
	return *o.ValidityPeriods
}

// GetValidityPeriodsOk returns a tuple with the ValidityPeriods field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TagResponse) GetValidityPeriodsOk() (*[]TimeBoundary, bool) {
	if o == nil || o.ValidityPeriods == nil {
		return nil, false
	}
	return o.ValidityPeriods, true
}

// HasValidityPeriods returns a boolean if a field has been set.
func (o *TagResponse) HasValidityPeriods() bool {
	if o != nil && o.ValidityPeriods != nil {
		return true
	}

	return false
}

// SetValidityPeriods gets a reference to the given []TimeBoundary and assigns it to the ValidityPeriods field.
func (o *TagResponse) SetValidityPeriods(v []TimeBoundary) {
	o.ValidityPeriods = &v
}

// GetRemovePropagationsOnEntityDelete returns the RemovePropagationsOnEntityDelete field value if set, zero value otherwise.
func (o *TagResponse) GetRemovePropagationsOnEntityDelete() bool {
	if o == nil || o.RemovePropagationsOnEntityDelete == nil {
		var ret bool
		return ret
	}
	return *o.RemovePropagationsOnEntityDelete
}

// GetRemovePropagationsOnEntityDeleteOk returns a tuple with the RemovePropagationsOnEntityDelete field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TagResponse) GetRemovePropagationsOnEntityDeleteOk() (*bool, bool) {
	if o == nil || o.RemovePropagationsOnEntityDelete == nil {
		return nil, false
	}
	return o.RemovePropagationsOnEntityDelete, true
}

// HasRemovePropagationsOnEntityDelete returns a boolean if a field has been set.
func (o *TagResponse) HasRemovePropagationsOnEntityDelete() bool {
	if o != nil && o.RemovePropagationsOnEntityDelete != nil {
		return true
	}

	return false
}

// SetRemovePropagationsOnEntityDelete gets a reference to the given bool and assigns it to the RemovePropagationsOnEntityDelete field.
func (o *TagResponse) SetRemovePropagationsOnEntityDelete(v bool) {
	o.RemovePropagationsOnEntityDelete = &v
}

// GetEntityType returns the EntityType field value if set, zero value otherwise.
func (o *TagResponse) GetEntityType() string {
	if o == nil || o.EntityType == nil {
		var ret string
		return ret
	}
	return *o.EntityType
}

// GetEntityTypeOk returns a tuple with the EntityType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TagResponse) GetEntityTypeOk() (*string, bool) {
	if o == nil || o.EntityType == nil {
		return nil, false
	}
	return o.EntityType, true
}

// HasEntityType returns a boolean if a field has been set.
func (o *TagResponse) HasEntityType() bool {
	if o != nil && o.EntityType != nil {
		return true
	}

	return false
}

// SetEntityType gets a reference to the given string and assigns it to the EntityType field.
func (o *TagResponse) SetEntityType(v string) {
	o.EntityType = &v
}

// GetEntityName returns the EntityName field value if set, zero value otherwise.
func (o *TagResponse) GetEntityName() string {
	if o == nil || o.EntityName == nil {
		var ret string
		return ret
	}
	return *o.EntityName
}

// GetEntityNameOk returns a tuple with the EntityName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TagResponse) GetEntityNameOk() (*string, bool) {
	if o == nil || o.EntityName == nil {
		return nil, false
	}
	return o.EntityName, true
}

// HasEntityName returns a boolean if a field has been set.
func (o *TagResponse) HasEntityName() bool {
	if o != nil && o.EntityName != nil {
		return true
	}

	return false
}

// SetEntityName gets a reference to the given string and assigns it to the EntityName field.
func (o *TagResponse) SetEntityName(v string) {
	o.EntityName = &v
}

// GetError returns the Error field value if set, zero value otherwise.
func (o *TagResponse) GetError() ErrorMessage {
	if o == nil || o.Error == nil {
		var ret ErrorMessage
		return ret
	}
	return *o.Error
}

// GetErrorOk returns a tuple with the Error field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TagResponse) GetErrorOk() (*ErrorMessage, bool) {
	if o == nil || o.Error == nil {
		return nil, false
	}
	return o.Error, true
}

// HasError returns a boolean if a field has been set.
func (o *TagResponse) HasError() bool {
	if o != nil && o.Error != nil {
		return true
	}

	return false
}

// SetError gets a reference to the given ErrorMessage and assigns it to the Error field.
func (o *TagResponse) SetError(v ErrorMessage) {
	o.Error = &v
}

// Redact resets all sensitive fields to their zero value.
func (o *TagResponse) Redact() {
    o.recurseRedact(o.TypeName)
    o.recurseRedact(o.Attributes)
    o.recurseRedact(o.EntityGuid)
    o.recurseRedact(o.EntityStatus)
    o.recurseRedact(o.Propagate)
    o.recurseRedact(o.ValidityPeriods)
    o.recurseRedact(o.RemovePropagationsOnEntityDelete)
    o.recurseRedact(o.EntityType)
    o.recurseRedact(o.EntityName)
    o.recurseRedact(o.Error)
}

func (o *TagResponse) recurseRedact(v interface{}) {
    type redactor interface {
        Redact()
    }
    if r, ok := v.(redactor); ok {
        r.Redact()
    } else {
        val := reflect.ValueOf(v)
        if val.Kind() == reflect.Ptr {
            val = val.Elem()
        }
        switch val.Kind() {
        case reflect.Slice, reflect.Array:
            for i := 0; i < val.Len(); i++ {
                // support data types declared without pointers
                o.recurseRedact(val.Index(i).Interface())
                // ... and data types that were declared without but need pointers (for Redact)
                if val.Index(i).CanAddr() {
                    o.recurseRedact(val.Index(i).Addr().Interface())
                }
            }
        }
    }
}

func (o TagResponse) zeroField(v interface{}) {
    p := reflect.ValueOf(v).Elem()
    p.Set(reflect.Zero(p.Type()))
}

func (o TagResponse) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.TypeName != nil {
		toSerialize["typeName"] = o.TypeName
	}
	if o.Attributes != nil {
		toSerialize["attributes"] = o.Attributes
	}
	if o.EntityGuid != nil {
		toSerialize["entityGuid"] = o.EntityGuid
	}
	if o.EntityStatus != nil {
		toSerialize["entityStatus"] = o.EntityStatus
	}
	if o.Propagate != nil {
		toSerialize["propagate"] = o.Propagate
	}
	if o.ValidityPeriods != nil {
		toSerialize["validityPeriods"] = o.ValidityPeriods
	}
	if o.RemovePropagationsOnEntityDelete != nil {
		toSerialize["removePropagationsOnEntityDelete"] = o.RemovePropagationsOnEntityDelete
	}
	if o.EntityType != nil {
		toSerialize["entityType"] = o.EntityType
	}
	if o.EntityName != nil {
		toSerialize["entityName"] = o.EntityName
	}
	if o.Error != nil {
		toSerialize["error"] = o.Error
	}
	return json.Marshal(toSerialize)
}

type NullableTagResponse struct {
	value *TagResponse
	isSet bool
}

func (v NullableTagResponse) Get() *TagResponse {
	return v.value
}

func (v *NullableTagResponse) Set(val *TagResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableTagResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableTagResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTagResponse(val *TagResponse) *NullableTagResponse {
	return &NullableTagResponse{value: val, isSet: true}
}

func (v NullableTagResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTagResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


