// Copyright 2021 Confluent Inc. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*
Confluent Schema Registry

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package schemaregistry

import (
	"encoding/json"
)

import (
	"reflect"
)

// AtlasEntity struct for AtlasEntity
type AtlasEntity struct {
	TypeName *string `json:"typeName,omitempty"`
	Attributes *map[string]interface{} `json:"attributes,omitempty"`
	Guid *string `json:"guid,omitempty"`
	HomeId *string `json:"homeId,omitempty"`
	IsProxy *bool `json:"isProxy,omitempty"`
	IsIncomplete *bool `json:"isIncomplete,omitempty"`
	ProvenanceType *int32 `json:"provenanceType,omitempty"`
	Status *string `json:"status,omitempty"`
	CreatedBy *string `json:"createdBy,omitempty"`
	UpdatedBy *string `json:"updatedBy,omitempty"`
	CreateTime *int64 `json:"createTime,omitempty"`
	UpdateTime *int64 `json:"updateTime,omitempty"`
	Version *int64 `json:"version,omitempty"`
	RelationshipAttributes *map[string]interface{} `json:"relationshipAttributes,omitempty"`
	Classifications *[]AtlasClassification `json:"classifications,omitempty"`
	Meanings *[]AtlasTermAssignmentHeader `json:"meanings,omitempty"`
	CustomAttributes *map[string]string `json:"customAttributes,omitempty"`
	BusinessAttributes *map[string]map[string]interface{} `json:"businessAttributes,omitempty"`
	Labels *[]string `json:"labels,omitempty"`
	PendingTasks *[]string `json:"pendingTasks,omitempty"`
	Proxy *bool `json:"proxy,omitempty"`
}

// NewAtlasEntity instantiates a new AtlasEntity object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAtlasEntity() *AtlasEntity {
	this := AtlasEntity{}
	return &this
}

// NewAtlasEntityWithDefaults instantiates a new AtlasEntity object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAtlasEntityWithDefaults() *AtlasEntity {
	this := AtlasEntity{}
	return &this
}

// GetTypeName returns the TypeName field value if set, zero value otherwise.
func (o *AtlasEntity) GetTypeName() string {
	if o == nil || o.TypeName == nil {
		var ret string
		return ret
	}
	return *o.TypeName
}

// GetTypeNameOk returns a tuple with the TypeName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AtlasEntity) GetTypeNameOk() (*string, bool) {
	if o == nil || o.TypeName == nil {
		return nil, false
	}
	return o.TypeName, true
}

// HasTypeName returns a boolean if a field has been set.
func (o *AtlasEntity) HasTypeName() bool {
	if o != nil && o.TypeName != nil {
		return true
	}

	return false
}

// SetTypeName gets a reference to the given string and assigns it to the TypeName field.
func (o *AtlasEntity) SetTypeName(v string) {
	o.TypeName = &v
}

// GetAttributes returns the Attributes field value if set, zero value otherwise.
func (o *AtlasEntity) GetAttributes() map[string]interface{} {
	if o == nil || o.Attributes == nil {
		var ret map[string]interface{}
		return ret
	}
	return *o.Attributes
}

// GetAttributesOk returns a tuple with the Attributes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AtlasEntity) GetAttributesOk() (*map[string]interface{}, bool) {
	if o == nil || o.Attributes == nil {
		return nil, false
	}
	return o.Attributes, true
}

// HasAttributes returns a boolean if a field has been set.
func (o *AtlasEntity) HasAttributes() bool {
	if o != nil && o.Attributes != nil {
		return true
	}

	return false
}

// SetAttributes gets a reference to the given map[string]interface{} and assigns it to the Attributes field.
func (o *AtlasEntity) SetAttributes(v map[string]interface{}) {
	o.Attributes = &v
}

// GetGuid returns the Guid field value if set, zero value otherwise.
func (o *AtlasEntity) GetGuid() string {
	if o == nil || o.Guid == nil {
		var ret string
		return ret
	}
	return *o.Guid
}

// GetGuidOk returns a tuple with the Guid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AtlasEntity) GetGuidOk() (*string, bool) {
	if o == nil || o.Guid == nil {
		return nil, false
	}
	return o.Guid, true
}

// HasGuid returns a boolean if a field has been set.
func (o *AtlasEntity) HasGuid() bool {
	if o != nil && o.Guid != nil {
		return true
	}

	return false
}

// SetGuid gets a reference to the given string and assigns it to the Guid field.
func (o *AtlasEntity) SetGuid(v string) {
	o.Guid = &v
}

// GetHomeId returns the HomeId field value if set, zero value otherwise.
func (o *AtlasEntity) GetHomeId() string {
	if o == nil || o.HomeId == nil {
		var ret string
		return ret
	}
	return *o.HomeId
}

// GetHomeIdOk returns a tuple with the HomeId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AtlasEntity) GetHomeIdOk() (*string, bool) {
	if o == nil || o.HomeId == nil {
		return nil, false
	}
	return o.HomeId, true
}

// HasHomeId returns a boolean if a field has been set.
func (o *AtlasEntity) HasHomeId() bool {
	if o != nil && o.HomeId != nil {
		return true
	}

	return false
}

// SetHomeId gets a reference to the given string and assigns it to the HomeId field.
func (o *AtlasEntity) SetHomeId(v string) {
	o.HomeId = &v
}

// GetIsProxy returns the IsProxy field value if set, zero value otherwise.
func (o *AtlasEntity) GetIsProxy() bool {
	if o == nil || o.IsProxy == nil {
		var ret bool
		return ret
	}
	return *o.IsProxy
}

// GetIsProxyOk returns a tuple with the IsProxy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AtlasEntity) GetIsProxyOk() (*bool, bool) {
	if o == nil || o.IsProxy == nil {
		return nil, false
	}
	return o.IsProxy, true
}

// HasIsProxy returns a boolean if a field has been set.
func (o *AtlasEntity) HasIsProxy() bool {
	if o != nil && o.IsProxy != nil {
		return true
	}

	return false
}

// SetIsProxy gets a reference to the given bool and assigns it to the IsProxy field.
func (o *AtlasEntity) SetIsProxy(v bool) {
	o.IsProxy = &v
}

// GetIsIncomplete returns the IsIncomplete field value if set, zero value otherwise.
func (o *AtlasEntity) GetIsIncomplete() bool {
	if o == nil || o.IsIncomplete == nil {
		var ret bool
		return ret
	}
	return *o.IsIncomplete
}

// GetIsIncompleteOk returns a tuple with the IsIncomplete field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AtlasEntity) GetIsIncompleteOk() (*bool, bool) {
	if o == nil || o.IsIncomplete == nil {
		return nil, false
	}
	return o.IsIncomplete, true
}

// HasIsIncomplete returns a boolean if a field has been set.
func (o *AtlasEntity) HasIsIncomplete() bool {
	if o != nil && o.IsIncomplete != nil {
		return true
	}

	return false
}

// SetIsIncomplete gets a reference to the given bool and assigns it to the IsIncomplete field.
func (o *AtlasEntity) SetIsIncomplete(v bool) {
	o.IsIncomplete = &v
}

// GetProvenanceType returns the ProvenanceType field value if set, zero value otherwise.
func (o *AtlasEntity) GetProvenanceType() int32 {
	if o == nil || o.ProvenanceType == nil {
		var ret int32
		return ret
	}
	return *o.ProvenanceType
}

// GetProvenanceTypeOk returns a tuple with the ProvenanceType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AtlasEntity) GetProvenanceTypeOk() (*int32, bool) {
	if o == nil || o.ProvenanceType == nil {
		return nil, false
	}
	return o.ProvenanceType, true
}

// HasProvenanceType returns a boolean if a field has been set.
func (o *AtlasEntity) HasProvenanceType() bool {
	if o != nil && o.ProvenanceType != nil {
		return true
	}

	return false
}

// SetProvenanceType gets a reference to the given int32 and assigns it to the ProvenanceType field.
func (o *AtlasEntity) SetProvenanceType(v int32) {
	o.ProvenanceType = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *AtlasEntity) GetStatus() string {
	if o == nil || o.Status == nil {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AtlasEntity) GetStatusOk() (*string, bool) {
	if o == nil || o.Status == nil {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *AtlasEntity) HasStatus() bool {
	if o != nil && o.Status != nil {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *AtlasEntity) SetStatus(v string) {
	o.Status = &v
}

// GetCreatedBy returns the CreatedBy field value if set, zero value otherwise.
func (o *AtlasEntity) GetCreatedBy() string {
	if o == nil || o.CreatedBy == nil {
		var ret string
		return ret
	}
	return *o.CreatedBy
}

// GetCreatedByOk returns a tuple with the CreatedBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AtlasEntity) GetCreatedByOk() (*string, bool) {
	if o == nil || o.CreatedBy == nil {
		return nil, false
	}
	return o.CreatedBy, true
}

// HasCreatedBy returns a boolean if a field has been set.
func (o *AtlasEntity) HasCreatedBy() bool {
	if o != nil && o.CreatedBy != nil {
		return true
	}

	return false
}

// SetCreatedBy gets a reference to the given string and assigns it to the CreatedBy field.
func (o *AtlasEntity) SetCreatedBy(v string) {
	o.CreatedBy = &v
}

// GetUpdatedBy returns the UpdatedBy field value if set, zero value otherwise.
func (o *AtlasEntity) GetUpdatedBy() string {
	if o == nil || o.UpdatedBy == nil {
		var ret string
		return ret
	}
	return *o.UpdatedBy
}

// GetUpdatedByOk returns a tuple with the UpdatedBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AtlasEntity) GetUpdatedByOk() (*string, bool) {
	if o == nil || o.UpdatedBy == nil {
		return nil, false
	}
	return o.UpdatedBy, true
}

// HasUpdatedBy returns a boolean if a field has been set.
func (o *AtlasEntity) HasUpdatedBy() bool {
	if o != nil && o.UpdatedBy != nil {
		return true
	}

	return false
}

// SetUpdatedBy gets a reference to the given string and assigns it to the UpdatedBy field.
func (o *AtlasEntity) SetUpdatedBy(v string) {
	o.UpdatedBy = &v
}

// GetCreateTime returns the CreateTime field value if set, zero value otherwise.
func (o *AtlasEntity) GetCreateTime() int64 {
	if o == nil || o.CreateTime == nil {
		var ret int64
		return ret
	}
	return *o.CreateTime
}

// GetCreateTimeOk returns a tuple with the CreateTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AtlasEntity) GetCreateTimeOk() (*int64, bool) {
	if o == nil || o.CreateTime == nil {
		return nil, false
	}
	return o.CreateTime, true
}

// HasCreateTime returns a boolean if a field has been set.
func (o *AtlasEntity) HasCreateTime() bool {
	if o != nil && o.CreateTime != nil {
		return true
	}

	return false
}

// SetCreateTime gets a reference to the given int64 and assigns it to the CreateTime field.
func (o *AtlasEntity) SetCreateTime(v int64) {
	o.CreateTime = &v
}

// GetUpdateTime returns the UpdateTime field value if set, zero value otherwise.
func (o *AtlasEntity) GetUpdateTime() int64 {
	if o == nil || o.UpdateTime == nil {
		var ret int64
		return ret
	}
	return *o.UpdateTime
}

// GetUpdateTimeOk returns a tuple with the UpdateTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AtlasEntity) GetUpdateTimeOk() (*int64, bool) {
	if o == nil || o.UpdateTime == nil {
		return nil, false
	}
	return o.UpdateTime, true
}

// HasUpdateTime returns a boolean if a field has been set.
func (o *AtlasEntity) HasUpdateTime() bool {
	if o != nil && o.UpdateTime != nil {
		return true
	}

	return false
}

// SetUpdateTime gets a reference to the given int64 and assigns it to the UpdateTime field.
func (o *AtlasEntity) SetUpdateTime(v int64) {
	o.UpdateTime = &v
}

// GetVersion returns the Version field value if set, zero value otherwise.
func (o *AtlasEntity) GetVersion() int64 {
	if o == nil || o.Version == nil {
		var ret int64
		return ret
	}
	return *o.Version
}

// GetVersionOk returns a tuple with the Version field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AtlasEntity) GetVersionOk() (*int64, bool) {
	if o == nil || o.Version == nil {
		return nil, false
	}
	return o.Version, true
}

// HasVersion returns a boolean if a field has been set.
func (o *AtlasEntity) HasVersion() bool {
	if o != nil && o.Version != nil {
		return true
	}

	return false
}

// SetVersion gets a reference to the given int64 and assigns it to the Version field.
func (o *AtlasEntity) SetVersion(v int64) {
	o.Version = &v
}

// GetRelationshipAttributes returns the RelationshipAttributes field value if set, zero value otherwise.
func (o *AtlasEntity) GetRelationshipAttributes() map[string]interface{} {
	if o == nil || o.RelationshipAttributes == nil {
		var ret map[string]interface{}
		return ret
	}
	return *o.RelationshipAttributes
}

// GetRelationshipAttributesOk returns a tuple with the RelationshipAttributes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AtlasEntity) GetRelationshipAttributesOk() (*map[string]interface{}, bool) {
	if o == nil || o.RelationshipAttributes == nil {
		return nil, false
	}
	return o.RelationshipAttributes, true
}

// HasRelationshipAttributes returns a boolean if a field has been set.
func (o *AtlasEntity) HasRelationshipAttributes() bool {
	if o != nil && o.RelationshipAttributes != nil {
		return true
	}

	return false
}

// SetRelationshipAttributes gets a reference to the given map[string]interface{} and assigns it to the RelationshipAttributes field.
func (o *AtlasEntity) SetRelationshipAttributes(v map[string]interface{}) {
	o.RelationshipAttributes = &v
}

// GetClassifications returns the Classifications field value if set, zero value otherwise.
func (o *AtlasEntity) GetClassifications() []AtlasClassification {
	if o == nil || o.Classifications == nil {
		var ret []AtlasClassification
		return ret
	}
	return *o.Classifications
}

// GetClassificationsOk returns a tuple with the Classifications field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AtlasEntity) GetClassificationsOk() (*[]AtlasClassification, bool) {
	if o == nil || o.Classifications == nil {
		return nil, false
	}
	return o.Classifications, true
}

// HasClassifications returns a boolean if a field has been set.
func (o *AtlasEntity) HasClassifications() bool {
	if o != nil && o.Classifications != nil {
		return true
	}

	return false
}

// SetClassifications gets a reference to the given []AtlasClassification and assigns it to the Classifications field.
func (o *AtlasEntity) SetClassifications(v []AtlasClassification) {
	o.Classifications = &v
}

// GetMeanings returns the Meanings field value if set, zero value otherwise.
func (o *AtlasEntity) GetMeanings() []AtlasTermAssignmentHeader {
	if o == nil || o.Meanings == nil {
		var ret []AtlasTermAssignmentHeader
		return ret
	}
	return *o.Meanings
}

// GetMeaningsOk returns a tuple with the Meanings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AtlasEntity) GetMeaningsOk() (*[]AtlasTermAssignmentHeader, bool) {
	if o == nil || o.Meanings == nil {
		return nil, false
	}
	return o.Meanings, true
}

// HasMeanings returns a boolean if a field has been set.
func (o *AtlasEntity) HasMeanings() bool {
	if o != nil && o.Meanings != nil {
		return true
	}

	return false
}

// SetMeanings gets a reference to the given []AtlasTermAssignmentHeader and assigns it to the Meanings field.
func (o *AtlasEntity) SetMeanings(v []AtlasTermAssignmentHeader) {
	o.Meanings = &v
}

// GetCustomAttributes returns the CustomAttributes field value if set, zero value otherwise.
func (o *AtlasEntity) GetCustomAttributes() map[string]string {
	if o == nil || o.CustomAttributes == nil {
		var ret map[string]string
		return ret
	}
	return *o.CustomAttributes
}

// GetCustomAttributesOk returns a tuple with the CustomAttributes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AtlasEntity) GetCustomAttributesOk() (*map[string]string, bool) {
	if o == nil || o.CustomAttributes == nil {
		return nil, false
	}
	return o.CustomAttributes, true
}

// HasCustomAttributes returns a boolean if a field has been set.
func (o *AtlasEntity) HasCustomAttributes() bool {
	if o != nil && o.CustomAttributes != nil {
		return true
	}

	return false
}

// SetCustomAttributes gets a reference to the given map[string]string and assigns it to the CustomAttributes field.
func (o *AtlasEntity) SetCustomAttributes(v map[string]string) {
	o.CustomAttributes = &v
}

// GetBusinessAttributes returns the BusinessAttributes field value if set, zero value otherwise.
func (o *AtlasEntity) GetBusinessAttributes() map[string]map[string]interface{} {
	if o == nil || o.BusinessAttributes == nil {
		var ret map[string]map[string]interface{}
		return ret
	}
	return *o.BusinessAttributes
}

// GetBusinessAttributesOk returns a tuple with the BusinessAttributes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AtlasEntity) GetBusinessAttributesOk() (*map[string]map[string]interface{}, bool) {
	if o == nil || o.BusinessAttributes == nil {
		return nil, false
	}
	return o.BusinessAttributes, true
}

// HasBusinessAttributes returns a boolean if a field has been set.
func (o *AtlasEntity) HasBusinessAttributes() bool {
	if o != nil && o.BusinessAttributes != nil {
		return true
	}

	return false
}

// SetBusinessAttributes gets a reference to the given map[string]map[string]interface{} and assigns it to the BusinessAttributes field.
func (o *AtlasEntity) SetBusinessAttributes(v map[string]map[string]interface{}) {
	o.BusinessAttributes = &v
}

// GetLabels returns the Labels field value if set, zero value otherwise.
func (o *AtlasEntity) GetLabels() []string {
	if o == nil || o.Labels == nil {
		var ret []string
		return ret
	}
	return *o.Labels
}

// GetLabelsOk returns a tuple with the Labels field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AtlasEntity) GetLabelsOk() (*[]string, bool) {
	if o == nil || o.Labels == nil {
		return nil, false
	}
	return o.Labels, true
}

// HasLabels returns a boolean if a field has been set.
func (o *AtlasEntity) HasLabels() bool {
	if o != nil && o.Labels != nil {
		return true
	}

	return false
}

// SetLabels gets a reference to the given []string and assigns it to the Labels field.
func (o *AtlasEntity) SetLabels(v []string) {
	o.Labels = &v
}

// GetPendingTasks returns the PendingTasks field value if set, zero value otherwise.
func (o *AtlasEntity) GetPendingTasks() []string {
	if o == nil || o.PendingTasks == nil {
		var ret []string
		return ret
	}
	return *o.PendingTasks
}

// GetPendingTasksOk returns a tuple with the PendingTasks field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AtlasEntity) GetPendingTasksOk() (*[]string, bool) {
	if o == nil || o.PendingTasks == nil {
		return nil, false
	}
	return o.PendingTasks, true
}

// HasPendingTasks returns a boolean if a field has been set.
func (o *AtlasEntity) HasPendingTasks() bool {
	if o != nil && o.PendingTasks != nil {
		return true
	}

	return false
}

// SetPendingTasks gets a reference to the given []string and assigns it to the PendingTasks field.
func (o *AtlasEntity) SetPendingTasks(v []string) {
	o.PendingTasks = &v
}

// GetProxy returns the Proxy field value if set, zero value otherwise.
func (o *AtlasEntity) GetProxy() bool {
	if o == nil || o.Proxy == nil {
		var ret bool
		return ret
	}
	return *o.Proxy
}

// GetProxyOk returns a tuple with the Proxy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AtlasEntity) GetProxyOk() (*bool, bool) {
	if o == nil || o.Proxy == nil {
		return nil, false
	}
	return o.Proxy, true
}

// HasProxy returns a boolean if a field has been set.
func (o *AtlasEntity) HasProxy() bool {
	if o != nil && o.Proxy != nil {
		return true
	}

	return false
}

// SetProxy gets a reference to the given bool and assigns it to the Proxy field.
func (o *AtlasEntity) SetProxy(v bool) {
	o.Proxy = &v
}

// Redact resets all sensitive fields to their zero value.
func (o *AtlasEntity) Redact() {
    o.recurseRedact(o.TypeName)
    o.recurseRedact(o.Attributes)
    o.recurseRedact(o.Guid)
    o.recurseRedact(o.HomeId)
    o.recurseRedact(o.IsProxy)
    o.recurseRedact(o.IsIncomplete)
    o.recurseRedact(o.ProvenanceType)
    o.recurseRedact(o.Status)
    o.recurseRedact(o.CreatedBy)
    o.recurseRedact(o.UpdatedBy)
    o.recurseRedact(o.CreateTime)
    o.recurseRedact(o.UpdateTime)
    o.recurseRedact(o.Version)
    o.recurseRedact(o.RelationshipAttributes)
    o.recurseRedact(o.Classifications)
    o.recurseRedact(o.Meanings)
    o.recurseRedact(o.CustomAttributes)
    o.recurseRedact(o.BusinessAttributes)
    o.recurseRedact(o.Labels)
    o.recurseRedact(o.PendingTasks)
    o.recurseRedact(o.Proxy)
}

func (o *AtlasEntity) recurseRedact(v interface{}) {
    type redactor interface {
        Redact()
    }
    if r, ok := v.(redactor); ok {
        r.Redact()
    } else {
        val := reflect.ValueOf(v)
        if val.Kind() == reflect.Ptr {
            val = val.Elem()
        }
        switch val.Kind() {
        case reflect.Slice, reflect.Array:
            for i := 0; i < val.Len(); i++ {
                // support data types declared without pointers
                o.recurseRedact(val.Index(i).Interface())
                // ... and data types that were declared without but need pointers (for Redact)
                if val.Index(i).CanAddr() {
                    o.recurseRedact(val.Index(i).Addr().Interface())
                }
            }
        }
    }
}

func (o AtlasEntity) zeroField(v interface{}) {
    p := reflect.ValueOf(v).Elem()
    p.Set(reflect.Zero(p.Type()))
}

func (o AtlasEntity) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.TypeName != nil {
		toSerialize["typeName"] = o.TypeName
	}
	if o.Attributes != nil {
		toSerialize["attributes"] = o.Attributes
	}
	if o.Guid != nil {
		toSerialize["guid"] = o.Guid
	}
	if o.HomeId != nil {
		toSerialize["homeId"] = o.HomeId
	}
	if o.IsProxy != nil {
		toSerialize["isProxy"] = o.IsProxy
	}
	if o.IsIncomplete != nil {
		toSerialize["isIncomplete"] = o.IsIncomplete
	}
	if o.ProvenanceType != nil {
		toSerialize["provenanceType"] = o.ProvenanceType
	}
	if o.Status != nil {
		toSerialize["status"] = o.Status
	}
	if o.CreatedBy != nil {
		toSerialize["createdBy"] = o.CreatedBy
	}
	if o.UpdatedBy != nil {
		toSerialize["updatedBy"] = o.UpdatedBy
	}
	if o.CreateTime != nil {
		toSerialize["createTime"] = o.CreateTime
	}
	if o.UpdateTime != nil {
		toSerialize["updateTime"] = o.UpdateTime
	}
	if o.Version != nil {
		toSerialize["version"] = o.Version
	}
	if o.RelationshipAttributes != nil {
		toSerialize["relationshipAttributes"] = o.RelationshipAttributes
	}
	if o.Classifications != nil {
		toSerialize["classifications"] = o.Classifications
	}
	if o.Meanings != nil {
		toSerialize["meanings"] = o.Meanings
	}
	if o.CustomAttributes != nil {
		toSerialize["customAttributes"] = o.CustomAttributes
	}
	if o.BusinessAttributes != nil {
		toSerialize["businessAttributes"] = o.BusinessAttributes
	}
	if o.Labels != nil {
		toSerialize["labels"] = o.Labels
	}
	if o.PendingTasks != nil {
		toSerialize["pendingTasks"] = o.PendingTasks
	}
	if o.Proxy != nil {
		toSerialize["proxy"] = o.Proxy
	}
	return json.Marshal(toSerialize)
}

type NullableAtlasEntity struct {
	value *AtlasEntity
	isSet bool
}

func (v NullableAtlasEntity) Get() *AtlasEntity {
	return v.value
}

func (v *NullableAtlasEntity) Set(val *AtlasEntity) {
	v.value = val
	v.isSet = true
}

func (v NullableAtlasEntity) IsSet() bool {
	return v.isSet
}

func (v *NullableAtlasEntity) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAtlasEntity(val *AtlasEntity) *NullableAtlasEntity {
	return &NullableAtlasEntity{value: val, isSet: true}
}

func (v NullableAtlasEntity) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAtlasEntity) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


