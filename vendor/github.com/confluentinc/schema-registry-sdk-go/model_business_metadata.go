// Copyright 2021 Confluent Inc. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*
Confluent Schema Registry

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package schemaregistry

import (
	"encoding/json"
)

import (
	"reflect"
)

// BusinessMetadata struct for BusinessMetadata
type BusinessMetadata struct {
	TypeName *string `json:"typeName,omitempty"`
	Attributes *map[string]interface{} `json:"attributes,omitempty"`
	EntityType *string `json:"entityType,omitempty"`
	EntityName *string `json:"entityName,omitempty"`
}

// NewBusinessMetadata instantiates a new BusinessMetadata object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBusinessMetadata() *BusinessMetadata {
	this := BusinessMetadata{}
	return &this
}

// NewBusinessMetadataWithDefaults instantiates a new BusinessMetadata object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBusinessMetadataWithDefaults() *BusinessMetadata {
	this := BusinessMetadata{}
	return &this
}

// GetTypeName returns the TypeName field value if set, zero value otherwise.
func (o *BusinessMetadata) GetTypeName() string {
	if o == nil || o.TypeName == nil {
		var ret string
		return ret
	}
	return *o.TypeName
}

// GetTypeNameOk returns a tuple with the TypeName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BusinessMetadata) GetTypeNameOk() (*string, bool) {
	if o == nil || o.TypeName == nil {
		return nil, false
	}
	return o.TypeName, true
}

// HasTypeName returns a boolean if a field has been set.
func (o *BusinessMetadata) HasTypeName() bool {
	if o != nil && o.TypeName != nil {
		return true
	}

	return false
}

// SetTypeName gets a reference to the given string and assigns it to the TypeName field.
func (o *BusinessMetadata) SetTypeName(v string) {
	o.TypeName = &v
}

// GetAttributes returns the Attributes field value if set, zero value otherwise.
func (o *BusinessMetadata) GetAttributes() map[string]interface{} {
	if o == nil || o.Attributes == nil {
		var ret map[string]interface{}
		return ret
	}
	return *o.Attributes
}

// GetAttributesOk returns a tuple with the Attributes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BusinessMetadata) GetAttributesOk() (*map[string]interface{}, bool) {
	if o == nil || o.Attributes == nil {
		return nil, false
	}
	return o.Attributes, true
}

// HasAttributes returns a boolean if a field has been set.
func (o *BusinessMetadata) HasAttributes() bool {
	if o != nil && o.Attributes != nil {
		return true
	}

	return false
}

// SetAttributes gets a reference to the given map[string]interface{} and assigns it to the Attributes field.
func (o *BusinessMetadata) SetAttributes(v map[string]interface{}) {
	o.Attributes = &v
}

// GetEntityType returns the EntityType field value if set, zero value otherwise.
func (o *BusinessMetadata) GetEntityType() string {
	if o == nil || o.EntityType == nil {
		var ret string
		return ret
	}
	return *o.EntityType
}

// GetEntityTypeOk returns a tuple with the EntityType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BusinessMetadata) GetEntityTypeOk() (*string, bool) {
	if o == nil || o.EntityType == nil {
		return nil, false
	}
	return o.EntityType, true
}

// HasEntityType returns a boolean if a field has been set.
func (o *BusinessMetadata) HasEntityType() bool {
	if o != nil && o.EntityType != nil {
		return true
	}

	return false
}

// SetEntityType gets a reference to the given string and assigns it to the EntityType field.
func (o *BusinessMetadata) SetEntityType(v string) {
	o.EntityType = &v
}

// GetEntityName returns the EntityName field value if set, zero value otherwise.
func (o *BusinessMetadata) GetEntityName() string {
	if o == nil || o.EntityName == nil {
		var ret string
		return ret
	}
	return *o.EntityName
}

// GetEntityNameOk returns a tuple with the EntityName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BusinessMetadata) GetEntityNameOk() (*string, bool) {
	if o == nil || o.EntityName == nil {
		return nil, false
	}
	return o.EntityName, true
}

// HasEntityName returns a boolean if a field has been set.
func (o *BusinessMetadata) HasEntityName() bool {
	if o != nil && o.EntityName != nil {
		return true
	}

	return false
}

// SetEntityName gets a reference to the given string and assigns it to the EntityName field.
func (o *BusinessMetadata) SetEntityName(v string) {
	o.EntityName = &v
}

// Redact resets all sensitive fields to their zero value.
func (o *BusinessMetadata) Redact() {
    o.recurseRedact(o.TypeName)
    o.recurseRedact(o.Attributes)
    o.recurseRedact(o.EntityType)
    o.recurseRedact(o.EntityName)
}

func (o *BusinessMetadata) recurseRedact(v interface{}) {
    type redactor interface {
        Redact()
    }
    if r, ok := v.(redactor); ok {
        r.Redact()
    } else {
        val := reflect.ValueOf(v)
        if val.Kind() == reflect.Ptr {
            val = val.Elem()
        }
        switch val.Kind() {
        case reflect.Slice, reflect.Array:
            for i := 0; i < val.Len(); i++ {
                // support data types declared without pointers
                o.recurseRedact(val.Index(i).Interface())
                // ... and data types that were declared without but need pointers (for Redact)
                if val.Index(i).CanAddr() {
                    o.recurseRedact(val.Index(i).Addr().Interface())
                }
            }
        }
    }
}

func (o BusinessMetadata) zeroField(v interface{}) {
    p := reflect.ValueOf(v).Elem()
    p.Set(reflect.Zero(p.Type()))
}

func (o BusinessMetadata) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.TypeName != nil {
		toSerialize["typeName"] = o.TypeName
	}
	if o.Attributes != nil {
		toSerialize["attributes"] = o.Attributes
	}
	if o.EntityType != nil {
		toSerialize["entityType"] = o.EntityType
	}
	if o.EntityName != nil {
		toSerialize["entityName"] = o.EntityName
	}
	return json.Marshal(toSerialize)
}

type NullableBusinessMetadata struct {
	value *BusinessMetadata
	isSet bool
}

func (v NullableBusinessMetadata) Get() *BusinessMetadata {
	return v.value
}

func (v *NullableBusinessMetadata) Set(val *BusinessMetadata) {
	v.value = val
	v.isSet = true
}

func (v NullableBusinessMetadata) IsSet() bool {
	return v.isSet
}

func (v *NullableBusinessMetadata) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBusinessMetadata(val *BusinessMetadata) *NullableBusinessMetadata {
	return &NullableBusinessMetadata{value: val, isSet: true}
}

func (v NullableBusinessMetadata) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBusinessMetadata) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


