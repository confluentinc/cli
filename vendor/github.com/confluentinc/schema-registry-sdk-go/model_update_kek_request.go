// Copyright 2021 Confluent Inc. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*
Confluent Schema Registry

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package schemaregistry

import (
	"encoding/json"
)

import (
	"reflect"
)

// UpdateKekRequest struct for UpdateKekRequest
type UpdateKekRequest struct {
	KmsProps *map[string]string `json:"kmsProps,omitempty"`
	Doc *string `json:"doc,omitempty"`
	Shared *bool `json:"shared,omitempty"`
}

// NewUpdateKekRequest instantiates a new UpdateKekRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateKekRequest() *UpdateKekRequest {
	this := UpdateKekRequest{}
	return &this
}

// NewUpdateKekRequestWithDefaults instantiates a new UpdateKekRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateKekRequestWithDefaults() *UpdateKekRequest {
	this := UpdateKekRequest{}
	return &this
}

// GetKmsProps returns the KmsProps field value if set, zero value otherwise.
func (o *UpdateKekRequest) GetKmsProps() map[string]string {
	if o == nil || o.KmsProps == nil {
		var ret map[string]string
		return ret
	}
	return *o.KmsProps
}

// GetKmsPropsOk returns a tuple with the KmsProps field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateKekRequest) GetKmsPropsOk() (*map[string]string, bool) {
	if o == nil || o.KmsProps == nil {
		return nil, false
	}
	return o.KmsProps, true
}

// HasKmsProps returns a boolean if a field has been set.
func (o *UpdateKekRequest) HasKmsProps() bool {
	if o != nil && o.KmsProps != nil {
		return true
	}

	return false
}

// SetKmsProps gets a reference to the given map[string]string and assigns it to the KmsProps field.
func (o *UpdateKekRequest) SetKmsProps(v map[string]string) {
	o.KmsProps = &v
}

// GetDoc returns the Doc field value if set, zero value otherwise.
func (o *UpdateKekRequest) GetDoc() string {
	if o == nil || o.Doc == nil {
		var ret string
		return ret
	}
	return *o.Doc
}

// GetDocOk returns a tuple with the Doc field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateKekRequest) GetDocOk() (*string, bool) {
	if o == nil || o.Doc == nil {
		return nil, false
	}
	return o.Doc, true
}

// HasDoc returns a boolean if a field has been set.
func (o *UpdateKekRequest) HasDoc() bool {
	if o != nil && o.Doc != nil {
		return true
	}

	return false
}

// SetDoc gets a reference to the given string and assigns it to the Doc field.
func (o *UpdateKekRequest) SetDoc(v string) {
	o.Doc = &v
}

// GetShared returns the Shared field value if set, zero value otherwise.
func (o *UpdateKekRequest) GetShared() bool {
	if o == nil || o.Shared == nil {
		var ret bool
		return ret
	}
	return *o.Shared
}

// GetSharedOk returns a tuple with the Shared field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateKekRequest) GetSharedOk() (*bool, bool) {
	if o == nil || o.Shared == nil {
		return nil, false
	}
	return o.Shared, true
}

// HasShared returns a boolean if a field has been set.
func (o *UpdateKekRequest) HasShared() bool {
	if o != nil && o.Shared != nil {
		return true
	}

	return false
}

// SetShared gets a reference to the given bool and assigns it to the Shared field.
func (o *UpdateKekRequest) SetShared(v bool) {
	o.Shared = &v
}

// Redact resets all sensitive fields to their zero value.
func (o *UpdateKekRequest) Redact() {
    o.recurseRedact(o.KmsProps)
    o.recurseRedact(o.Doc)
    o.recurseRedact(o.Shared)
}

func (o *UpdateKekRequest) recurseRedact(v interface{}) {
    type redactor interface {
        Redact()
    }
    if r, ok := v.(redactor); ok {
        r.Redact()
    } else {
        val := reflect.ValueOf(v)
        if val.Kind() == reflect.Ptr {
            val = val.Elem()
        }
        switch val.Kind() {
        case reflect.Slice, reflect.Array:
            for i := 0; i < val.Len(); i++ {
                // support data types declared without pointers
                o.recurseRedact(val.Index(i).Interface())
                // ... and data types that were declared without but need pointers (for Redact)
                if val.Index(i).CanAddr() {
                    o.recurseRedact(val.Index(i).Addr().Interface())
                }
            }
        }
    }
}

func (o UpdateKekRequest) zeroField(v interface{}) {
    p := reflect.ValueOf(v).Elem()
    p.Set(reflect.Zero(p.Type()))
}

func (o UpdateKekRequest) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.KmsProps != nil {
		toSerialize["kmsProps"] = o.KmsProps
	}
	if o.Doc != nil {
		toSerialize["doc"] = o.Doc
	}
	if o.Shared != nil {
		toSerialize["shared"] = o.Shared
	}
	return json.Marshal(toSerialize)
}

type NullableUpdateKekRequest struct {
	value *UpdateKekRequest
	isSet bool
}

func (v NullableUpdateKekRequest) Get() *UpdateKekRequest {
	return v.value
}

func (v *NullableUpdateKekRequest) Set(val *UpdateKekRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateKekRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateKekRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateKekRequest(val *UpdateKekRequest) *NullableUpdateKekRequest {
	return &NullableUpdateKekRequest{value: val, isSet: true}
}

func (v NullableUpdateKekRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateKekRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


