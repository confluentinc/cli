// Code generated by mocker. DO NOT EDIT.
// github.com/travisjeffery/mocker
// Source: interfaces.go

package mock

import (
	sync "sync"

	github_com_confluentinc_ccloud_sdk_go_v1_public "github.com/confluentinc/ccloud-sdk-go-v1-public"
)

// SchemaRegistry is a mock of SchemaRegistry interface
type SchemaRegistry struct {
	lockCreateSchemaRegistryCluster sync.Mutex
	CreateSchemaRegistryClusterFunc func(arg0 *github_com_confluentinc_ccloud_sdk_go_v1_public.SchemaRegistryClusterConfig) (*github_com_confluentinc_ccloud_sdk_go_v1_public.SchemaRegistryCluster, error)

	lockGetSchemaRegistryClusters sync.Mutex
	GetSchemaRegistryClustersFunc func(arg0 *github_com_confluentinc_ccloud_sdk_go_v1_public.SchemaRegistryCluster) ([]*github_com_confluentinc_ccloud_sdk_go_v1_public.SchemaRegistryCluster, error)

	lockGetSchemaRegistryCluster sync.Mutex
	GetSchemaRegistryClusterFunc func(arg0 *github_com_confluentinc_ccloud_sdk_go_v1_public.SchemaRegistryCluster) (*github_com_confluentinc_ccloud_sdk_go_v1_public.SchemaRegistryCluster, error)

	lockUpdateSchemaRegistryCluster sync.Mutex
	UpdateSchemaRegistryClusterFunc func(arg0 *github_com_confluentinc_ccloud_sdk_go_v1_public.SchemaRegistryCluster) (*github_com_confluentinc_ccloud_sdk_go_v1_public.SchemaRegistryCluster, error)

	lockDeleteSchemaRegistryCluster sync.Mutex
	DeleteSchemaRegistryClusterFunc func(arg0 *github_com_confluentinc_ccloud_sdk_go_v1_public.SchemaRegistryCluster) error

	calls struct {
		CreateSchemaRegistryCluster []struct {
			Arg0 *github_com_confluentinc_ccloud_sdk_go_v1_public.SchemaRegistryClusterConfig
		}
		GetSchemaRegistryClusters []struct {
			Arg0 *github_com_confluentinc_ccloud_sdk_go_v1_public.SchemaRegistryCluster
		}
		GetSchemaRegistryCluster []struct {
			Arg0 *github_com_confluentinc_ccloud_sdk_go_v1_public.SchemaRegistryCluster
		}
		UpdateSchemaRegistryCluster []struct {
			Arg0 *github_com_confluentinc_ccloud_sdk_go_v1_public.SchemaRegistryCluster
		}
		DeleteSchemaRegistryCluster []struct {
			Arg0 *github_com_confluentinc_ccloud_sdk_go_v1_public.SchemaRegistryCluster
		}
	}
}

// CreateSchemaRegistryCluster mocks base method by wrapping the associated func.
func (m *SchemaRegistry) CreateSchemaRegistryCluster(arg0 *github_com_confluentinc_ccloud_sdk_go_v1_public.SchemaRegistryClusterConfig) (*github_com_confluentinc_ccloud_sdk_go_v1_public.SchemaRegistryCluster, error) {
	m.lockCreateSchemaRegistryCluster.Lock()
	defer m.lockCreateSchemaRegistryCluster.Unlock()

	if m.CreateSchemaRegistryClusterFunc == nil {
		panic("mocker: SchemaRegistry.CreateSchemaRegistryClusterFunc is nil but SchemaRegistry.CreateSchemaRegistryCluster was called.")
	}

	call := struct {
		Arg0 *github_com_confluentinc_ccloud_sdk_go_v1_public.SchemaRegistryClusterConfig
	}{
		Arg0: arg0,
	}

	m.calls.CreateSchemaRegistryCluster = append(m.calls.CreateSchemaRegistryCluster, call)

	return m.CreateSchemaRegistryClusterFunc(arg0)
}

// CreateSchemaRegistryClusterCalled returns true if CreateSchemaRegistryCluster was called at least once.
func (m *SchemaRegistry) CreateSchemaRegistryClusterCalled() bool {
	m.lockCreateSchemaRegistryCluster.Lock()
	defer m.lockCreateSchemaRegistryCluster.Unlock()

	return len(m.calls.CreateSchemaRegistryCluster) > 0
}

// CreateSchemaRegistryClusterCalls returns the calls made to CreateSchemaRegistryCluster.
func (m *SchemaRegistry) CreateSchemaRegistryClusterCalls() []struct {
	Arg0 *github_com_confluentinc_ccloud_sdk_go_v1_public.SchemaRegistryClusterConfig
} {
	m.lockCreateSchemaRegistryCluster.Lock()
	defer m.lockCreateSchemaRegistryCluster.Unlock()

	return m.calls.CreateSchemaRegistryCluster
}

// GetSchemaRegistryClusters mocks base method by wrapping the associated func.
func (m *SchemaRegistry) GetSchemaRegistryClusters(arg0 *github_com_confluentinc_ccloud_sdk_go_v1_public.SchemaRegistryCluster) ([]*github_com_confluentinc_ccloud_sdk_go_v1_public.SchemaRegistryCluster, error) {
	m.lockGetSchemaRegistryClusters.Lock()
	defer m.lockGetSchemaRegistryClusters.Unlock()

	if m.GetSchemaRegistryClustersFunc == nil {
		panic("mocker: SchemaRegistry.GetSchemaRegistryClustersFunc is nil but SchemaRegistry.GetSchemaRegistryClusters was called.")
	}

	call := struct {
		Arg0 *github_com_confluentinc_ccloud_sdk_go_v1_public.SchemaRegistryCluster
	}{
		Arg0: arg0,
	}

	m.calls.GetSchemaRegistryClusters = append(m.calls.GetSchemaRegistryClusters, call)

	return m.GetSchemaRegistryClustersFunc(arg0)
}

// GetSchemaRegistryClustersCalled returns true if GetSchemaRegistryClusters was called at least once.
func (m *SchemaRegistry) GetSchemaRegistryClustersCalled() bool {
	m.lockGetSchemaRegistryClusters.Lock()
	defer m.lockGetSchemaRegistryClusters.Unlock()

	return len(m.calls.GetSchemaRegistryClusters) > 0
}

// GetSchemaRegistryClustersCalls returns the calls made to GetSchemaRegistryClusters.
func (m *SchemaRegistry) GetSchemaRegistryClustersCalls() []struct {
	Arg0 *github_com_confluentinc_ccloud_sdk_go_v1_public.SchemaRegistryCluster
} {
	m.lockGetSchemaRegistryClusters.Lock()
	defer m.lockGetSchemaRegistryClusters.Unlock()

	return m.calls.GetSchemaRegistryClusters
}

// GetSchemaRegistryCluster mocks base method by wrapping the associated func.
func (m *SchemaRegistry) GetSchemaRegistryCluster(arg0 *github_com_confluentinc_ccloud_sdk_go_v1_public.SchemaRegistryCluster) (*github_com_confluentinc_ccloud_sdk_go_v1_public.SchemaRegistryCluster, error) {
	m.lockGetSchemaRegistryCluster.Lock()
	defer m.lockGetSchemaRegistryCluster.Unlock()

	if m.GetSchemaRegistryClusterFunc == nil {
		panic("mocker: SchemaRegistry.GetSchemaRegistryClusterFunc is nil but SchemaRegistry.GetSchemaRegistryCluster was called.")
	}

	call := struct {
		Arg0 *github_com_confluentinc_ccloud_sdk_go_v1_public.SchemaRegistryCluster
	}{
		Arg0: arg0,
	}

	m.calls.GetSchemaRegistryCluster = append(m.calls.GetSchemaRegistryCluster, call)

	return m.GetSchemaRegistryClusterFunc(arg0)
}

// GetSchemaRegistryClusterCalled returns true if GetSchemaRegistryCluster was called at least once.
func (m *SchemaRegistry) GetSchemaRegistryClusterCalled() bool {
	m.lockGetSchemaRegistryCluster.Lock()
	defer m.lockGetSchemaRegistryCluster.Unlock()

	return len(m.calls.GetSchemaRegistryCluster) > 0
}

// GetSchemaRegistryClusterCalls returns the calls made to GetSchemaRegistryCluster.
func (m *SchemaRegistry) GetSchemaRegistryClusterCalls() []struct {
	Arg0 *github_com_confluentinc_ccloud_sdk_go_v1_public.SchemaRegistryCluster
} {
	m.lockGetSchemaRegistryCluster.Lock()
	defer m.lockGetSchemaRegistryCluster.Unlock()

	return m.calls.GetSchemaRegistryCluster
}

// UpdateSchemaRegistryCluster mocks base method by wrapping the associated func.
func (m *SchemaRegistry) UpdateSchemaRegistryCluster(arg0 *github_com_confluentinc_ccloud_sdk_go_v1_public.SchemaRegistryCluster) (*github_com_confluentinc_ccloud_sdk_go_v1_public.SchemaRegistryCluster, error) {
	m.lockUpdateSchemaRegistryCluster.Lock()
	defer m.lockUpdateSchemaRegistryCluster.Unlock()

	if m.UpdateSchemaRegistryClusterFunc == nil {
		panic("mocker: SchemaRegistry.UpdateSchemaRegistryClusterFunc is nil but SchemaRegistry.UpdateSchemaRegistryCluster was called.")
	}

	call := struct {
		Arg0 *github_com_confluentinc_ccloud_sdk_go_v1_public.SchemaRegistryCluster
	}{
		Arg0: arg0,
	}

	m.calls.UpdateSchemaRegistryCluster = append(m.calls.UpdateSchemaRegistryCluster, call)

	return m.UpdateSchemaRegistryClusterFunc(arg0)
}

// UpdateSchemaRegistryClusterCalled returns true if UpdateSchemaRegistryCluster was called at least once.
func (m *SchemaRegistry) UpdateSchemaRegistryClusterCalled() bool {
	m.lockUpdateSchemaRegistryCluster.Lock()
	defer m.lockUpdateSchemaRegistryCluster.Unlock()

	return len(m.calls.UpdateSchemaRegistryCluster) > 0
}

// UpdateSchemaRegistryClusterCalls returns the calls made to UpdateSchemaRegistryCluster.
func (m *SchemaRegistry) UpdateSchemaRegistryClusterCalls() []struct {
	Arg0 *github_com_confluentinc_ccloud_sdk_go_v1_public.SchemaRegistryCluster
} {
	m.lockUpdateSchemaRegistryCluster.Lock()
	defer m.lockUpdateSchemaRegistryCluster.Unlock()

	return m.calls.UpdateSchemaRegistryCluster
}

// DeleteSchemaRegistryCluster mocks base method by wrapping the associated func.
func (m *SchemaRegistry) DeleteSchemaRegistryCluster(arg0 *github_com_confluentinc_ccloud_sdk_go_v1_public.SchemaRegistryCluster) error {
	m.lockDeleteSchemaRegistryCluster.Lock()
	defer m.lockDeleteSchemaRegistryCluster.Unlock()

	if m.DeleteSchemaRegistryClusterFunc == nil {
		panic("mocker: SchemaRegistry.DeleteSchemaRegistryClusterFunc is nil but SchemaRegistry.DeleteSchemaRegistryCluster was called.")
	}

	call := struct {
		Arg0 *github_com_confluentinc_ccloud_sdk_go_v1_public.SchemaRegistryCluster
	}{
		Arg0: arg0,
	}

	m.calls.DeleteSchemaRegistryCluster = append(m.calls.DeleteSchemaRegistryCluster, call)

	return m.DeleteSchemaRegistryClusterFunc(arg0)
}

// DeleteSchemaRegistryClusterCalled returns true if DeleteSchemaRegistryCluster was called at least once.
func (m *SchemaRegistry) DeleteSchemaRegistryClusterCalled() bool {
	m.lockDeleteSchemaRegistryCluster.Lock()
	defer m.lockDeleteSchemaRegistryCluster.Unlock()

	return len(m.calls.DeleteSchemaRegistryCluster) > 0
}

// DeleteSchemaRegistryClusterCalls returns the calls made to DeleteSchemaRegistryCluster.
func (m *SchemaRegistry) DeleteSchemaRegistryClusterCalls() []struct {
	Arg0 *github_com_confluentinc_ccloud_sdk_go_v1_public.SchemaRegistryCluster
} {
	m.lockDeleteSchemaRegistryCluster.Lock()
	defer m.lockDeleteSchemaRegistryCluster.Unlock()

	return m.calls.DeleteSchemaRegistryCluster
}

// Reset resets the calls made to the mocked methods.
func (m *SchemaRegistry) Reset() {
	m.lockCreateSchemaRegistryCluster.Lock()
	m.calls.CreateSchemaRegistryCluster = nil
	m.lockCreateSchemaRegistryCluster.Unlock()
	m.lockGetSchemaRegistryClusters.Lock()
	m.calls.GetSchemaRegistryClusters = nil
	m.lockGetSchemaRegistryClusters.Unlock()
	m.lockGetSchemaRegistryCluster.Lock()
	m.calls.GetSchemaRegistryCluster = nil
	m.lockGetSchemaRegistryCluster.Unlock()
	m.lockUpdateSchemaRegistryCluster.Lock()
	m.calls.UpdateSchemaRegistryCluster = nil
	m.lockUpdateSchemaRegistryCluster.Unlock()
	m.lockDeleteSchemaRegistryCluster.Lock()
	m.calls.DeleteSchemaRegistryCluster = nil
	m.lockDeleteSchemaRegistryCluster.Unlock()
}
