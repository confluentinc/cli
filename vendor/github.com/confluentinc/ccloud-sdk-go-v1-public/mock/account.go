// Code generated by mocker. DO NOT EDIT.
// github.com/travisjeffery/mocker
// Source: interfaces.go

package mock

import (
	sync "sync"

	github_com_confluentinc_ccloud_sdk_go_v1_public "github.com/confluentinc/ccloud-sdk-go-v1-public"
)

// AccountInterface is a mock of AccountInterface interface
type AccountInterface struct {
	lockCreate sync.Mutex
	CreateFunc func(arg0 *github_com_confluentinc_ccloud_sdk_go_v1_public.Account) (*github_com_confluentinc_ccloud_sdk_go_v1_public.Account, error)

	lockGet sync.Mutex
	GetFunc func(arg0 *github_com_confluentinc_ccloud_sdk_go_v1_public.Account) (*github_com_confluentinc_ccloud_sdk_go_v1_public.Account, error)

	lockList sync.Mutex
	ListFunc func(arg0 *github_com_confluentinc_ccloud_sdk_go_v1_public.Account) ([]*github_com_confluentinc_ccloud_sdk_go_v1_public.Account, error)

	calls struct {
		Create []struct {
			Arg0 *github_com_confluentinc_ccloud_sdk_go_v1_public.Account
		}
		Get []struct {
			Arg0 *github_com_confluentinc_ccloud_sdk_go_v1_public.Account
		}
		List []struct {
			Arg0 *github_com_confluentinc_ccloud_sdk_go_v1_public.Account
		}
	}
}

// Create mocks base method by wrapping the associated func.
func (m *AccountInterface) Create(arg0 *github_com_confluentinc_ccloud_sdk_go_v1_public.Account) (*github_com_confluentinc_ccloud_sdk_go_v1_public.Account, error) {
	m.lockCreate.Lock()
	defer m.lockCreate.Unlock()

	if m.CreateFunc == nil {
		panic("mocker: AccountInterface.CreateFunc is nil but AccountInterface.Create was called.")
	}

	call := struct {
		Arg0 *github_com_confluentinc_ccloud_sdk_go_v1_public.Account
	}{
		Arg0: arg0,
	}

	m.calls.Create = append(m.calls.Create, call)

	return m.CreateFunc(arg0)
}

// CreateCalled returns true if Create was called at least once.
func (m *AccountInterface) CreateCalled() bool {
	m.lockCreate.Lock()
	defer m.lockCreate.Unlock()

	return len(m.calls.Create) > 0
}

// CreateCalls returns the calls made to Create.
func (m *AccountInterface) CreateCalls() []struct {
	Arg0 *github_com_confluentinc_ccloud_sdk_go_v1_public.Account
} {
	m.lockCreate.Lock()
	defer m.lockCreate.Unlock()

	return m.calls.Create
}

// Get mocks base method by wrapping the associated func.
func (m *AccountInterface) Get(arg0 *github_com_confluentinc_ccloud_sdk_go_v1_public.Account) (*github_com_confluentinc_ccloud_sdk_go_v1_public.Account, error) {
	m.lockGet.Lock()
	defer m.lockGet.Unlock()

	if m.GetFunc == nil {
		panic("mocker: AccountInterface.GetFunc is nil but AccountInterface.Get was called.")
	}

	call := struct {
		Arg0 *github_com_confluentinc_ccloud_sdk_go_v1_public.Account
	}{
		Arg0: arg0,
	}

	m.calls.Get = append(m.calls.Get, call)

	return m.GetFunc(arg0)
}

// GetCalled returns true if Get was called at least once.
func (m *AccountInterface) GetCalled() bool {
	m.lockGet.Lock()
	defer m.lockGet.Unlock()

	return len(m.calls.Get) > 0
}

// GetCalls returns the calls made to Get.
func (m *AccountInterface) GetCalls() []struct {
	Arg0 *github_com_confluentinc_ccloud_sdk_go_v1_public.Account
} {
	m.lockGet.Lock()
	defer m.lockGet.Unlock()

	return m.calls.Get
}

// List mocks base method by wrapping the associated func.
func (m *AccountInterface) List(arg0 *github_com_confluentinc_ccloud_sdk_go_v1_public.Account) ([]*github_com_confluentinc_ccloud_sdk_go_v1_public.Account, error) {
	m.lockList.Lock()
	defer m.lockList.Unlock()

	if m.ListFunc == nil {
		panic("mocker: AccountInterface.ListFunc is nil but AccountInterface.List was called.")
	}

	call := struct {
		Arg0 *github_com_confluentinc_ccloud_sdk_go_v1_public.Account
	}{
		Arg0: arg0,
	}

	m.calls.List = append(m.calls.List, call)

	return m.ListFunc(arg0)
}

// ListCalled returns true if List was called at least once.
func (m *AccountInterface) ListCalled() bool {
	m.lockList.Lock()
	defer m.lockList.Unlock()

	return len(m.calls.List) > 0
}

// ListCalls returns the calls made to List.
func (m *AccountInterface) ListCalls() []struct {
	Arg0 *github_com_confluentinc_ccloud_sdk_go_v1_public.Account
} {
	m.lockList.Lock()
	defer m.lockList.Unlock()

	return m.calls.List
}

// Reset resets the calls made to the mocked methods.
func (m *AccountInterface) Reset() {
	m.lockCreate.Lock()
	m.calls.Create = nil
	m.lockCreate.Unlock()
	m.lockGet.Lock()
	m.calls.Get = nil
	m.lockGet.Unlock()
	m.lockList.Lock()
	m.calls.List = nil
	m.lockList.Unlock()
}
