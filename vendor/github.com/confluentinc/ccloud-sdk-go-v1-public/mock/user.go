// Code generated by mocker. DO NOT EDIT.
// github.com/travisjeffery/mocker
// Source: interfaces.go

package mock

import (
	sync "sync"

	github_com_confluentinc_ccloud_sdk_go_v1_public "github.com/confluentinc/ccloud-sdk-go-v1-public"
)

// UserInterface is a mock of UserInterface interface
type UserInterface struct {
	lockList sync.Mutex
	ListFunc func() ([]*github_com_confluentinc_ccloud_sdk_go_v1_public.User, error)

	lockGetServiceAccounts sync.Mutex
	GetServiceAccountsFunc func() ([]*github_com_confluentinc_ccloud_sdk_go_v1_public.User, error)

	lockGetServiceAccount sync.Mutex
	GetServiceAccountFunc func(arg0 int32) (*github_com_confluentinc_ccloud_sdk_go_v1_public.User, error)

	lockLoginRealm sync.Mutex
	LoginRealmFunc func(arg0 *github_com_confluentinc_ccloud_sdk_go_v1_public.GetLoginRealmRequest) (*github_com_confluentinc_ccloud_sdk_go_v1_public.GetLoginRealmReply, error)

	calls struct {
		List []struct {
		}
		GetServiceAccounts []struct {
		}
		GetServiceAccount []struct {
			Arg0 int32
		}
		LoginRealm []struct {
			Arg0 *github_com_confluentinc_ccloud_sdk_go_v1_public.GetLoginRealmRequest
		}
	}
}

// List mocks base method by wrapping the associated func.
func (m *UserInterface) List() ([]*github_com_confluentinc_ccloud_sdk_go_v1_public.User, error) {
	m.lockList.Lock()
	defer m.lockList.Unlock()

	if m.ListFunc == nil {
		panic("mocker: UserInterface.ListFunc is nil but UserInterface.List was called.")
	}

	call := struct {
	}{}

	m.calls.List = append(m.calls.List, call)

	return m.ListFunc()
}

// ListCalled returns true if List was called at least once.
func (m *UserInterface) ListCalled() bool {
	m.lockList.Lock()
	defer m.lockList.Unlock()

	return len(m.calls.List) > 0
}

// ListCalls returns the calls made to List.
func (m *UserInterface) ListCalls() []struct {
} {
	m.lockList.Lock()
	defer m.lockList.Unlock()

	return m.calls.List
}

// GetServiceAccounts mocks base method by wrapping the associated func.
func (m *UserInterface) GetServiceAccounts() ([]*github_com_confluentinc_ccloud_sdk_go_v1_public.User, error) {
	m.lockGetServiceAccounts.Lock()
	defer m.lockGetServiceAccounts.Unlock()

	if m.GetServiceAccountsFunc == nil {
		panic("mocker: UserInterface.GetServiceAccountsFunc is nil but UserInterface.GetServiceAccounts was called.")
	}

	call := struct {
	}{}

	m.calls.GetServiceAccounts = append(m.calls.GetServiceAccounts, call)

	return m.GetServiceAccountsFunc()
}

// GetServiceAccountsCalled returns true if GetServiceAccounts was called at least once.
func (m *UserInterface) GetServiceAccountsCalled() bool {
	m.lockGetServiceAccounts.Lock()
	defer m.lockGetServiceAccounts.Unlock()

	return len(m.calls.GetServiceAccounts) > 0
}

// GetServiceAccountsCalls returns the calls made to GetServiceAccounts.
func (m *UserInterface) GetServiceAccountsCalls() []struct {
} {
	m.lockGetServiceAccounts.Lock()
	defer m.lockGetServiceAccounts.Unlock()

	return m.calls.GetServiceAccounts
}

// GetServiceAccount mocks base method by wrapping the associated func.
func (m *UserInterface) GetServiceAccount(arg0 int32) (*github_com_confluentinc_ccloud_sdk_go_v1_public.User, error) {
	m.lockGetServiceAccount.Lock()
	defer m.lockGetServiceAccount.Unlock()

	if m.GetServiceAccountFunc == nil {
		panic("mocker: UserInterface.GetServiceAccountFunc is nil but UserInterface.GetServiceAccount was called.")
	}

	call := struct {
		Arg0 int32
	}{
		Arg0: arg0,
	}

	m.calls.GetServiceAccount = append(m.calls.GetServiceAccount, call)

	return m.GetServiceAccountFunc(arg0)
}

// GetServiceAccountCalled returns true if GetServiceAccount was called at least once.
func (m *UserInterface) GetServiceAccountCalled() bool {
	m.lockGetServiceAccount.Lock()
	defer m.lockGetServiceAccount.Unlock()

	return len(m.calls.GetServiceAccount) > 0
}

// GetServiceAccountCalls returns the calls made to GetServiceAccount.
func (m *UserInterface) GetServiceAccountCalls() []struct {
	Arg0 int32
} {
	m.lockGetServiceAccount.Lock()
	defer m.lockGetServiceAccount.Unlock()

	return m.calls.GetServiceAccount
}

// LoginRealm mocks base method by wrapping the associated func.
func (m *UserInterface) LoginRealm(arg0 *github_com_confluentinc_ccloud_sdk_go_v1_public.GetLoginRealmRequest) (*github_com_confluentinc_ccloud_sdk_go_v1_public.GetLoginRealmReply, error) {
	m.lockLoginRealm.Lock()
	defer m.lockLoginRealm.Unlock()

	if m.LoginRealmFunc == nil {
		panic("mocker: UserInterface.LoginRealmFunc is nil but UserInterface.LoginRealm was called.")
	}

	call := struct {
		Arg0 *github_com_confluentinc_ccloud_sdk_go_v1_public.GetLoginRealmRequest
	}{
		Arg0: arg0,
	}

	m.calls.LoginRealm = append(m.calls.LoginRealm, call)

	return m.LoginRealmFunc(arg0)
}

// LoginRealmCalled returns true if LoginRealm was called at least once.
func (m *UserInterface) LoginRealmCalled() bool {
	m.lockLoginRealm.Lock()
	defer m.lockLoginRealm.Unlock()

	return len(m.calls.LoginRealm) > 0
}

// LoginRealmCalls returns the calls made to LoginRealm.
func (m *UserInterface) LoginRealmCalls() []struct {
	Arg0 *github_com_confluentinc_ccloud_sdk_go_v1_public.GetLoginRealmRequest
} {
	m.lockLoginRealm.Lock()
	defer m.lockLoginRealm.Unlock()

	return m.calls.LoginRealm
}

// Reset resets the calls made to the mocked methods.
func (m *UserInterface) Reset() {
	m.lockList.Lock()
	m.calls.List = nil
	m.lockList.Unlock()
	m.lockGetServiceAccounts.Lock()
	m.calls.GetServiceAccounts = nil
	m.lockGetServiceAccounts.Unlock()
	m.lockGetServiceAccount.Lock()
	m.calls.GetServiceAccount = nil
	m.lockGetServiceAccount.Unlock()
	m.lockLoginRealm.Lock()
	m.calls.LoginRealm = nil
	m.lockLoginRealm.Unlock()
}
