// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: core/core.proto

package ccloud

import (
	fmt "fmt"
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	types "github.com/gogo/protobuf/types"
	io "io"
	v1 "k8s.io/api/core/v1"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type MarketplacePartner int32

const (
	MarketplacePartner_UNKNOWN MarketplacePartner = 0
	MarketplacePartner_GCP     MarketplacePartner = 1
	MarketplacePartner_AWS     MarketplacePartner = 2
	MarketplacePartner_AZURE   MarketplacePartner = 3
)

var MarketplacePartner_name = map[int32]string{
	0: "UNKNOWN",
	1: "GCP",
	2: "AWS",
	3: "AZURE",
}

var MarketplacePartner_value = map[string]int32{
	"UNKNOWN": 0,
	"GCP":     1,
	"AWS":     2,
	"AZURE":   3,
}

func (x MarketplacePartner) String() string {
	return proto.EnumName(MarketplacePartner_name, int32(x))
}

func (MarketplacePartner) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_f732a48f118dabc7, []int{0}
}

// How services know whether to operate on the msg or ignore. If the service
// was running in AWS for instance, and the router said the cloud was for "GCP"
// it'd ignore. Specified by the scheduler-service.
type Router struct {
	Cloud                string   `protobuf:"bytes,1,opt,name=cloud,proto3" json:"cloud,omitempty" db:"cloud,omitempty" url:"cloud,omitempty"`
	Region               string   `protobuf:"bytes,2,opt,name=region,proto3" json:"region,omitempty" db:"region,omitempty" url:"region,omitempty"`
	K8SCluster           string   `protobuf:"bytes,3,opt,name=k8s_cluster,json=k8sCluster,proto3" json:"k8s_cluster,omitempty" db:"k8s_cluster,omitempty" url:"k8s_cluster,omitempty"`
	Cluster              string   `protobuf:"bytes,5,opt,name=cluster,proto3" json:"cluster,omitempty" db:"cluster,omitempty" url:"cluster,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Router) Reset()         { *m = Router{} }
func (m *Router) String() string { return proto.CompactTextString(m) }
func (*Router) ProtoMessage()    {}
func (*Router) Descriptor() ([]byte, []int) {
	return fileDescriptor_f732a48f118dabc7, []int{0}
}
func (m *Router) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Router) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Router.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Router) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Router.Merge(m, src)
}
func (m *Router) XXX_Size() int {
	return m.Size()
}
func (m *Router) XXX_DiscardUnknown() {
	xxx_messageInfo_Router.DiscardUnknown(m)
}

var xxx_messageInfo_Router proto.InternalMessageInfo

func (m *Router) GetCloud() string {
	if m != nil {
		return m.Cloud
	}
	return ""
}

func (m *Router) GetRegion() string {
	if m != nil {
		return m.Region
	}
	return ""
}

func (m *Router) GetK8SCluster() string {
	if m != nil {
		return m.K8SCluster
	}
	return ""
}

func (m *Router) GetCluster() string {
	if m != nil {
		return m.Cluster
	}
	return ""
}

type Secret struct {
	// see APIKeysSecret, APIKeysDataKey in consts.go if you're using this for the API keys
	*v1.Secret           `protobuf:"bytes,1,opt,name=secret,proto3,embedded=secret" json:"secret,omitempty" redact:"-" db:"secret,omitempty" url:"secret,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Secret) Reset()         { *m = Secret{} }
func (m *Secret) String() string { return proto.CompactTextString(m) }
func (*Secret) ProtoMessage()    {}
func (*Secret) Descriptor() ([]byte, []int) {
	return fileDescriptor_f732a48f118dabc7, []int{1}
}
func (m *Secret) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Secret) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Secret.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Secret) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Secret.Merge(m, src)
}
func (m *Secret) XXX_Size() int {
	return m.Size()
}
func (m *Secret) XXX_DiscardUnknown() {
	xxx_messageInfo_Secret.DiscardUnknown(m)
}

var xxx_messageInfo_Secret proto.InternalMessageInfo

// APIKeys is the data marshaled in secret.Data's "api_key" key-value (see k8s' Secret.Data)
type APIKeys struct {
	// The keys are the users' api key values.
	Keys                 map[string]*APIKey `protobuf:"bytes,1,rep,name=keys,proto3" json:"keys,omitempty" db:"keys,omitempty" url:"keys,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *APIKeys) Reset()         { *m = APIKeys{} }
func (m *APIKeys) String() string { return proto.CompactTextString(m) }
func (*APIKeys) ProtoMessage()    {}
func (*APIKeys) Descriptor() ([]byte, []int) {
	return fileDescriptor_f732a48f118dabc7, []int{2}
}
func (m *APIKeys) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *APIKeys) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_APIKeys.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *APIKeys) XXX_Merge(src proto.Message) {
	xxx_messageInfo_APIKeys.Merge(m, src)
}
func (m *APIKeys) XXX_Size() int {
	return m.Size()
}
func (m *APIKeys) XXX_DiscardUnknown() {
	xxx_messageInfo_APIKeys.DiscardUnknown(m)
}

var xxx_messageInfo_APIKeys proto.InternalMessageInfo

func (m *APIKeys) GetKeys() map[string]*APIKey {
	if m != nil {
		return m.Keys
	}
	return nil
}

type APIKey struct {
	SaslMechanism        string   `protobuf:"bytes,1,opt,name=sasl_mechanism,json=saslMechanism,proto3" json:"sasl_mechanism,omitempty" db:"sasl_mechanism,omitempty" url:"sasl_mechanism,omitempty"`
	HashedSecret         string   `protobuf:"bytes,2,opt,name=hashed_secret,json=hashedSecret,proto3" json:"hashed_secret,omitempty" db:"hashed_secret,omitempty" url:"hashed_secret,omitempty"`
	HashFunction         string   `protobuf:"bytes,3,opt,name=hash_function,json=hashFunction,proto3" json:"hash_function,omitempty" db:"hash_function,omitempty" url:"hash_function,omitempty"`
	LogicalClusterId     string   `protobuf:"bytes,4,opt,name=logical_cluster_id,json=logicalClusterId,proto3" json:"logical_cluster_id,omitempty" db:"logical_cluster_id,omitempty" url:"logical_cluster_id,omitempty"`
	UserId               string   `protobuf:"bytes,6,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty" db:"user_id,omitempty" url:"user_id,omitempty"`
	ServiceAccount       bool     `protobuf:"varint,7,opt,name=service_account,json=serviceAccount,proto3" json:"service_account,omitempty" db:"service_account,omitempty" url:"service_account,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *APIKey) Reset()         { *m = APIKey{} }
func (m *APIKey) String() string { return proto.CompactTextString(m) }
func (*APIKey) ProtoMessage()    {}
func (*APIKey) Descriptor() ([]byte, []int) {
	return fileDescriptor_f732a48f118dabc7, []int{3}
}
func (m *APIKey) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *APIKey) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_APIKey.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *APIKey) XXX_Merge(src proto.Message) {
	xxx_messageInfo_APIKey.Merge(m, src)
}
func (m *APIKey) XXX_Size() int {
	return m.Size()
}
func (m *APIKey) XXX_DiscardUnknown() {
	xxx_messageInfo_APIKey.DiscardUnknown(m)
}

var xxx_messageInfo_APIKey proto.InternalMessageInfo

func (m *APIKey) GetSaslMechanism() string {
	if m != nil {
		return m.SaslMechanism
	}
	return ""
}

func (m *APIKey) GetHashedSecret() string {
	if m != nil {
		return m.HashedSecret
	}
	return ""
}

func (m *APIKey) GetHashFunction() string {
	if m != nil {
		return m.HashFunction
	}
	return ""
}

func (m *APIKey) GetLogicalClusterId() string {
	if m != nil {
		return m.LogicalClusterId
	}
	return ""
}

func (m *APIKey) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

func (m *APIKey) GetServiceAccount() bool {
	if m != nil {
		return m.ServiceAccount
	}
	return false
}

type KafkaHealthcheckExternalKeys struct {
	KafkaKey             string   `protobuf:"bytes,1,opt,name=kafka_key,json=kafkaKey,proto3" json:"kafka_key,omitempty" db:"kafka_key,omitempty" url:"kafka_key,omitempty"`
	KafkaSecret          string   `protobuf:"bytes,2,opt,name=kafka_secret,json=kafkaSecret,proto3" json:"kafka_secret,omitempty" redact:"-" db:"kafka_secret,omitempty" url:"kafka_secret,omitempty"`
	DdApiKey             string   `protobuf:"bytes,3,opt,name=dd_api_key,json=ddApiKey,proto3" json:"dd_api_key,omitempty" redact:"-" db:"dd_api_key,omitempty" url:"dd_api_key,omitempty"`
	KafkaLinkKey         string   `protobuf:"bytes,4,opt,name=kafka_link_key,json=kafkaLinkKey,proto3" json:"kafka_link_key,omitempty" db:"kafka_link_key,omitempty" url:"kafka_link_key,omitempty"`
	KafkaLinkSecret      string   `protobuf:"bytes,5,opt,name=kafka_link_secret,json=kafkaLinkSecret,proto3" json:"kafka_link_secret,omitempty" redact:"-" db:"kafka_link_secret,omitempty" url:"kafka_link_secret,omitempty"`
	KafkaRbacKey         string   `protobuf:"bytes,6,opt,name=kafka_rbac_key,json=kafkaRbacKey,proto3" json:"kafka_rbac_key,omitempty" db:"kafka_rbac_key,omitempty" url:"kafka_rbac_key,omitempty"`
	KafkaRbacSecret      string   `protobuf:"bytes,7,opt,name=kafka_rbac_secret,json=kafkaRbacSecret,proto3" json:"kafka_rbac_secret,omitempty" redact:"-" db:"kafka_rbac_secret,omitempty" url:"kafka_rbac_secret,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *KafkaHealthcheckExternalKeys) Reset()         { *m = KafkaHealthcheckExternalKeys{} }
func (m *KafkaHealthcheckExternalKeys) String() string { return proto.CompactTextString(m) }
func (*KafkaHealthcheckExternalKeys) ProtoMessage()    {}
func (*KafkaHealthcheckExternalKeys) Descriptor() ([]byte, []int) {
	return fileDescriptor_f732a48f118dabc7, []int{4}
}
func (m *KafkaHealthcheckExternalKeys) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *KafkaHealthcheckExternalKeys) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_KafkaHealthcheckExternalKeys.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *KafkaHealthcheckExternalKeys) XXX_Merge(src proto.Message) {
	xxx_messageInfo_KafkaHealthcheckExternalKeys.Merge(m, src)
}
func (m *KafkaHealthcheckExternalKeys) XXX_Size() int {
	return m.Size()
}
func (m *KafkaHealthcheckExternalKeys) XXX_DiscardUnknown() {
	xxx_messageInfo_KafkaHealthcheckExternalKeys.DiscardUnknown(m)
}

var xxx_messageInfo_KafkaHealthcheckExternalKeys proto.InternalMessageInfo

func (m *KafkaHealthcheckExternalKeys) GetKafkaKey() string {
	if m != nil {
		return m.KafkaKey
	}
	return ""
}

func (m *KafkaHealthcheckExternalKeys) GetKafkaSecret() string {
	if m != nil {
		return m.KafkaSecret
	}
	return ""
}

func (m *KafkaHealthcheckExternalKeys) GetDdApiKey() string {
	if m != nil {
		return m.DdApiKey
	}
	return ""
}

func (m *KafkaHealthcheckExternalKeys) GetKafkaLinkKey() string {
	if m != nil {
		return m.KafkaLinkKey
	}
	return ""
}

func (m *KafkaHealthcheckExternalKeys) GetKafkaLinkSecret() string {
	if m != nil {
		return m.KafkaLinkSecret
	}
	return ""
}

func (m *KafkaHealthcheckExternalKeys) GetKafkaRbacKey() string {
	if m != nil {
		return m.KafkaRbacKey
	}
	return ""
}

func (m *KafkaHealthcheckExternalKeys) GetKafkaRbacSecret() string {
	if m != nil {
		return m.KafkaRbacSecret
	}
	return ""
}

type KSQLHealthcheckExternalKeys struct {
	DdApiKey             string   `protobuf:"bytes,1,opt,name=dd_api_key,json=ddApiKey,proto3" json:"dd_api_key,omitempty" redact:"-" db:"dd_api_key,omitempty" url:"dd_api_key,omitempty"`
	KsqlKey              string   `protobuf:"bytes,2,opt,name=ksql_key,json=ksqlKey,proto3" json:"ksql_key,omitempty" db:"ksql_key,omitempty" url:"ksql_key,omitempty"`
	KsqlSecret           string   `protobuf:"bytes,3,opt,name=ksql_secret,json=ksqlSecret,proto3" json:"ksql_secret,omitempty" redact:"-" db:"ksql_secret,omitempty" url:"ksql_secret,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *KSQLHealthcheckExternalKeys) Reset()         { *m = KSQLHealthcheckExternalKeys{} }
func (m *KSQLHealthcheckExternalKeys) String() string { return proto.CompactTextString(m) }
func (*KSQLHealthcheckExternalKeys) ProtoMessage()    {}
func (*KSQLHealthcheckExternalKeys) Descriptor() ([]byte, []int) {
	return fileDescriptor_f732a48f118dabc7, []int{5}
}
func (m *KSQLHealthcheckExternalKeys) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *KSQLHealthcheckExternalKeys) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_KSQLHealthcheckExternalKeys.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *KSQLHealthcheckExternalKeys) XXX_Merge(src proto.Message) {
	xxx_messageInfo_KSQLHealthcheckExternalKeys.Merge(m, src)
}
func (m *KSQLHealthcheckExternalKeys) XXX_Size() int {
	return m.Size()
}
func (m *KSQLHealthcheckExternalKeys) XXX_DiscardUnknown() {
	xxx_messageInfo_KSQLHealthcheckExternalKeys.DiscardUnknown(m)
}

var xxx_messageInfo_KSQLHealthcheckExternalKeys proto.InternalMessageInfo

func (m *KSQLHealthcheckExternalKeys) GetDdApiKey() string {
	if m != nil {
		return m.DdApiKey
	}
	return ""
}

func (m *KSQLHealthcheckExternalKeys) GetKsqlKey() string {
	if m != nil {
		return m.KsqlKey
	}
	return ""
}

func (m *KSQLHealthcheckExternalKeys) GetKsqlSecret() string {
	if m != nil {
		return m.KsqlSecret
	}
	return ""
}

type TieredStorage struct {
	Backend         string            `protobuf:"bytes,1,opt,name=backend,proto3" json:"backend,omitempty" db:"backend,omitempty" url:"backend,omitempty"`
	Bucket          string            `protobuf:"bytes,2,opt,name=bucket,proto3" json:"bucket,omitempty" db:"bucket,omitempty" url:"bucket,omitempty"`
	Region          string            `protobuf:"bytes,3,opt,name=region,proto3" json:"region,omitempty" db:"region,omitempty" url:"region,omitempty"`
	TierAllTopics   bool              `protobuf:"varint,4,opt,name=tier_all_topics,json=tierAllTopics,proto3" json:"tier_all_topics,omitempty" db:"tier_all_topics,omitempty" url:"tier_all_topics,omitempty"`
	Role            string            `protobuf:"bytes,5,opt,name=role,proto3" json:"role,omitempty" db:"role,omitempty" url:"role,omitempty"`
	EncryptionKeyId string            `protobuf:"bytes,6,opt,name=encryption_key_id,json=encryptionKeyId,proto3" json:"encryption_key_id,omitempty" db:"encryption_key_id,omitempty" url:"encryption_key_id,omitempty"`
	LocalHotsetMs   *types.Int64Value `protobuf:"bytes,7,opt,name=local_hotset_ms,json=localHotsetMs,proto3" json:"local_hotset_ms,omitempty" db:"local_hotset_ms,omitempty" url:"local_hotset_ms,omitempty"`
	Endpoint        string            `protobuf:"bytes,8,opt,name=endpoint,proto3" json:"endpoint,omitempty" db:"endpoint,omitempty" url:"endpoint,omitempty"`
	// e.g. credentials JSON, for example the REST API/clients format:
	// https://cloud.google.com/iam/docs/creating-managing-service-account-keys#creating_service_account_keys
	ServiceAccountSecret []byte `protobuf:"bytes,10,opt,name=service_account_secret,json=serviceAccountSecret,proto3" json:"service_account_secret,omitempty" redact:"-" db:"service_account_secret,omitempty" url:"service_account_secret,omitempty"`
	// e.g. the service account email in gcp
	ServiceAccountId string `protobuf:"bytes,11,opt,name=service_account_id,json=serviceAccountId,proto3" json:"service_account_id,omitempty" db:"service_account_id,omitempty" url:"service_account_id,omitempty"`
	// cire-storage-bucket-service deployment reference
	DeploymentId         string   `protobuf:"bytes,12,opt,name=deployment_id,json=deploymentId,proto3" json:"deployment_id,omitempty" db:"deployment_id,omitempty" url:"deployment_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TieredStorage) Reset()         { *m = TieredStorage{} }
func (m *TieredStorage) String() string { return proto.CompactTextString(m) }
func (*TieredStorage) ProtoMessage()    {}
func (*TieredStorage) Descriptor() ([]byte, []int) {
	return fileDescriptor_f732a48f118dabc7, []int{6}
}
func (m *TieredStorage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TieredStorage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TieredStorage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TieredStorage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TieredStorage.Merge(m, src)
}
func (m *TieredStorage) XXX_Size() int {
	return m.Size()
}
func (m *TieredStorage) XXX_DiscardUnknown() {
	xxx_messageInfo_TieredStorage.DiscardUnknown(m)
}

var xxx_messageInfo_TieredStorage proto.InternalMessageInfo

func (m *TieredStorage) GetBackend() string {
	if m != nil {
		return m.Backend
	}
	return ""
}

func (m *TieredStorage) GetBucket() string {
	if m != nil {
		return m.Bucket
	}
	return ""
}

func (m *TieredStorage) GetRegion() string {
	if m != nil {
		return m.Region
	}
	return ""
}

func (m *TieredStorage) GetTierAllTopics() bool {
	if m != nil {
		return m.TierAllTopics
	}
	return false
}

func (m *TieredStorage) GetRole() string {
	if m != nil {
		return m.Role
	}
	return ""
}

func (m *TieredStorage) GetEncryptionKeyId() string {
	if m != nil {
		return m.EncryptionKeyId
	}
	return ""
}

func (m *TieredStorage) GetLocalHotsetMs() *types.Int64Value {
	if m != nil {
		return m.LocalHotsetMs
	}
	return nil
}

func (m *TieredStorage) GetEndpoint() string {
	if m != nil {
		return m.Endpoint
	}
	return ""
}

func (m *TieredStorage) GetServiceAccountSecret() []byte {
	if m != nil {
		return m.ServiceAccountSecret
	}
	return nil
}

func (m *TieredStorage) GetServiceAccountId() string {
	if m != nil {
		return m.ServiceAccountId
	}
	return ""
}

func (m *TieredStorage) GetDeploymentId() string {
	if m != nil {
		return m.DeploymentId
	}
	return ""
}

type ReadinessHealthCheckRequest struct {
	RequestCarrier       map[string]string `protobuf:"bytes,1,rep,name=request_carrier,json=requestCarrier,proto3" json:"request_carrier,omitempty" redact:"-" db:"request_carrier,omitempty" url:"request_carrier,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Error                *Error            `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty" db:"error,omitempty" url:"error,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *ReadinessHealthCheckRequest) Reset()         { *m = ReadinessHealthCheckRequest{} }
func (m *ReadinessHealthCheckRequest) String() string { return proto.CompactTextString(m) }
func (*ReadinessHealthCheckRequest) ProtoMessage()    {}
func (*ReadinessHealthCheckRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f732a48f118dabc7, []int{7}
}
func (m *ReadinessHealthCheckRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReadinessHealthCheckRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReadinessHealthCheckRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReadinessHealthCheckRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReadinessHealthCheckRequest.Merge(m, src)
}
func (m *ReadinessHealthCheckRequest) XXX_Size() int {
	return m.Size()
}
func (m *ReadinessHealthCheckRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ReadinessHealthCheckRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ReadinessHealthCheckRequest proto.InternalMessageInfo

func (m *ReadinessHealthCheckRequest) GetRequestCarrier() map[string]string {
	if m != nil {
		return m.RequestCarrier
	}
	return nil
}

func (m *ReadinessHealthCheckRequest) GetError() *Error {
	if m != nil {
		return m.Error
	}
	return nil
}

type ReadinessHealthCheckReply struct {
	Error                *Error   `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty" db:"error,omitempty" url:"error,omitempty"`
	Message              string   `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty" db:"message,omitempty" url:"message,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReadinessHealthCheckReply) Reset()         { *m = ReadinessHealthCheckReply{} }
func (m *ReadinessHealthCheckReply) String() string { return proto.CompactTextString(m) }
func (*ReadinessHealthCheckReply) ProtoMessage()    {}
func (*ReadinessHealthCheckReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_f732a48f118dabc7, []int{8}
}
func (m *ReadinessHealthCheckReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReadinessHealthCheckReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReadinessHealthCheckReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReadinessHealthCheckReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReadinessHealthCheckReply.Merge(m, src)
}
func (m *ReadinessHealthCheckReply) XXX_Size() int {
	return m.Size()
}
func (m *ReadinessHealthCheckReply) XXX_DiscardUnknown() {
	xxx_messageInfo_ReadinessHealthCheckReply.DiscardUnknown(m)
}

var xxx_messageInfo_ReadinessHealthCheckReply proto.InternalMessageInfo

func (m *ReadinessHealthCheckReply) GetError() *Error {
	if m != nil {
		return m.Error
	}
	return nil
}

func (m *ReadinessHealthCheckReply) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type DataBalancerConfig struct {
	ReplicationThrottleBytesPerSec  *types.Int64Value  `protobuf:"bytes,1,opt,name=replication_throttle_bytes_per_sec,json=replicationThrottleBytesPerSec,proto3" json:"replication_throttle_bytes_per_sec,omitempty" db:"replication_throttle_bytes_per_sec,omitempty" url:"replication_throttle_bytes_per_sec,omitempty"`
	SelfHealingGoalViolationEnabled *types.BoolValue   `protobuf:"bytes,2,opt,name=self_healing_goal_violation_enabled,json=selfHealingGoalViolationEnabled,proto3" json:"self_healing_goal_violation_enabled,omitempty" db:"self_healing_goal_violation_enabled,omitempty" url:"self_healing_goal_violation_enabled,omitempty"`
	MaxVolumeThroughputMbPerSec     *types.Int32Value  `protobuf:"bytes,3,opt,name=max_volume_throughput_mb_per_sec,json=maxVolumeThroughputMbPerSec,proto3" json:"max_volume_throughput_mb_per_sec,omitempty" db:"max_volume_throughput_mb_per_sec,omitempty" url:"max_volume_throughput_mb_per_sec,omitempty"`
	WriteThroughputMultiplier       *types.DoubleValue `protobuf:"bytes,4,opt,name=write_throughput_multiplier,json=writeThroughputMultiplier,proto3" json:"write_throughput_multiplier,omitempty" db:"write_throughput_multiplier,omitempty" url:"write_throughput_multiplier,omitempty"`
	ReadThroughputMultiplier        *types.DoubleValue `protobuf:"bytes,5,opt,name=read_throughput_multiplier,json=readThroughputMultiplier,proto3" json:"read_throughput_multiplier,omitempty" db:"read_throughput_multiplier,omitempty" url:"read_throughput_multiplier,omitempty"`
	XXX_NoUnkeyedLiteral            struct{}           `json:"-"`
	XXX_unrecognized                []byte             `json:"-"`
	XXX_sizecache                   int32              `json:"-"`
}

func (m *DataBalancerConfig) Reset()         { *m = DataBalancerConfig{} }
func (m *DataBalancerConfig) String() string { return proto.CompactTextString(m) }
func (*DataBalancerConfig) ProtoMessage()    {}
func (*DataBalancerConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_f732a48f118dabc7, []int{11}
}
func (m *DataBalancerConfig) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DataBalancerConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DataBalancerConfig.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DataBalancerConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DataBalancerConfig.Merge(m, src)
}
func (m *DataBalancerConfig) XXX_Size() int {
	return m.Size()
}
func (m *DataBalancerConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_DataBalancerConfig.DiscardUnknown(m)
}

var xxx_messageInfo_DataBalancerConfig proto.InternalMessageInfo

func (m *DataBalancerConfig) GetReplicationThrottleBytesPerSec() *types.Int64Value {
	if m != nil {
		return m.ReplicationThrottleBytesPerSec
	}
	return nil
}

func (m *DataBalancerConfig) GetSelfHealingGoalViolationEnabled() *types.BoolValue {
	if m != nil {
		return m.SelfHealingGoalViolationEnabled
	}
	return nil
}

func (m *DataBalancerConfig) GetMaxVolumeThroughputMbPerSec() *types.Int32Value {
	if m != nil {
		return m.MaxVolumeThroughputMbPerSec
	}
	return nil
}

func (m *DataBalancerConfig) GetWriteThroughputMultiplier() *types.DoubleValue {
	if m != nil {
		return m.WriteThroughputMultiplier
	}
	return nil
}

func (m *DataBalancerConfig) GetReadThroughputMultiplier() *types.DoubleValue {
	if m != nil {
		return m.ReadThroughputMultiplier
	}
	return nil
}

// Used by spec services to return feature flags to scheduler
type FeatureFlagValue struct {
	// Types that are valid to be assigned to FlagValue:
	//	*FeatureFlagValue_IntVal
	//	*FeatureFlagValue_BoolVal
	//	*FeatureFlagValue_StringVal
	FlagValue            isFeatureFlagValue_FlagValue `protobuf_oneof:"flag_value"`
	XXX_NoUnkeyedLiteral struct{}                     `json:"-"`
	XXX_unrecognized     []byte                       `json:"-"`
	XXX_sizecache        int32                        `json:"-"`
}

func (m *FeatureFlagValue) Reset()         { *m = FeatureFlagValue{} }
func (m *FeatureFlagValue) String() string { return proto.CompactTextString(m) }
func (*FeatureFlagValue) ProtoMessage()    {}
func (*FeatureFlagValue) Descriptor() ([]byte, []int) {
	return fileDescriptor_f732a48f118dabc7, []int{12}
}
func (m *FeatureFlagValue) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FeatureFlagValue) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FeatureFlagValue.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FeatureFlagValue) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FeatureFlagValue.Merge(m, src)
}
func (m *FeatureFlagValue) XXX_Size() int {
	return m.Size()
}
func (m *FeatureFlagValue) XXX_DiscardUnknown() {
	xxx_messageInfo_FeatureFlagValue.DiscardUnknown(m)
}

var xxx_messageInfo_FeatureFlagValue proto.InternalMessageInfo

type isFeatureFlagValue_FlagValue interface {
	isFeatureFlagValue_FlagValue()
	MarshalTo([]byte) (int, error)
	Size() int
}

type FeatureFlagValue_IntVal struct {
	IntVal int64 `protobuf:"varint,1,opt,name=int_val,json=intVal,proto3,oneof"`
}
type FeatureFlagValue_BoolVal struct {
	BoolVal bool `protobuf:"varint,2,opt,name=bool_val,json=boolVal,proto3,oneof"`
}
type FeatureFlagValue_StringVal struct {
	StringVal string `protobuf:"bytes,3,opt,name=string_val,json=stringVal,proto3,oneof"`
}

func (*FeatureFlagValue_IntVal) isFeatureFlagValue_FlagValue()    {}
func (*FeatureFlagValue_BoolVal) isFeatureFlagValue_FlagValue()   {}
func (*FeatureFlagValue_StringVal) isFeatureFlagValue_FlagValue() {}

func (m *FeatureFlagValue) GetFlagValue() isFeatureFlagValue_FlagValue {
	if m != nil {
		return m.FlagValue
	}
	return nil
}

func (m *FeatureFlagValue) GetIntVal() int64 {
	if x, ok := m.GetFlagValue().(*FeatureFlagValue_IntVal); ok {
		return x.IntVal
	}
	return 0
}

func (m *FeatureFlagValue) GetBoolVal() bool {
	if x, ok := m.GetFlagValue().(*FeatureFlagValue_BoolVal); ok {
		return x.BoolVal
	}
	return false
}

func (m *FeatureFlagValue) GetStringVal() string {
	if x, ok := m.GetFlagValue().(*FeatureFlagValue_StringVal); ok {
		return x.StringVal
	}
	return ""
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*FeatureFlagValue) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _FeatureFlagValue_OneofMarshaler, _FeatureFlagValue_OneofUnmarshaler, _FeatureFlagValue_OneofSizer, []interface{}{
		(*FeatureFlagValue_IntVal)(nil),
		(*FeatureFlagValue_BoolVal)(nil),
		(*FeatureFlagValue_StringVal)(nil),
	}
}

func _FeatureFlagValue_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*FeatureFlagValue)
	// flag_value
	switch x := m.FlagValue.(type) {
	case *FeatureFlagValue_IntVal:
		_ = b.EncodeVarint(1<<3 | proto.WireVarint)
		_ = b.EncodeVarint(uint64(x.IntVal))
	case *FeatureFlagValue_BoolVal:
		t := uint64(0)
		if x.BoolVal {
			t = 1
		}
		_ = b.EncodeVarint(2<<3 | proto.WireVarint)
		_ = b.EncodeVarint(t)
	case *FeatureFlagValue_StringVal:
		_ = b.EncodeVarint(3<<3 | proto.WireBytes)
		_ = b.EncodeStringBytes(x.StringVal)
	case nil:
	default:
		return fmt.Errorf("FeatureFlagValue.FlagValue has unexpected type %T", x)
	}
	return nil
}

func _FeatureFlagValue_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*FeatureFlagValue)
	switch tag {
	case 1: // flag_value.int_val
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.FlagValue = &FeatureFlagValue_IntVal{int64(x)}
		return true, err
	case 2: // flag_value.bool_val
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.FlagValue = &FeatureFlagValue_BoolVal{x != 0}
		return true, err
	case 3: // flag_value.string_val
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.FlagValue = &FeatureFlagValue_StringVal{x}
		return true, err
	default:
		return false, nil
	}
}

func _FeatureFlagValue_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*FeatureFlagValue)
	// flag_value
	switch x := m.FlagValue.(type) {
	case *FeatureFlagValue_IntVal:
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(x.IntVal))
	case *FeatureFlagValue_BoolVal:
		n += 1 // tag and wire
		n += 1
	case *FeatureFlagValue_StringVal:
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(len(x.StringVal)))
		n += len(x.StringVal)
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

func init() {
	proto.RegisterEnum("ccloud.core.MarketplacePartner", MarketplacePartner_name, MarketplacePartner_value)
	proto.RegisterType((*Router)(nil), "ccloud.core.Router")
	proto.RegisterType((*Secret)(nil), "ccloud.core.Secret")
	proto.RegisterType((*APIKeys)(nil), "ccloud.core.APIKeys")
	proto.RegisterMapType((map[string]*APIKey)(nil), "ccloud.core.APIKeys.KeysEntry")
	proto.RegisterType((*APIKey)(nil), "ccloud.core.APIKey")
	proto.RegisterType((*KafkaHealthcheckExternalKeys)(nil), "ccloud.core.KafkaHealthcheckExternalKeys")
	proto.RegisterType((*KSQLHealthcheckExternalKeys)(nil), "ccloud.core.KSQLHealthcheckExternalKeys")
	proto.RegisterType((*TieredStorage)(nil), "ccloud.core.TieredStorage")
	proto.RegisterType((*ReadinessHealthCheckRequest)(nil), "ccloud.core.ReadinessHealthCheckRequest")
	proto.RegisterMapType((map[string]string)(nil), "ccloud.core.ReadinessHealthCheckRequest.RequestCarrierEntry")
	proto.RegisterType((*ReadinessHealthCheckReply)(nil), "ccloud.core.ReadinessHealthCheckReply")
	proto.RegisterType((*Credentials)(nil), "ccloud.core.Credentials")
	proto.RegisterType((*MarketplaceCreds)(nil), "ccloud.core.MarketplaceCreds")
	proto.RegisterType((*DataBalancerConfig)(nil), "ccloud.core.DataBalancerConfig")
	proto.RegisterType((*FeatureFlagValue)(nil), "ccloud.core.FeatureFlagValue")
}

func init() { proto.RegisterFile("core/core.proto", fileDescriptor_f732a48f118dabc7) }

var fileDescriptor_f732a48f118dabc7 = []byte{
	// 2064 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x58, 0xcf, 0x6f, 0x1b, 0xc7,
	0xf5, 0xf7, 0xea, 0x07, 0x49, 0x0d, 0x65, 0x4b, 0xd9, 0x04, 0xdf, 0xaf, 0x22, 0x07, 0x5a, 0x81,
	0x05, 0x0a, 0xd7, 0xb0, 0xa9, 0x58, 0x31, 0x5c, 0xc3, 0x31, 0x9c, 0x88, 0xb2, 0x6c, 0x29, 0xb2,
	0x1c, 0x79, 0xe4, 0xc8, 0x89, 0x7d, 0xd8, 0x0c, 0x77, 0x47, 0xe4, 0x9a, 0xc3, 0xdd, 0xf5, 0xec,
	0x2c, 0x6d, 0xa2, 0xe8, 0xb1, 0x28, 0xd0, 0x53, 0x7b, 0xe9, 0x2d, 0xf7, 0xfe, 0x01, 0x3d, 0xb4,
	0x40, 0x6f, 0x3d, 0x34, 0xbd, 0x14, 0x29, 0xd0, 0xf3, 0xa2, 0xf0, 0xa1, 0xb7, 0x5e, 0xf6, 0x58,
	0xf4, 0x50, 0xcc, 0x8f, 0x5d, 0x72, 0x39, 0x4b, 0xc9, 0x81, 0xdb, 0x8b, 0xbc, 0x7e, 0x9f, 0x37,
	0x9f, 0x37, 0xef, 0xcd, 0xfb, 0x31, 0x43, 0xb0, 0xe4, 0x04, 0x14, 0x6f, 0xf0, 0x3f, 0xcd, 0x90,
	0x06, 0x2c, 0x30, 0xeb, 0x8e, 0x43, 0x82, 0xd8, 0x6d, 0x72, 0xd1, 0xea, 0xb2, 0x40, 0x31, 0xa5,
	0x01, 0x95, 0xf0, 0xea, 0x7b, 0x9d, 0xa0, 0x13, 0x88, 0xcf, 0x0d, 0xfe, 0xa5, 0xa4, 0x8d, 0xde,
	0xcd, 0xa8, 0xe9, 0x05, 0x1b, 0x28, 0xf4, 0x04, 0xd7, 0xc6, 0xe0, 0xda, 0x46, 0x07, 0xfb, 0x98,
	0x22, 0x86, 0x5d, 0xa5, 0xb3, 0xd6, 0x09, 0x82, 0x0e, 0xc1, 0x1b, 0xe2, 0x7f, 0xed, 0xf8, 0x64,
	0xe3, 0x25, 0x45, 0x61, 0x88, 0x69, 0xa4, 0xf0, 0xff, 0x1f, 0x20, 0xe2, 0xb9, 0x88, 0xe1, 0x8d,
	0xec, 0x43, 0x02, 0x8d, 0x3f, 0xcf, 0x80, 0x0a, 0x0c, 0x62, 0x86, 0xa9, 0x79, 0x17, 0xcc, 0x8b,
	0xdd, 0xad, 0x18, 0xeb, 0xc6, 0xa5, 0x85, 0x56, 0x33, 0x4d, 0xac, 0xcb, 0x6e, 0xfb, 0x56, 0x43,
	0x08, 0xaf, 0x04, 0x7d, 0x8f, 0xe1, 0x7e, 0xc8, 0x86, 0x8d, 0xf5, 0x98, 0x12, 0x5d, 0x0a, 0xe5,
	0x62, 0x73, 0x17, 0x54, 0x28, 0xee, 0x78, 0x81, 0xbf, 0x32, 0x23, 0x68, 0x3e, 0x4c, 0x13, 0xeb,
	0x0a, 0xa7, 0x91, 0x52, 0x8d, 0x47, 0x13, 0x43, 0xb5, 0xde, 0x7c, 0x06, 0xea, 0xbd, 0x9b, 0x91,
	0xed, 0x90, 0x38, 0x62, 0x98, 0xae, 0xcc, 0x0a, 0xba, 0x5b, 0x69, 0x62, 0xdd, 0xe0, 0x74, 0x63,
	0x90, 0xc6, 0x59, 0x8e, 0x41, 0xd0, 0xbb, 0x19, 0x6d, 0x4b, 0xb1, 0xf9, 0x00, 0x54, 0x33, 0xe2,
	0x79, 0x41, 0xbc, 0x99, 0x26, 0x56, 0x53, 0xba, 0x5b, 0x4e, 0x5a, 0x42, 0x98, 0x51, 0x7c, 0x36,
	0x57, 0x9b, 0x5b, 0x9e, 0x6f, 0xfc, 0xcc, 0x00, 0x95, 0x23, 0xec, 0x50, 0xcc, 0xcc, 0x9f, 0x80,
	0x4a, 0x24, 0xbe, 0x44, 0x30, 0xeb, 0x9b, 0xab, 0x4d, 0x79, 0x88, 0x4d, 0x14, 0x7a, 0xe2, 0xf4,
	0x9b, 0x83, 0x6b, 0x4d, 0xa9, 0xdb, 0xba, 0xff, 0xaf, 0xd6, 0xfc, 0x2f, 0x8c, 0x99, 0x9a, 0xf1,
	0x5d, 0x62, 0x19, 0x69, 0x62, 0xfd, 0x98, 0x62, 0x17, 0x39, 0xec, 0x56, 0xe3, 0x6a, 0x63, 0x9d,
	0x6f, 0x48, 0x12, 0x69, 0xfb, 0xd1, 0xc4, 0x50, 0x99, 0x6c, 0xfc, 0x7a, 0x06, 0x54, 0xb7, 0x0e,
	0xf7, 0xf6, 0xf1, 0x30, 0x32, 0xbf, 0x06, 0x73, 0x3d, 0x3c, 0x8c, 0x56, 0x8c, 0xf5, 0xd9, 0x4b,
	0xf5, 0xcd, 0xb5, 0xe6, 0x58, 0x02, 0x36, 0x95, 0x4e, 0x93, 0xff, 0xd9, 0xf1, 0x19, 0x1d, 0xb6,
	0xae, 0xa4, 0x89, 0x75, 0x49, 0x44, 0x17, 0x0f, 0x23, 0x3d, 0xac, 0x45, 0x21, 0x14, 0xcc, 0xab,
	0xbf, 0x31, 0xc0, 0x42, 0xce, 0x60, 0xde, 0x06, 0xb3, 0x3d, 0x3c, 0x54, 0x29, 0x74, 0x39, 0x4d,
	0xac, 0x1f, 0x2a, 0xba, 0x32, 0xb6, 0x71, 0x32, 0xbe, 0xcc, 0xfc, 0x0a, 0xcc, 0x0f, 0x10, 0x89,
	0xb1, 0xc8, 0x9d, 0xfa, 0xe6, 0xbb, 0x25, 0xdb, 0x1d, 0xe5, 0xa5, 0xd0, 0xd4, 0x68, 0x27, 0xa5,
	0x50, 0x32, 0xde, 0x9a, 0xb9, 0x69, 0x34, 0xfe, 0x39, 0x07, 0x2a, 0x92, 0xc5, 0xec, 0x80, 0x0b,
	0x11, 0x8a, 0x88, 0xdd, 0xc7, 0x4e, 0x17, 0xf9, 0x5e, 0xd4, 0x57, 0x5b, 0xfe, 0x34, 0x4d, 0xac,
	0xdb, 0x22, 0xea, 0x05, 0x54, 0x8f, 0xfe, 0x34, 0x18, 0x9e, 0xe7, 0xd0, 0x41, 0x86, 0x98, 0x0e,
	0x38, 0xdf, 0x45, 0x51, 0x17, 0xbb, 0xb6, 0x4a, 0x08, 0x59, 0x16, 0x77, 0xd2, 0xc4, 0xba, 0xc5,
	0xed, 0x14, 0x40, 0xcd, 0xcc, 0x34, 0x14, 0x2e, 0x4a, 0x44, 0xa5, 0x9b, 0x32, 0x62, 0x9f, 0xc4,
	0xbe, 0xc3, 0x78, 0xed, 0xcd, 0xea, 0x46, 0x72, 0xb0, 0xd4, 0x48, 0x19, 0x2a, 0x8d, 0xdc, 0x53,
	0x80, 0x39, 0x00, 0x26, 0x09, 0x3a, 0x9e, 0x83, 0x48, 0x56, 0x5c, 0xb6, 0xe7, 0xae, 0xcc, 0x09,
	0x4b, 0xbb, 0x69, 0x62, 0xdd, 0xe5, 0x96, 0x74, 0x0d, 0xcd, 0xdc, 0xa9, 0x2a, 0x70, 0x59, 0xc1,
	0xaa, 0x50, 0xf7, 0x5c, 0x73, 0x1f, 0x54, 0xe3, 0x48, 0x1a, 0xab, 0x14, 0x4b, 0x55, 0x89, 0x35,
	0x0b, 0xba, 0x1c, 0x56, 0xb8, 0x6c, 0xcf, 0x35, 0x7b, 0x60, 0x29, 0xc2, 0x74, 0xe0, 0x39, 0xd8,
	0x46, 0x8e, 0x13, 0xc4, 0x3e, 0x5b, 0xa9, 0xae, 0x1b, 0x97, 0x6a, 0xad, 0x56, 0x9a, 0x58, 0x77,
	0x64, 0xb9, 0x15, 0xe0, 0x92, 0xba, 0x9b, 0x86, 0xc3, 0x0b, 0x0a, 0xdb, 0x92, 0x50, 0xe3, 0x97,
	0x15, 0xf0, 0xc1, 0x3e, 0x3a, 0xe9, 0xa1, 0x5d, 0x8c, 0x08, 0xeb, 0x3a, 0x5d, 0xec, 0xf4, 0x76,
	0x5e, 0x31, 0x4c, 0x7d, 0x44, 0x44, 0x75, 0x1e, 0x81, 0x85, 0x1e, 0xc7, 0xed, 0x51, 0xcd, 0xdc,
	0x48, 0x13, 0x6b, 0x53, 0xd4, 0x4c, 0x06, 0xe8, 0x95, 0x53, 0x82, 0xc0, 0x9a, 0x90, 0xf2, 0xd4,
	0x7e, 0x0e, 0x16, 0xa5, 0x46, 0x21, 0xe1, 0xee, 0xa7, 0x89, 0xb5, 0x3d, 0xd1, 0x59, 0xc6, 0xd5,
	0xa6, 0x58, 0xd1, 0x33, 0xaf, 0x2e, 0x00, 0x95, 0x78, 0x08, 0x00, 0xd7, 0xb5, 0x51, 0xe8, 0x09,
	0x0f, 0x64, 0xd6, 0x6d, 0xa7, 0x89, 0xf5, 0xc9, 0x84, 0xa5, 0x91, 0x92, 0x66, 0xa7, 0x14, 0x82,
	0x35, 0xd7, 0xdd, 0x0a, 0x3d, 0xee, 0xce, 0x09, 0xb8, 0x20, 0xb7, 0x42, 0x3c, 0xbf, 0x27, 0xcc,
	0xcc, 0x15, 0x2b, 0xb5, 0x88, 0x4e, 0xf1, 0xa3, 0x04, 0x86, 0x32, 0x4c, 0x0f, 0x3c, 0xbf, 0xc7,
	0xed, 0xfc, 0x14, 0xbc, 0x33, 0xa6, 0xaa, 0x62, 0x27, 0x67, 0xc3, 0xa3, 0x34, 0xb1, 0x0e, 0x4a,
	0x63, 0x37, 0xa6, 0x7b, 0x9a, 0x61, 0x3d, 0x8a, 0x4b, 0xb9, 0x6d, 0x15, 0xc9, 0xdc, 0x4d, 0xda,
	0x46, 0x8e, 0x70, 0xb3, 0x52, 0xe6, 0x66, 0x86, 0x4e, 0xb1, 0x56, 0x02, 0x2b, 0x37, 0x61, 0x1b,
	0x39, 0x05, 0x37, 0x85, 0xaa, 0x72, 0xb3, 0x7a, 0x86, 0x9b, 0x63, 0xba, 0xa7, 0x19, 0x9e, 0xe6,
	0x26, 0xb7, 0x2d, 0xdd, 0x6c, 0xfc, 0x7e, 0x06, 0x5c, 0xdc, 0x3f, 0x7a, 0xf4, 0x60, 0x5a, 0x45,
	0x14, 0x13, 0xca, 0xf8, 0x5f, 0x24, 0xd4, 0xe7, 0xa0, 0xd6, 0x8b, 0x5e, 0x10, 0x61, 0x40, 0xd6,
	0xc6, 0xf5, 0x34, 0xb1, 0x3e, 0x14, 0xde, 0x2a, 0xb9, 0xee, 0xa4, 0x0e, 0xc0, 0x2a, 0x17, 0xca,
	0x0c, 0xad, 0x0b, 0x5c, 0x05, 0x53, 0x56, 0xc1, 0x4e, 0x9a, 0x58, 0x5b, 0x93, 0xc1, 0x1c, 0x69,
	0x95, 0x5b, 0xd0, 0x03, 0x08, 0xb8, 0x5c, 0xc5, 0xee, 0x1f, 0x35, 0x70, 0xfe, 0xb1, 0x87, 0x29,
	0x76, 0x8f, 0x58, 0x40, 0x51, 0x07, 0xf3, 0x5b, 0x4c, 0x1b, 0x39, 0x3d, 0xec, 0x67, 0x97, 0xb6,
	0xbc, 0x35, 0x2a, 0xb1, 0x66, 0x46, 0x97, 0xc3, 0x8c, 0x82, 0x5f, 0xdd, 0xda, 0xb1, 0xd3, 0xcb,
	0x5b, 0x46, 0x7e, 0x75, 0x93, 0x52, 0x9d, 0x6b, 0x52, 0x0c, 0xd5, 0xfa, 0xb1, 0x4b, 0xe0, 0xec,
	0x5b, 0x5e, 0x02, 0x9f, 0x83, 0x25, 0xe6, 0x61, 0x6a, 0x23, 0x42, 0x6c, 0x16, 0x84, 0x9e, 0x13,
	0x89, 0xf2, 0x1f, 0xeb, 0xd7, 0x13, 0xb0, 0xc6, 0x3d, 0x1d, 0x87, 0xe7, 0x39, 0xb6, 0x45, 0xc8,
	0x63, 0x81, 0x98, 0x9f, 0x82, 0x39, 0x1a, 0x10, 0xac, 0x8a, 0x3e, 0xbf, 0x0b, 0x71, 0x99, 0xbe,
	0xe3, 0xa2, 0x10, 0x8a, 0x95, 0x26, 0x05, 0xef, 0x60, 0xdf, 0xa1, 0xc3, 0x90, 0x0f, 0x4c, 0x9e,
	0x2f, 0xa3, 0xa1, 0x75, 0x2f, 0x4d, 0xac, 0x16, 0xa7, 0xd3, 0x14, 0x34, 0xee, 0xd3, 0x34, 0xe0,
	0xd2, 0x08, 0xdd, 0xc7, 0xc3, 0x3d, 0xd7, 0xfc, 0xb9, 0x01, 0x96, 0x48, 0xc0, 0x07, 0x6a, 0x37,
	0x60, 0x11, 0x66, 0x76, 0x3f, 0x12, 0xf5, 0x5c, 0xdf, 0xbc, 0xd8, 0x94, 0xaf, 0x82, 0x66, 0xf6,
	0x2a, 0x68, 0xee, 0xf9, 0xec, 0xc6, 0xf5, 0x63, 0x7e, 0x1f, 0x1a, 0xc5, 0x6f, 0x62, 0x6d, 0xc9,
	0xb8, 0x9e, 0x86, 0xc3, 0xf3, 0x02, 0xdb, 0x15, 0xd0, 0x41, 0x64, 0x1e, 0x82, 0x1a, 0xf6, 0xdd,
	0x30, 0xf0, 0x7c, 0xb6, 0x52, 0x2b, 0x16, 0x56, 0x26, 0x2f, 0xf1, 0x55, 0x03, 0x60, 0xce, 0x62,
	0xfe, 0xca, 0x00, 0xff, 0x37, 0x31, 0x6f, 0xb3, 0x2a, 0x03, 0xeb, 0xc6, 0xa5, 0xc5, 0xd6, 0xb3,
	0x34, 0xb1, 0x9e, 0x68, 0xf7, 0xe5, 0xb2, 0x05, 0x67, 0xcd, 0xf1, 0x92, 0xda, 0x7b, 0xaf, 0x38,
	0xce, 0x55, 0xa3, 0x1e, 0x00, 0x73, 0x72, 0xa9, 0xe7, 0xae, 0xd4, 0x8b, 0xd7, 0x20, 0x5d, 0xe3,
	0x4c, 0xfb, 0x13, 0xd7, 0xa0, 0xa2, 0xed, 0x3d, 0x97, 0xdf, 0xf1, 0x5c, 0x1c, 0x92, 0x60, 0xd8,
	0xc7, 0xd2, 0xe4, 0x62, 0xf1, 0x8e, 0x57, 0x00, 0xf5, 0xa6, 0x38, 0x05, 0x85, 0x8b, 0x23, 0x64,
	0xcf, 0xfd, 0x6c, 0xae, 0xb6, 0xb0, 0x0c, 0x1a, 0x7f, 0x99, 0x05, 0x17, 0x21, 0x46, 0xae, 0xe7,
	0xe3, 0x28, 0x92, 0x9d, 0x7a, 0x9b, 0x77, 0x6a, 0x88, 0x5f, 0xc4, 0x38, 0x62, 0xe6, 0x6f, 0x0d,
	0xb0, 0x44, 0xe5, 0xb7, 0xed, 0x20, 0x4a, 0x3d, 0x4c, 0xd5, 0x03, 0xe3, 0x76, 0xe1, 0xc6, 0x7e,
	0x0a, 0x47, 0x53, 0xfd, 0xbb, 0x2d, 0x97, 0xcb, 0xe7, 0xc7, 0x41, 0x9a, 0x58, 0x7b, 0x13, 0xa7,
	0x39, 0x61, 0xa7, 0xa4, 0x75, 0x4c, 0xc3, 0xe1, 0x05, 0x5a, 0xb0, 0x61, 0x7e, 0x09, 0xe6, 0xc5,
	0x6b, 0x5b, 0xbd, 0x2e, 0xcc, 0xc2, 0x5e, 0x77, 0x38, 0x32, 0x7a, 0x5c, 0x08, 0x45, 0x3d, 0x5b,
	0x27, 0xa4, 0x50, 0x12, 0xae, 0x7e, 0x63, 0x80, 0x77, 0x4b, 0x1c, 0x7a, 0xcb, 0xd7, 0xd0, 0xdd,
	0xf1, 0xd7, 0xd0, 0xc2, 0xdb, 0x3c, 0x7c, 0xfe, 0x68, 0x80, 0xf7, 0xcb, 0x0f, 0x23, 0x24, 0xc3,
	0x51, 0x5c, 0x8c, 0xff, 0x72, 0x5c, 0xf8, 0x7c, 0xea, 0xe3, 0x28, 0x42, 0x9d, 0xcc, 0x87, 0x7c,
	0x3e, 0x29, 0xb1, 0xc6, 0xa4, 0xcb, 0x61, 0x46, 0xd1, 0xf8, 0x83, 0x01, 0xea, 0xfc, 0x0a, 0x8b,
	0x7d, 0xe6, 0x21, 0x22, 0xfa, 0x0d, 0xbf, 0xd5, 0xfb, 0xa8, 0x8f, 0x55, 0x88, 0xf3, 0x7e, 0x93,
	0xc9, 0x4b, 0x9f, 0x06, 0x13, 0x00, 0xcc, 0x59, 0xcc, 0x67, 0xa0, 0x16, 0xa2, 0x28, 0x7a, 0x19,
	0x50, 0x57, 0x6d, 0xf8, 0x93, 0x34, 0xb1, 0x3e, 0x9e, 0x48, 0xc9, 0x4c, 0x45, 0x23, 0x2f, 0x01,
	0x60, 0x4e, 0xd8, 0xf8, 0x93, 0x01, 0x96, 0x0f, 0x10, 0xed, 0x61, 0x16, 0x12, 0xe4, 0x60, 0xee,
	0x49, 0xc4, 0xcf, 0x98, 0x05, 0x3d, 0xec, 0x4f, 0xfe, 0xe8, 0x22, 0x84, 0xfa, 0x2c, 0x9b, 0x90,
	0x42, 0xb9, 0xd8, 0xec, 0x83, 0x6a, 0x88, 0x28, 0xf3, 0xb1, 0xcc, 0xed, 0x0b, 0x9b, 0x56, 0xe1,
	0x0c, 0xc7, 0xac, 0x1e, 0x4a, 0xb5, 0xd1, 0x41, 0xa8, 0x75, 0x25, 0xbe, 0x4c, 0xca, 0x61, 0x66,
	0xa3, 0xf1, 0xef, 0x2a, 0x30, 0xef, 0x22, 0x86, 0x5a, 0x88, 0x20, 0xdf, 0xc1, 0x74, 0x3b, 0xf0,
	0x4f, 0xbc, 0x8e, 0xf9, 0x57, 0x03, 0x34, 0x28, 0x0e, 0x89, 0xe7, 0x20, 0x31, 0xbc, 0x58, 0x97,
	0x06, 0x8c, 0x11, 0x6c, 0xb7, 0x87, 0x0c, 0x47, 0x76, 0x88, 0x29, 0x6f, 0xb2, 0x2a, 0xcb, 0x4e,
	0x1d, 0x4e, 0xdd, 0x34, 0xb1, 0x5c, 0x59, 0xfd, 0x67, 0xd1, 0x95, 0x34, 0x84, 0xef, 0xb1, 0x04,
	0xae, 0x8d, 0xa9, 0x3f, 0x56, 0xda, 0x2d, 0xae, 0x7c, 0x88, 0xe9, 0x11, 0x76, 0xcc, 0xbf, 0x19,
	0xe0, 0x07, 0x11, 0x26, 0x27, 0x76, 0x17, 0x23, 0xe2, 0xf9, 0x1d, 0xbb, 0x13, 0x20, 0x62, 0x0f,
	0xbc, 0x80, 0x48, 0x0b, 0xd8, 0x47, 0x6d, 0x82, 0x5d, 0xd5, 0x52, 0x56, 0x35, 0xa7, 0x5a, 0x41,
	0x40, 0xa4, 0x4f, 0xcf, 0xd3, 0xc4, 0x3a, 0x91, 0xb3, 0xe1, 0x4c, 0xba, 0x92, 0x61, 0xf1, 0x7d,
	0xd6, 0x40, 0x8b, 0xeb, 0xef, 0x4a, 0xf5, 0xfb, 0x01, 0x22, 0xc7, 0x99, 0xf2, 0x8e, 0xd4, 0x35,
	0xbf, 0x35, 0xc0, 0x7a, 0x1f, 0xbd, 0xb2, 0x07, 0x01, 0x89, 0xfb, 0x58, 0xc4, 0x29, 0xee, 0x74,
	0xc3, 0x98, 0xd9, 0xfd, 0x76, 0x7e, 0x50, 0xb3, 0xd3, 0x0f, 0xea, 0xa3, 0x4d, 0xe9, 0x94, 0x9b,
	0x26, 0xd6, 0xd7, 0xa2, 0x9e, 0xcf, 0x20, 0xd3, 0x0b, 0xfd, 0xcd, 0x17, 0xc0, 0x8b, 0x7d, 0xf4,
	0xea, 0x58, 0xe8, 0x3e, 0xce, 0x55, 0x0f, 0xda, 0xea, 0x84, 0x7e, 0x67, 0x80, 0x8b, 0x2f, 0xa9,
	0xc7, 0x8a, 0x3c, 0x31, 0x61, 0x5e, 0x48, 0xf8, 0x60, 0x9a, 0x13, 0x5e, 0x7c, 0xa0, 0x79, 0x71,
	0x37, 0x88, 0xdb, 0x04, 0x4b, 0x37, 0x9e, 0xa6, 0x89, 0x75, 0xcc, 0xdd, 0x38, 0x85, 0x48, 0xf3,
	0xe0, 0xcd, 0x74, 0xe1, 0xfb, 0x42, 0x6f, 0x6c, 0xe3, 0xb9, 0x16, 0x9f, 0xa3, 0xab, 0x14, 0x23,
	0x77, 0xca, 0xce, 0xe7, 0xdf, 0x60, 0xe7, 0x5f, 0xa6, 0x89, 0xf5, 0x58, 0x56, 0xca, 0x34, 0x9e,
	0x92, 0x0a, 0x79, 0x03, 0x55, 0xb8, 0xc2, 0xd5, 0xca, 0xb6, 0xdd, 0xf8, 0x66, 0x06, 0x2c, 0xdf,
	0xc3, 0x88, 0xc5, 0x14, 0xdf, 0x23, 0xa8, 0x23, 0x36, 0x62, 0x1e, 0x80, 0xaa, 0xe7, 0x33, 0x7b,
	0x80, 0x88, 0x28, 0xf0, 0xd9, 0x51, 0x87, 0x51, 0x62, 0x6d, 0x1b, 0xba, 0x7c, 0xf7, 0x1c, 0xac,
	0x78, 0x3e, 0x3b, 0x46, 0xc4, 0x7c, 0x04, 0x6a, 0xed, 0x20, 0x20, 0x82, 0x6f, 0x46, 0x5c, 0xf8,
	0xf3, 0xde, 0x9e, 0xc9, 0xf5, 0xf7, 0x88, 0x0e, 0xec, 0x9e, 0x83, 0xd5, 0xb6, 0x2c, 0x41, 0xf3,
	0x2b, 0x00, 0x22, 0x46, 0x79, 0x01, 0x71, 0x52, 0xf9, 0x30, 0xb9, 0x99, 0x26, 0xd6, 0x75, 0x51,
	0x94, 0x39, 0xa2, 0xd7, 0x5e, 0x19, 0xb4, 0x7b, 0x0e, 0x2e, 0x48, 0xe0, 0x18, 0x91, 0xd6, 0x22,
	0x00, 0x27, 0x04, 0x09, 0x9d, 0x18, 0x5f, 0xbe, 0x03, 0x4c, 0xbd, 0xe3, 0x9a, 0x75, 0x50, 0xfd,
	0xe2, 0xe1, 0xfe, 0xc3, 0xcf, 0x9f, 0x3c, 0x5c, 0x3e, 0x67, 0x56, 0xc1, 0xec, 0xfd, 0xed, 0xc3,
	0x65, 0x83, 0x7f, 0x6c, 0x3d, 0x39, 0x5a, 0x9e, 0x31, 0x17, 0xc0, 0xfc, 0xd6, 0xd3, 0x2f, 0xe0,
	0xce, 0xf2, 0x6c, 0xeb, 0xc5, 0xb7, 0xaf, 0xd7, 0x8c, 0xef, 0x5e, 0xaf, 0x19, 0x7f, 0x7f, 0xbd,
	0x66, 0x80, 0x1f, 0x79, 0x41, 0xd3, 0x09, 0xfc, 0x13, 0x12, 0x63, 0x9f, 0x35, 0x65, 0x57, 0xcf,
	0x53, 0x41, 0x3c, 0xaf, 0xb3, 0x1f, 0x94, 0x0f, 0x8d, 0xa7, 0x37, 0x3a, 0x1e, 0xeb, 0xc6, 0xed,
	0xa6, 0x13, 0xf4, 0x37, 0xf2, 0x45, 0x9e, 0xef, 0x6c, 0xc8, 0x71, 0x70, 0x35, 0x72, 0x7b, 0x57,
	0x3b, 0xc1, 0xd5, 0xc1, 0xb5, 0xab, 0x61, 0xdc, 0x26, 0x9e, 0xf3, 0xb1, 0x94, 0xb7, 0x2b, 0x82,
	0xf1, 0xa3, 0xff, 0x04, 0x00, 0x00, 0xff, 0xff, 0x55, 0xe8, 0x6f, 0x2c, 0xb2, 0x18, 0x00, 0x00,
}

func (m *Router) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Router) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Cloud) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintCore(dAtA, i, uint64(len(m.Cloud)))
		i += copy(dAtA[i:], m.Cloud)
	}
	if len(m.Region) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintCore(dAtA, i, uint64(len(m.Region)))
		i += copy(dAtA[i:], m.Region)
	}
	if len(m.K8SCluster) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintCore(dAtA, i, uint64(len(m.K8SCluster)))
		i += copy(dAtA[i:], m.K8SCluster)
	}
	if len(m.Cluster) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintCore(dAtA, i, uint64(len(m.Cluster)))
		i += copy(dAtA[i:], m.Cluster)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *Secret) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Secret) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Secret != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintCore(dAtA, i, uint64(m.Secret.Size()))
		n1, err := m.Secret.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *APIKeys) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *APIKeys) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Keys) > 0 {
		for k, _ := range m.Keys {
			dAtA[i] = 0xa
			i++
			v := m.Keys[k]
			msgSize := 0
			if v != nil {
				msgSize = v.Size()
				msgSize += 1 + sovCore(uint64(msgSize))
			}
			mapSize := 1 + len(k) + sovCore(uint64(len(k))) + msgSize
			i = encodeVarintCore(dAtA, i, uint64(mapSize))
			dAtA[i] = 0xa
			i++
			i = encodeVarintCore(dAtA, i, uint64(len(k)))
			i += copy(dAtA[i:], k)
			if v != nil {
				dAtA[i] = 0x12
				i++
				i = encodeVarintCore(dAtA, i, uint64(v.Size()))
				n2, err := v.MarshalTo(dAtA[i:])
				if err != nil {
					return 0, err
				}
				i += n2
			}
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *APIKey) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *APIKey) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.SaslMechanism) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintCore(dAtA, i, uint64(len(m.SaslMechanism)))
		i += copy(dAtA[i:], m.SaslMechanism)
	}
	if len(m.HashedSecret) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintCore(dAtA, i, uint64(len(m.HashedSecret)))
		i += copy(dAtA[i:], m.HashedSecret)
	}
	if len(m.HashFunction) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintCore(dAtA, i, uint64(len(m.HashFunction)))
		i += copy(dAtA[i:], m.HashFunction)
	}
	if len(m.LogicalClusterId) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintCore(dAtA, i, uint64(len(m.LogicalClusterId)))
		i += copy(dAtA[i:], m.LogicalClusterId)
	}
	if len(m.UserId) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintCore(dAtA, i, uint64(len(m.UserId)))
		i += copy(dAtA[i:], m.UserId)
	}
	if m.ServiceAccount {
		dAtA[i] = 0x38
		i++
		if m.ServiceAccount {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *KafkaHealthcheckExternalKeys) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *KafkaHealthcheckExternalKeys) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.KafkaKey) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintCore(dAtA, i, uint64(len(m.KafkaKey)))
		i += copy(dAtA[i:], m.KafkaKey)
	}
	if len(m.KafkaSecret) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintCore(dAtA, i, uint64(len(m.KafkaSecret)))
		i += copy(dAtA[i:], m.KafkaSecret)
	}
	if len(m.DdApiKey) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintCore(dAtA, i, uint64(len(m.DdApiKey)))
		i += copy(dAtA[i:], m.DdApiKey)
	}
	if len(m.KafkaLinkKey) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintCore(dAtA, i, uint64(len(m.KafkaLinkKey)))
		i += copy(dAtA[i:], m.KafkaLinkKey)
	}
	if len(m.KafkaLinkSecret) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintCore(dAtA, i, uint64(len(m.KafkaLinkSecret)))
		i += copy(dAtA[i:], m.KafkaLinkSecret)
	}
	if len(m.KafkaRbacKey) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintCore(dAtA, i, uint64(len(m.KafkaRbacKey)))
		i += copy(dAtA[i:], m.KafkaRbacKey)
	}
	if len(m.KafkaRbacSecret) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintCore(dAtA, i, uint64(len(m.KafkaRbacSecret)))
		i += copy(dAtA[i:], m.KafkaRbacSecret)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *KSQLHealthcheckExternalKeys) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *KSQLHealthcheckExternalKeys) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.DdApiKey) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintCore(dAtA, i, uint64(len(m.DdApiKey)))
		i += copy(dAtA[i:], m.DdApiKey)
	}
	if len(m.KsqlKey) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintCore(dAtA, i, uint64(len(m.KsqlKey)))
		i += copy(dAtA[i:], m.KsqlKey)
	}
	if len(m.KsqlSecret) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintCore(dAtA, i, uint64(len(m.KsqlSecret)))
		i += copy(dAtA[i:], m.KsqlSecret)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *TieredStorage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TieredStorage) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Backend) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintCore(dAtA, i, uint64(len(m.Backend)))
		i += copy(dAtA[i:], m.Backend)
	}
	if len(m.Bucket) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintCore(dAtA, i, uint64(len(m.Bucket)))
		i += copy(dAtA[i:], m.Bucket)
	}
	if len(m.Region) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintCore(dAtA, i, uint64(len(m.Region)))
		i += copy(dAtA[i:], m.Region)
	}
	if m.TierAllTopics {
		dAtA[i] = 0x20
		i++
		if m.TierAllTopics {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.Role) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintCore(dAtA, i, uint64(len(m.Role)))
		i += copy(dAtA[i:], m.Role)
	}
	if len(m.EncryptionKeyId) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintCore(dAtA, i, uint64(len(m.EncryptionKeyId)))
		i += copy(dAtA[i:], m.EncryptionKeyId)
	}
	if m.LocalHotsetMs != nil {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintCore(dAtA, i, uint64(m.LocalHotsetMs.Size()))
		n3, err := m.LocalHotsetMs.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	if len(m.Endpoint) > 0 {
		dAtA[i] = 0x42
		i++
		i = encodeVarintCore(dAtA, i, uint64(len(m.Endpoint)))
		i += copy(dAtA[i:], m.Endpoint)
	}
	if len(m.ServiceAccountSecret) > 0 {
		dAtA[i] = 0x52
		i++
		i = encodeVarintCore(dAtA, i, uint64(len(m.ServiceAccountSecret)))
		i += copy(dAtA[i:], m.ServiceAccountSecret)
	}
	if len(m.ServiceAccountId) > 0 {
		dAtA[i] = 0x5a
		i++
		i = encodeVarintCore(dAtA, i, uint64(len(m.ServiceAccountId)))
		i += copy(dAtA[i:], m.ServiceAccountId)
	}
	if len(m.DeploymentId) > 0 {
		dAtA[i] = 0x62
		i++
		i = encodeVarintCore(dAtA, i, uint64(len(m.DeploymentId)))
		i += copy(dAtA[i:], m.DeploymentId)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ReadinessHealthCheckRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReadinessHealthCheckRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.RequestCarrier) > 0 {
		for k, _ := range m.RequestCarrier {
			dAtA[i] = 0xa
			i++
			v := m.RequestCarrier[k]
			mapSize := 1 + len(k) + sovCore(uint64(len(k))) + 1 + len(v) + sovCore(uint64(len(v)))
			i = encodeVarintCore(dAtA, i, uint64(mapSize))
			dAtA[i] = 0xa
			i++
			i = encodeVarintCore(dAtA, i, uint64(len(k)))
			i += copy(dAtA[i:], k)
			dAtA[i] = 0x12
			i++
			i = encodeVarintCore(dAtA, i, uint64(len(v)))
			i += copy(dAtA[i:], v)
		}
	}
	if m.Error != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintCore(dAtA, i, uint64(m.Error.Size()))
		n4, err := m.Error.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ReadinessHealthCheckReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReadinessHealthCheckReply) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Error != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintCore(dAtA, i, uint64(m.Error.Size()))
		n5, err := m.Error.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	if len(m.Message) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintCore(dAtA, i, uint64(len(m.Message)))
		i += copy(dAtA[i:], m.Message)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *Credentials) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Credentials) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Username) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintCore(dAtA, i, uint64(len(m.Username)))
		i += copy(dAtA[i:], m.Username)
	}
	if len(m.Password) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintCore(dAtA, i, uint64(len(m.Password)))
		i += copy(dAtA[i:], m.Password)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *MarketplaceCreds) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MarketplaceCreds) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Token) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintCore(dAtA, i, uint64(len(m.Token)))
		i += copy(dAtA[i:], m.Token)
	}
	if m.Partner != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintCore(dAtA, i, uint64(m.Partner))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *DataBalancerConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DataBalancerConfig) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ReplicationThrottleBytesPerSec != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintCore(dAtA, i, uint64(m.ReplicationThrottleBytesPerSec.Size()))
		n6, err := m.ReplicationThrottleBytesPerSec.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n6
	}
	if m.SelfHealingGoalViolationEnabled != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintCore(dAtA, i, uint64(m.SelfHealingGoalViolationEnabled.Size()))
		n7, err := m.SelfHealingGoalViolationEnabled.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n7
	}
	if m.MaxVolumeThroughputMbPerSec != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintCore(dAtA, i, uint64(m.MaxVolumeThroughputMbPerSec.Size()))
		n8, err := m.MaxVolumeThroughputMbPerSec.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n8
	}
	if m.WriteThroughputMultiplier != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintCore(dAtA, i, uint64(m.WriteThroughputMultiplier.Size()))
		n9, err := m.WriteThroughputMultiplier.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n9
	}
	if m.ReadThroughputMultiplier != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintCore(dAtA, i, uint64(m.ReadThroughputMultiplier.Size()))
		n10, err := m.ReadThroughputMultiplier.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n10
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *FeatureFlagValue) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FeatureFlagValue) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.FlagValue != nil {
		nn11, err := m.FlagValue.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn11
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *FeatureFlagValue_IntVal) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	dAtA[i] = 0x8
	i++
	i = encodeVarintCore(dAtA, i, uint64(m.IntVal))
	return i, nil
}
func (m *FeatureFlagValue_BoolVal) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	dAtA[i] = 0x10
	i++
	if m.BoolVal {
		dAtA[i] = 1
	} else {
		dAtA[i] = 0
	}
	i++
	return i, nil
}
func (m *FeatureFlagValue_StringVal) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	dAtA[i] = 0x1a
	i++
	i = encodeVarintCore(dAtA, i, uint64(len(m.StringVal)))
	i += copy(dAtA[i:], m.StringVal)
	return i, nil
}
func encodeVarintCore(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *Router) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Cloud)
	if l > 0 {
		n += 1 + l + sovCore(uint64(l))
	}
	l = len(m.Region)
	if l > 0 {
		n += 1 + l + sovCore(uint64(l))
	}
	l = len(m.K8SCluster)
	if l > 0 {
		n += 1 + l + sovCore(uint64(l))
	}
	l = len(m.Cluster)
	if l > 0 {
		n += 1 + l + sovCore(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Secret) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Secret != nil {
		l = m.Secret.Size()
		n += 1 + l + sovCore(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *APIKeys) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Keys) > 0 {
		for k, v := range m.Keys {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovCore(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovCore(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovCore(uint64(mapEntrySize))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *APIKey) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.SaslMechanism)
	if l > 0 {
		n += 1 + l + sovCore(uint64(l))
	}
	l = len(m.HashedSecret)
	if l > 0 {
		n += 1 + l + sovCore(uint64(l))
	}
	l = len(m.HashFunction)
	if l > 0 {
		n += 1 + l + sovCore(uint64(l))
	}
	l = len(m.LogicalClusterId)
	if l > 0 {
		n += 1 + l + sovCore(uint64(l))
	}
	l = len(m.UserId)
	if l > 0 {
		n += 1 + l + sovCore(uint64(l))
	}
	if m.ServiceAccount {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *KafkaHealthcheckExternalKeys) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.KafkaKey)
	if l > 0 {
		n += 1 + l + sovCore(uint64(l))
	}
	l = len(m.KafkaSecret)
	if l > 0 {
		n += 1 + l + sovCore(uint64(l))
	}
	l = len(m.DdApiKey)
	if l > 0 {
		n += 1 + l + sovCore(uint64(l))
	}
	l = len(m.KafkaLinkKey)
	if l > 0 {
		n += 1 + l + sovCore(uint64(l))
	}
	l = len(m.KafkaLinkSecret)
	if l > 0 {
		n += 1 + l + sovCore(uint64(l))
	}
	l = len(m.KafkaRbacKey)
	if l > 0 {
		n += 1 + l + sovCore(uint64(l))
	}
	l = len(m.KafkaRbacSecret)
	if l > 0 {
		n += 1 + l + sovCore(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *KSQLHealthcheckExternalKeys) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.DdApiKey)
	if l > 0 {
		n += 1 + l + sovCore(uint64(l))
	}
	l = len(m.KsqlKey)
	if l > 0 {
		n += 1 + l + sovCore(uint64(l))
	}
	l = len(m.KsqlSecret)
	if l > 0 {
		n += 1 + l + sovCore(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TieredStorage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Backend)
	if l > 0 {
		n += 1 + l + sovCore(uint64(l))
	}
	l = len(m.Bucket)
	if l > 0 {
		n += 1 + l + sovCore(uint64(l))
	}
	l = len(m.Region)
	if l > 0 {
		n += 1 + l + sovCore(uint64(l))
	}
	if m.TierAllTopics {
		n += 2
	}
	l = len(m.Role)
	if l > 0 {
		n += 1 + l + sovCore(uint64(l))
	}
	l = len(m.EncryptionKeyId)
	if l > 0 {
		n += 1 + l + sovCore(uint64(l))
	}
	if m.LocalHotsetMs != nil {
		l = m.LocalHotsetMs.Size()
		n += 1 + l + sovCore(uint64(l))
	}
	l = len(m.Endpoint)
	if l > 0 {
		n += 1 + l + sovCore(uint64(l))
	}
	l = len(m.ServiceAccountSecret)
	if l > 0 {
		n += 1 + l + sovCore(uint64(l))
	}
	l = len(m.ServiceAccountId)
	if l > 0 {
		n += 1 + l + sovCore(uint64(l))
	}
	l = len(m.DeploymentId)
	if l > 0 {
		n += 1 + l + sovCore(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ReadinessHealthCheckRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.RequestCarrier) > 0 {
		for k, v := range m.RequestCarrier {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovCore(uint64(len(k))) + 1 + len(v) + sovCore(uint64(len(v)))
			n += mapEntrySize + 1 + sovCore(uint64(mapEntrySize))
		}
	}
	if m.Error != nil {
		l = m.Error.Size()
		n += 1 + l + sovCore(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ReadinessHealthCheckReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Error != nil {
		l = m.Error.Size()
		n += 1 + l + sovCore(uint64(l))
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovCore(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Credentials) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Username)
	if l > 0 {
		n += 1 + l + sovCore(uint64(l))
	}
	l = len(m.Password)
	if l > 0 {
		n += 1 + l + sovCore(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *MarketplaceCreds) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Token)
	if l > 0 {
		n += 1 + l + sovCore(uint64(l))
	}
	if m.Partner != 0 {
		n += 1 + sovCore(uint64(m.Partner))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DataBalancerConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ReplicationThrottleBytesPerSec != nil {
		l = m.ReplicationThrottleBytesPerSec.Size()
		n += 1 + l + sovCore(uint64(l))
	}
	if m.SelfHealingGoalViolationEnabled != nil {
		l = m.SelfHealingGoalViolationEnabled.Size()
		n += 1 + l + sovCore(uint64(l))
	}
	if m.MaxVolumeThroughputMbPerSec != nil {
		l = m.MaxVolumeThroughputMbPerSec.Size()
		n += 1 + l + sovCore(uint64(l))
	}
	if m.WriteThroughputMultiplier != nil {
		l = m.WriteThroughputMultiplier.Size()
		n += 1 + l + sovCore(uint64(l))
	}
	if m.ReadThroughputMultiplier != nil {
		l = m.ReadThroughputMultiplier.Size()
		n += 1 + l + sovCore(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *FeatureFlagValue) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.FlagValue != nil {
		n += m.FlagValue.Size()
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *FeatureFlagValue_IntVal) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovCore(uint64(m.IntVal))
	return n
}
func (m *FeatureFlagValue_BoolVal) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 2
	return n
}
func (m *FeatureFlagValue_StringVal) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.StringVal)
	n += 1 + l + sovCore(uint64(l))
	return n
}

func sovCore(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozCore(x uint64) (n int) {
	return sovCore(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Router) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCore
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Router: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Router: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cloud", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCore
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCore
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Cloud = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Region", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCore
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCore
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Region = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field K8SCluster", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCore
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCore
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.K8SCluster = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cluster", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCore
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCore
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Cluster = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCore(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCore
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCore
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Secret) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCore
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Secret: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Secret: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Secret", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCore
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCore
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Secret == nil {
				m.Secret = &v1.Secret{}
			}
			if err := m.Secret.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCore(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCore
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCore
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *APIKeys) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCore
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: APIKeys: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: APIKeys: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Keys", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCore
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCore
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Keys == nil {
				m.Keys = make(map[string]*APIKey)
			}
			var mapkey string
			var mapvalue *APIKey
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCore
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCore
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthCore
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthCore
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCore
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthCore
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthCore
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &APIKey{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipCore(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthCore
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Keys[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCore(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCore
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCore
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *APIKey) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCore
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: APIKey: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: APIKey: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SaslMechanism", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCore
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCore
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SaslMechanism = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HashedSecret", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCore
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCore
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HashedSecret = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HashFunction", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCore
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCore
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HashFunction = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LogicalClusterId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCore
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCore
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LogicalClusterId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCore
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCore
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServiceAccount", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ServiceAccount = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipCore(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCore
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCore
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *KafkaHealthcheckExternalKeys) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCore
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: KafkaHealthcheckExternalKeys: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: KafkaHealthcheckExternalKeys: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KafkaKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCore
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCore
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.KafkaKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KafkaSecret", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCore
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCore
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.KafkaSecret = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DdApiKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCore
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCore
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DdApiKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KafkaLinkKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCore
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCore
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.KafkaLinkKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KafkaLinkSecret", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCore
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCore
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.KafkaLinkSecret = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KafkaRbacKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCore
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCore
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.KafkaRbacKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KafkaRbacSecret", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCore
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCore
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.KafkaRbacSecret = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCore(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCore
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCore
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *KSQLHealthcheckExternalKeys) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCore
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: KSQLHealthcheckExternalKeys: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: KSQLHealthcheckExternalKeys: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DdApiKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCore
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCore
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DdApiKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KsqlKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCore
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCore
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.KsqlKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KsqlSecret", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCore
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCore
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.KsqlSecret = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCore(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCore
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCore
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TieredStorage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCore
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TieredStorage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TieredStorage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Backend", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCore
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCore
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Backend = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bucket", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCore
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCore
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Bucket = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Region", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCore
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCore
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Region = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TierAllTopics", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.TierAllTopics = bool(v != 0)
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Role", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCore
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCore
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Role = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EncryptionKeyId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCore
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCore
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EncryptionKeyId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LocalHotsetMs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCore
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCore
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LocalHotsetMs == nil {
				m.LocalHotsetMs = &types.Int64Value{}
			}
			if err := m.LocalHotsetMs.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Endpoint", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCore
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCore
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Endpoint = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServiceAccountSecret", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthCore
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthCore
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ServiceAccountSecret = append(m.ServiceAccountSecret[:0], dAtA[iNdEx:postIndex]...)
			if m.ServiceAccountSecret == nil {
				m.ServiceAccountSecret = []byte{}
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServiceAccountId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCore
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCore
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ServiceAccountId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeploymentId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCore
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCore
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DeploymentId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCore(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCore
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCore
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReadinessHealthCheckRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCore
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReadinessHealthCheckRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReadinessHealthCheckRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestCarrier", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCore
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCore
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RequestCarrier == nil {
				m.RequestCarrier = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCore
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCore
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthCore
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthCore
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCore
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthCore
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthCore
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipCore(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthCore
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.RequestCarrier[mapkey] = mapvalue
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCore
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCore
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Error == nil {
				m.Error = &Error{}
			}
			if err := m.Error.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCore(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCore
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCore
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReadinessHealthCheckReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCore
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReadinessHealthCheckReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReadinessHealthCheckReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCore
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCore
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Error == nil {
				m.Error = &Error{}
			}
			if err := m.Error.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCore
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCore
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCore(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCore
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCore
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Credentials) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCore
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Credentials: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Credentials: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Username", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCore
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCore
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Username = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Password", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCore
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCore
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Password = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCore(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCore
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCore
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MarketplaceCreds) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCore
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MarketplaceCreds: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MarketplaceCreds: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCore
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCore
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Token = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Partner", wireType)
			}
			m.Partner = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Partner |= MarketplacePartner(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCore(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCore
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCore
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DataBalancerConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCore
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DataBalancerConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DataBalancerConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReplicationThrottleBytesPerSec", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCore
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCore
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ReplicationThrottleBytesPerSec == nil {
				m.ReplicationThrottleBytesPerSec = &types.Int64Value{}
			}
			if err := m.ReplicationThrottleBytesPerSec.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SelfHealingGoalViolationEnabled", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCore
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCore
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SelfHealingGoalViolationEnabled == nil {
				m.SelfHealingGoalViolationEnabled = &types.BoolValue{}
			}
			if err := m.SelfHealingGoalViolationEnabled.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxVolumeThroughputMbPerSec", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCore
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCore
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.MaxVolumeThroughputMbPerSec == nil {
				m.MaxVolumeThroughputMbPerSec = &types.Int32Value{}
			}
			if err := m.MaxVolumeThroughputMbPerSec.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WriteThroughputMultiplier", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCore
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCore
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.WriteThroughputMultiplier == nil {
				m.WriteThroughputMultiplier = &types.DoubleValue{}
			}
			if err := m.WriteThroughputMultiplier.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReadThroughputMultiplier", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCore
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCore
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ReadThroughputMultiplier == nil {
				m.ReadThroughputMultiplier = &types.DoubleValue{}
			}
			if err := m.ReadThroughputMultiplier.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCore(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCore
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCore
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FeatureFlagValue) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCore
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FeatureFlagValue: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FeatureFlagValue: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IntVal", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.FlagValue = &FeatureFlagValue_IntVal{v}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BoolVal", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.FlagValue = &FeatureFlagValue_BoolVal{b}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StringVal", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCore
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCore
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCore
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FlagValue = &FeatureFlagValue_StringVal{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCore(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCore
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCore
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipCore(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowCore
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCore
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCore
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthCore
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthCore
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowCore
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipCore(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthCore
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthCore = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowCore   = fmt.Errorf("proto: integer overflow")
)
