// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: org/org.proto

package ccloud

import (
	encoding_binary "encoding/binary"
	fmt "fmt"
	_ "github.com/confluentinc/proto-go-setter"
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	types "github.com/gogo/protobuf/types"
	_ "github.com/travisjeffery/proto-go-sql"
	io "io"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type SsoMode int32

const (
	SsoMode_SSO_MODE_UNKNOWN    SsoMode = 0
	SsoMode_SSO_MODE_RESTRICTED SsoMode = 1
	SsoMode_SSO_MODE_LAX        SsoMode = 2
)

var SsoMode_name = map[int32]string{
	0: "SSO_MODE_UNKNOWN",
	1: "SSO_MODE_RESTRICTED",
	2: "SSO_MODE_LAX",
}

var SsoMode_value = map[string]int32{
	"SSO_MODE_UNKNOWN":    0,
	"SSO_MODE_RESTRICTED": 1,
	"SSO_MODE_LAX":        2,
}

func (x SsoMode) String() string {
	return proto.EnumName(SsoMode_name, int32(x))
}

func (SsoMode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_bff3a4753709c6f2, []int{0}
}

type AuthType int32

const (
	AuthType_AUTH_TYPE_UNKNOWN AuthType = 0
	AuthType_AUTH_TYPE_LOCAL   AuthType = 1
	AuthType_AUTH_TYPE_SSO     AuthType = 2
)

var AuthType_name = map[int32]string{
	0: "AUTH_TYPE_UNKNOWN",
	1: "AUTH_TYPE_LOCAL",
	2: "AUTH_TYPE_SSO",
}

var AuthType_value = map[string]int32{
	"AUTH_TYPE_UNKNOWN": 0,
	"AUTH_TYPE_LOCAL":   1,
	"AUTH_TYPE_SSO":     2,
}

func (x AuthType) String() string {
	return proto.EnumName(AuthType_name, int32(x))
}

func (AuthType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_bff3a4753709c6f2, []int{1}
}

type BillingMethod int32

const (
	BillingMethod_STRIPE      BillingMethod = 0
	BillingMethod_MANUAL      BillingMethod = 1
	BillingMethod_GCP         BillingMethod = 2
	BillingMethod_SKIP        BillingMethod = 3
	BillingMethod_MARKETPLACE BillingMethod = 4
	BillingMethod_NONE        BillingMethod = 5
)

var BillingMethod_name = map[int32]string{
	0: "STRIPE",
	1: "MANUAL",
	2: "GCP",
	3: "SKIP",
	4: "MARKETPLACE",
	5: "NONE",
}

var BillingMethod_value = map[string]int32{
	"STRIPE":      0,
	"MANUAL":      1,
	"GCP":         2,
	"SKIP":        3,
	"MARKETPLACE": 4,
	"NONE":        5,
}

func (x BillingMethod) String() string {
	return proto.EnumName(BillingMethod_name, int32(x))
}

func (BillingMethod) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_bff3a4753709c6f2, []int{2}
}

type BillingInterval int32

const (
	BillingInterval_MONTHLY  BillingInterval = 0
	BillingInterval_ANNUALLY BillingInterval = 1
)

var BillingInterval_name = map[int32]string{
	0: "MONTHLY",
	1: "ANNUALLY",
}

var BillingInterval_value = map[string]int32{
	"MONTHLY":  0,
	"ANNUALLY": 1,
}

func (x BillingInterval) String() string {
	return proto.EnumName(BillingInterval_name, int32(x))
}

func (BillingInterval) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_bff3a4753709c6f2, []int{3}
}

type ProductLevel int32

const (
	ProductLevel_DEVELOPER  ProductLevel = 0
	ProductLevel_TEAM       ProductLevel = 1
	ProductLevel_ENTERPRISE ProductLevel = 2
	ProductLevel_UNIFIED    ProductLevel = 3
)

var ProductLevel_name = map[int32]string{
	0: "DEVELOPER",
	1: "TEAM",
	2: "ENTERPRISE",
	3: "UNIFIED",
}

var ProductLevel_value = map[string]int32{
	"DEVELOPER":  0,
	"TEAM":       1,
	"ENTERPRISE": 2,
	"UNIFIED":    3,
}

func (x ProductLevel) String() string {
	return proto.EnumName(ProductLevel_name, int32(x))
}

func (ProductLevel) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_bff3a4753709c6f2, []int{4}
}

type SuspensionStatusType int32

const (
	SuspensionStatusType_SUSPENSION_UNKNOWN       SuspensionStatusType = 0
	SuspensionStatusType_SUSPENSION_IN_PROGRESS   SuspensionStatusType = 1
	SuspensionStatusType_SUSPENSION_COMPLETED     SuspensionStatusType = 2
	SuspensionStatusType_UNSUSPENSION_IN_PROGRESS SuspensionStatusType = 3
	SuspensionStatusType_SUSPENSION_FAILED        SuspensionStatusType = 4
	SuspensionStatusType_UNSUSPENSION_FAILED      SuspensionStatusType = 5
)

var SuspensionStatusType_name = map[int32]string{
	0: "SUSPENSION_UNKNOWN",
	1: "SUSPENSION_IN_PROGRESS",
	2: "SUSPENSION_COMPLETED",
	3: "UNSUSPENSION_IN_PROGRESS",
	4: "SUSPENSION_FAILED",
	5: "UNSUSPENSION_FAILED",
}

var SuspensionStatusType_value = map[string]int32{
	"SUSPENSION_UNKNOWN":       0,
	"SUSPENSION_IN_PROGRESS":   1,
	"SUSPENSION_COMPLETED":     2,
	"UNSUSPENSION_IN_PROGRESS": 3,
	"SUSPENSION_FAILED":        4,
	"UNSUSPENSION_FAILED":      5,
}

func (x SuspensionStatusType) String() string {
	return proto.EnumName(SuspensionStatusType_name, int32(x))
}

func (SuspensionStatusType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_bff3a4753709c6f2, []int{5}
}

type MarketplaceSubscription int32

const (
	MarketplaceSubscription_SUBSCRIPTION_NONE    MarketplaceSubscription = 0
	MarketplaceSubscription_SUBSCRIPTION_PENDING MarketplaceSubscription = 1
	MarketplaceSubscription_SUBSCRIPTION_ACTIVE  MarketplaceSubscription = 2
)

var MarketplaceSubscription_name = map[int32]string{
	0: "SUBSCRIPTION_NONE",
	1: "SUBSCRIPTION_PENDING",
	2: "SUBSCRIPTION_ACTIVE",
}

var MarketplaceSubscription_value = map[string]int32{
	"SUBSCRIPTION_NONE":    0,
	"SUBSCRIPTION_PENDING": 1,
	"SUBSCRIPTION_ACTIVE":  2,
}

func (x MarketplaceSubscription) String() string {
	return proto.EnumName(MarketplaceSubscription_name, int32(x))
}

func (MarketplaceSubscription) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_bff3a4753709c6f2, []int{6}
}

type SuspensionEventType int32

const (
	SuspensionEventType_SUSPENSION_EVENT_UNKNOWN                              SuspensionEventType = 0
	SuspensionEventType_SUSPENSION_EVENT_END_OF_FREE_TRIAL                    SuspensionEventType = 1
	SuspensionEventType_SUSPENSION_EVENT_CUSTOMER_INITIATED_ORG_DEACTIVATION  SuspensionEventType = 2
	SuspensionEventType_SUSPENSION_EVENT_MARKETPLACE_ENTITLEMENT_CANCELLATION SuspensionEventType = 3
	SuspensionEventType_SUSPENSION_EVENT_NO_PAYMENT                           SuspensionEventType = 4
	SuspensionEventType_SUSPENSION_EVENT_SECURITY_INCIDENT_OR_ABUSE           SuspensionEventType = 5
	SuspensionEventType_SUSPENSION_EVENT_OTHERS                               SuspensionEventType = 6
	SuspensionEventType_SUSPENSION_EVENT_INTERNAL_INITIATED_ORG_DEACTIVATION  SuspensionEventType = 7
)

var SuspensionEventType_name = map[int32]string{
	0: "SUSPENSION_EVENT_UNKNOWN",
	1: "SUSPENSION_EVENT_END_OF_FREE_TRIAL",
	2: "SUSPENSION_EVENT_CUSTOMER_INITIATED_ORG_DEACTIVATION",
	3: "SUSPENSION_EVENT_MARKETPLACE_ENTITLEMENT_CANCELLATION",
	4: "SUSPENSION_EVENT_NO_PAYMENT",
	5: "SUSPENSION_EVENT_SECURITY_INCIDENT_OR_ABUSE",
	6: "SUSPENSION_EVENT_OTHERS",
	7: "SUSPENSION_EVENT_INTERNAL_INITIATED_ORG_DEACTIVATION",
}

var SuspensionEventType_value = map[string]int32{
	"SUSPENSION_EVENT_UNKNOWN":                              0,
	"SUSPENSION_EVENT_END_OF_FREE_TRIAL":                    1,
	"SUSPENSION_EVENT_CUSTOMER_INITIATED_ORG_DEACTIVATION":  2,
	"SUSPENSION_EVENT_MARKETPLACE_ENTITLEMENT_CANCELLATION": 3,
	"SUSPENSION_EVENT_NO_PAYMENT":                           4,
	"SUSPENSION_EVENT_SECURITY_INCIDENT_OR_ABUSE":           5,
	"SUSPENSION_EVENT_OTHERS":                               6,
	"SUSPENSION_EVENT_INTERNAL_INITIATED_ORG_DEACTIVATION":  7,
}

func (x SuspensionEventType) String() string {
	return proto.EnumName(SuspensionEventType_name, int32(x))
}

func (SuspensionEventType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_bff3a4753709c6f2, []int{7}
}

type MarketplaceCustomerState int32

const (
	MarketplaceCustomerState_CUSTOMER_APPROVAL_PENDING MarketplaceCustomerState = 0
	MarketplaceCustomerState_CUSTOMER_APPROVAL_SENT    MarketplaceCustomerState = 1
	MarketplaceCustomerState_CUSTOMER_APPROVED         MarketplaceCustomerState = 2
	MarketplaceCustomerState_CUSTOMER_DELETED          MarketplaceCustomerState = 3
)

var MarketplaceCustomerState_name = map[int32]string{
	0: "CUSTOMER_APPROVAL_PENDING",
	1: "CUSTOMER_APPROVAL_SENT",
	2: "CUSTOMER_APPROVED",
	3: "CUSTOMER_DELETED",
}

var MarketplaceCustomerState_value = map[string]int32{
	"CUSTOMER_APPROVAL_PENDING": 0,
	"CUSTOMER_APPROVAL_SENT":    1,
	"CUSTOMER_APPROVED":         2,
	"CUSTOMER_DELETED":          3,
}

func (x MarketplaceCustomerState) String() string {
	return proto.EnumName(MarketplaceCustomerState_name, int32(x))
}

func (MarketplaceCustomerState) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_bff3a4753709c6f2, []int{8}
}

type PageInfo struct {
	PageSize             int32    `protobuf:"varint,1,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty" db:"page_size,omitempty" url:"page_size,omitempty"`
	PageToken            string   `protobuf:"bytes,2,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty" db:"page_token,omitempty" url:"page_token,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PageInfo) Reset()         { *m = PageInfo{} }
func (m *PageInfo) String() string { return proto.CompactTextString(m) }
func (*PageInfo) ProtoMessage()    {}
func (*PageInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_bff3a4753709c6f2, []int{0}
}
func (m *PageInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PageInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PageInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PageInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PageInfo.Merge(m, src)
}
func (m *PageInfo) XXX_Size() int {
	return m.Size()
}
func (m *PageInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_PageInfo.DiscardUnknown(m)
}

var xxx_messageInfo_PageInfo proto.InternalMessageInfo

func (m *PageInfo) GetPageSize() int32 {
	if m != nil {
		return m.PageSize
	}
	return 0
}

func (m *PageInfo) GetPageToken() string {
	if m != nil {
		return m.PageToken
	}
	return ""
}

// representation of SSO configs on the DB records themselves
type Sso struct {
	Enabled              bool     `protobuf:"varint,1,opt,name=enabled,proto3" json:"enabled,omitempty" db:"enabled,omitempty" url:"enabled,omitempty"`
	Auth0ConnectionName  string   `protobuf:"bytes,2,opt,name=auth0_connection_name,json=auth0ConnectionName,proto3" json:"auth0_connection_name,omitempty" db:"auth0_connection_name,omitempty" url:"auth0_connection_name,omitempty"`
	TenantId             string   `protobuf:"bytes,3,opt,name=tenant_id,json=tenantId,proto3" json:"tenant_id,omitempty" db:"tenant_id,omitempty" url:"tenant_id,omitempty"`
	MultiTenant          bool     `protobuf:"varint,4,opt,name=multi_tenant,json=multiTenant,proto3" json:"multi_tenant,omitempty" db:"multi_tenant,omitempty" url:"multi_tenant,omitempty"`
	Mode                 SsoMode  `protobuf:"varint,7,opt,name=mode,proto3,enum=ccloud.org.SsoMode" json:"mode,omitempty" db:"mode,omitempty" url:"mode,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Sso) Reset()         { *m = Sso{} }
func (m *Sso) String() string { return proto.CompactTextString(m) }
func (*Sso) ProtoMessage()    {}
func (*Sso) Descriptor() ([]byte, []int) {
	return fileDescriptor_bff3a4753709c6f2, []int{1}
}
func (m *Sso) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Sso) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Sso.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Sso) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Sso.Merge(m, src)
}
func (m *Sso) XXX_Size() int {
	return m.Size()
}
func (m *Sso) XXX_DiscardUnknown() {
	xxx_messageInfo_Sso.DiscardUnknown(m)
}

var xxx_messageInfo_Sso proto.InternalMessageInfo

func (m *Sso) GetEnabled() bool {
	if m != nil {
		return m.Enabled
	}
	return false
}

func (m *Sso) GetAuth0ConnectionName() string {
	if m != nil {
		return m.Auth0ConnectionName
	}
	return ""
}

func (m *Sso) GetTenantId() string {
	if m != nil {
		return m.TenantId
	}
	return ""
}

func (m *Sso) GetMultiTenant() bool {
	if m != nil {
		return m.MultiTenant
	}
	return false
}

func (m *Sso) GetMode() SsoMode {
	if m != nil {
		return m.Mode
	}
	return SsoMode_SSO_MODE_UNKNOWN
}

type User struct {
	Id                   int32             `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty" url:"id" db:"id,omitempty"`
	Email                string            `protobuf:"bytes,2,opt,name=email,proto3" json:"email,omitempty" url:"email" db:"email,omitempty"`
	FirstName            string            `protobuf:"bytes,3,opt,name=first_name,json=firstName,proto3" json:"first_name,omitempty" url:"first_name" db:"first_name,omitempty"`
	LastName             string            `protobuf:"bytes,4,opt,name=last_name,json=lastName,proto3" json:"last_name,omitempty" url:"last_name" db:"last_name,omitempty"`
	Deactivated          bool              `protobuf:"varint,7,opt,name=deactivated,proto3" json:"deactivated,omitempty" db:"deactivated,omitempty" url:"deactivated,omitempty"`
	Verified             *types.Timestamp  `protobuf:"bytes,11,opt,name=verified,proto3" json:"verified,omitempty" db:"verified,omitempty" url:"verified,omitempty"`
	Created              *types.Timestamp  `protobuf:"bytes,8,opt,name=created,proto3" json:"created,omitempty" db:"created,omitempty" url:"created,omitempty"`
	Modified             *types.Timestamp  `protobuf:"bytes,9,opt,name=modified,proto3" json:"modified,omitempty" db:"modified,omitempty" url:"modified,omitempty"`
	ServiceName          string            `protobuf:"bytes,12,opt,name=service_name,json=serviceName,proto3" json:"service_name,omitempty" db:"service_name,omitempty" url:"service_name,omitempty"`
	ServiceDescription   string            `protobuf:"bytes,13,opt,name=service_description,json=serviceDescription,proto3" json:"service_description,omitempty" db:"service_description,omitempty" url:"service_description,omitempty"`
	ServiceAccount       bool              `protobuf:"varint,14,opt,name=service_account,json=serviceAccount,proto3" json:"service_account,omitempty" db:"service_account,omitempty" url:"service_account,omitempty"`
	Preferences          map[string]string `protobuf:"bytes,16,rep,name=preferences,proto3" json:"preferences,omitempty" db:"preferences,omitempty" url:"preferences,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Internal             bool              `protobuf:"varint,17,opt,name=internal,proto3" json:"internal,omitempty" db:"internal,omitempty" url:"internal,omitempty"`
	ResourceId           string            `protobuf:"bytes,18,opt,name=resource_id,json=resourceId,proto3" json:"resource_id,omitempty" db:"resource_id,omitempty" url:"resource_id,omitempty"`
	DeactivatedAt        *types.Timestamp  `protobuf:"bytes,19,opt,name=deactivated_at,json=deactivatedAt,proto3" json:"deactivated_at,omitempty" db:"deactivated_at,omitempty" url:"deactivated_at,omitempty"`
	SocialConnection     string            `protobuf:"bytes,20,opt,name=social_connection,json=socialConnection,proto3" json:"social_connection,omitempty" db:"social_connection,omitempty" url:"social_connection,omitempty"`
	AuthType             AuthType          `protobuf:"varint,21,opt,name=auth_type,json=authType,proto3,enum=ccloud.org.AuthType" json:"auth_type,omitempty" db:"auth_type,omitempty" url:"auth_type,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *User) Reset()         { *m = User{} }
func (m *User) String() string { return proto.CompactTextString(m) }
func (*User) ProtoMessage()    {}
func (*User) Descriptor() ([]byte, []int) {
	return fileDescriptor_bff3a4753709c6f2, []int{2}
}
func (m *User) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *User) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_User.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *User) XXX_Merge(src proto.Message) {
	xxx_messageInfo_User.Merge(m, src)
}
func (m *User) XXX_Size() int {
	return m.Size()
}
func (m *User) XXX_DiscardUnknown() {
	xxx_messageInfo_User.DiscardUnknown(m)
}

var xxx_messageInfo_User proto.InternalMessageInfo

func (m *User) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *User) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

func (m *User) GetFirstName() string {
	if m != nil {
		return m.FirstName
	}
	return ""
}

func (m *User) GetLastName() string {
	if m != nil {
		return m.LastName
	}
	return ""
}

func (m *User) GetDeactivated() bool {
	if m != nil {
		return m.Deactivated
	}
	return false
}

func (m *User) GetVerified() *types.Timestamp {
	if m != nil {
		return m.Verified
	}
	return nil
}

func (m *User) GetCreated() *types.Timestamp {
	if m != nil {
		return m.Created
	}
	return nil
}

func (m *User) GetModified() *types.Timestamp {
	if m != nil {
		return m.Modified
	}
	return nil
}

func (m *User) GetServiceName() string {
	if m != nil {
		return m.ServiceName
	}
	return ""
}

func (m *User) GetServiceDescription() string {
	if m != nil {
		return m.ServiceDescription
	}
	return ""
}

func (m *User) GetServiceAccount() bool {
	if m != nil {
		return m.ServiceAccount
	}
	return false
}

func (m *User) GetPreferences() map[string]string {
	if m != nil {
		return m.Preferences
	}
	return nil
}

func (m *User) GetInternal() bool {
	if m != nil {
		return m.Internal
	}
	return false
}

func (m *User) GetResourceId() string {
	if m != nil {
		return m.ResourceId
	}
	return ""
}

func (m *User) GetDeactivatedAt() *types.Timestamp {
	if m != nil {
		return m.DeactivatedAt
	}
	return nil
}

func (m *User) GetSocialConnection() string {
	if m != nil {
		return m.SocialConnection
	}
	return ""
}

func (m *User) GetAuthType() AuthType {
	if m != nil {
		return m.AuthType
	}
	return AuthType_AUTH_TYPE_UNKNOWN
}

type Account struct {
	Id                   string           `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty" db:"id,omitempty" url:"id,omitempty"`
	Name                 string           `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty" db:"name,omitempty" url:"name,omitempty"`
	OrganizationId       int32            `protobuf:"varint,4,opt,name=organization_id,json=organizationId,proto3" json:"organization_id,omitempty" db:"organization_id,omitempty" url:"organization_id,omitempty"`
	Deactivated          bool             `protobuf:"varint,5,opt,name=deactivated,proto3" json:"deactivated,omitempty" db:"deactivated,omitempty" url:"deactivated,omitempty"`
	Created              *types.Timestamp `protobuf:"bytes,6,opt,name=created,proto3" json:"created,omitempty" db:"created,omitempty" url:"created,omitempty"`
	Modified             *types.Timestamp `protobuf:"bytes,7,opt,name=modified,proto3" json:"modified,omitempty" db:"modified,omitempty" url:"modified,omitempty"`
	Config               *AccountConfig   `protobuf:"bytes,8,opt,name=config,proto3" json:"config,omitempty" db:"config,omitempty" url:"config,omitempty"`
	Internal             bool             `protobuf:"varint,9,opt,name=internal,proto3" json:"internal,omitempty" db:"internal,omitempty" url:"internal,omitempty"`
	DeactivatedAt        *types.Timestamp `protobuf:"bytes,10,opt,name=deactivated_at,json=deactivatedAt,proto3" json:"deactivated_at,omitempty" db:"deactivated_at,omitempty" url:"deactivated_at,omitempty"`
	OrgResourceId        string           `protobuf:"bytes,11,opt,name=org_resource_id,json=orgResourceId,proto3" json:"org_resource_id,omitempty" db:"org_resource_id,omitempty" url:"org_resource_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *Account) Reset()         { *m = Account{} }
func (m *Account) String() string { return proto.CompactTextString(m) }
func (*Account) ProtoMessage()    {}
func (*Account) Descriptor() ([]byte, []int) {
	return fileDescriptor_bff3a4753709c6f2, []int{3}
}
func (m *Account) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Account) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Account.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Account) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Account.Merge(m, src)
}
func (m *Account) XXX_Size() int {
	return m.Size()
}
func (m *Account) XXX_DiscardUnknown() {
	xxx_messageInfo_Account.DiscardUnknown(m)
}

var xxx_messageInfo_Account proto.InternalMessageInfo

func (m *Account) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Account) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Account) GetOrganizationId() int32 {
	if m != nil {
		return m.OrganizationId
	}
	return 0
}

func (m *Account) GetDeactivated() bool {
	if m != nil {
		return m.Deactivated
	}
	return false
}

func (m *Account) GetCreated() *types.Timestamp {
	if m != nil {
		return m.Created
	}
	return nil
}

func (m *Account) GetModified() *types.Timestamp {
	if m != nil {
		return m.Modified
	}
	return nil
}

func (m *Account) GetConfig() *AccountConfig {
	if m != nil {
		return m.Config
	}
	return nil
}

func (m *Account) GetInternal() bool {
	if m != nil {
		return m.Internal
	}
	return false
}

func (m *Account) GetDeactivatedAt() *types.Timestamp {
	if m != nil {
		return m.DeactivatedAt
	}
	return nil
}

func (m *Account) GetOrgResourceId() string {
	if m != nil {
		return m.OrgResourceId
	}
	return ""
}

type AccountConfig struct {
	MaxKafkaClusters     int32    `protobuf:"varint,1,opt,name=max_kafka_clusters,json=maxKafkaClusters,proto3" json:"max_kafka_clusters,omitempty" db:"max_kafka_clusters,omitempty" url:"max_kafka_clusters,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AccountConfig) Reset()         { *m = AccountConfig{} }
func (m *AccountConfig) String() string { return proto.CompactTextString(m) }
func (*AccountConfig) ProtoMessage()    {}
func (*AccountConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_bff3a4753709c6f2, []int{4}
}
func (m *AccountConfig) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AccountConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AccountConfig.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AccountConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AccountConfig.Merge(m, src)
}
func (m *AccountConfig) XXX_Size() int {
	return m.Size()
}
func (m *AccountConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_AccountConfig.DiscardUnknown(m)
}

var xxx_messageInfo_AccountConfig proto.InternalMessageInfo

func (m *AccountConfig) GetMaxKafkaClusters() int32 {
	if m != nil {
		return m.MaxKafkaClusters
	}
	return 0
}

type Plan struct {
	TaxAddress           *Address         `protobuf:"bytes,1,opt,name=tax_address,json=taxAddress,proto3" json:"tax_address,omitempty" db:"tax_address,omitempty" url:"tax_address,omitempty"`
	ProductLevel         ProductLevel     `protobuf:"varint,2,opt,name=product_level,json=productLevel,proto3,enum=ccloud.org.ProductLevel" json:"product_level,omitempty" db:"product_level,omitempty" url:"product_level,omitempty"`
	TrialStart           *types.Timestamp `protobuf:"bytes,3,opt,name=trial_start,json=trialStart,proto3" json:"trial_start,omitempty" db:"trial_start,omitempty" url:"trial_start,omitempty"`
	TrialEnd             *types.Timestamp `protobuf:"bytes,4,opt,name=trial_end,json=trialEnd,proto3" json:"trial_end,omitempty" db:"trial_end,omitempty" url:"trial_end,omitempty"`
	PlanStart            *types.Timestamp `protobuf:"bytes,5,opt,name=plan_start,json=planStart,proto3" json:"plan_start,omitempty" db:"plan_start,omitempty" url:"plan_start,omitempty"`
	PlanEnd              *types.Timestamp `protobuf:"bytes,6,opt,name=plan_end,json=planEnd,proto3" json:"plan_end,omitempty" db:"plan_end,omitempty" url:"plan_end,omitempty"`
	Product              *Plan_Product    `protobuf:"bytes,8,opt,name=product,proto3" json:"product,omitempty" db:"product,omitempty" url:"product,omitempty"`
	Billing              *Plan_Billing    `protobuf:"bytes,9,opt,name=billing,proto3" json:"billing,omitempty" db:"billing,omitempty" url:"billing,omitempty"`
	ReferralCode         string           `protobuf:"bytes,10,opt,name=referral_code,json=referralCode,proto3" json:"referral_code,omitempty" db:"referral_code,omitempty" url:"referral_code,omitempty"`
	AcceptTos            *types.BoolValue `protobuf:"bytes,11,opt,name=accept_tos,json=acceptTos,proto3" json:"accept_tos,omitempty" db:"accept_tos,omitempty" url:"accept_tos,omitempty"`
	AllowMultiTenant     bool             `protobuf:"varint,12,opt,name=allow_multi_tenant,json=allowMultiTenant,proto3" json:"allow_multi_tenant,omitempty" db:"allow_multi_tenant,omitempty" url:"allow_multi_tenant,omitempty"`
	AcceptTosPlatform    *types.BoolValue `protobuf:"bytes,13,opt,name=accept_tos_platform,json=acceptTosPlatform,proto3" json:"accept_tos_platform,omitempty" db:"accept_tos_platform,omitempty" url:"accept_tos_platform,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *Plan) Reset()         { *m = Plan{} }
func (m *Plan) String() string { return proto.CompactTextString(m) }
func (*Plan) ProtoMessage()    {}
func (*Plan) Descriptor() ([]byte, []int) {
	return fileDescriptor_bff3a4753709c6f2, []int{5}
}
func (m *Plan) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Plan) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Plan.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Plan) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Plan.Merge(m, src)
}
func (m *Plan) XXX_Size() int {
	return m.Size()
}
func (m *Plan) XXX_DiscardUnknown() {
	xxx_messageInfo_Plan.DiscardUnknown(m)
}

var xxx_messageInfo_Plan proto.InternalMessageInfo

func (m *Plan) GetTaxAddress() *Address {
	if m != nil {
		return m.TaxAddress
	}
	return nil
}

func (m *Plan) GetProductLevel() ProductLevel {
	if m != nil {
		return m.ProductLevel
	}
	return ProductLevel_DEVELOPER
}

func (m *Plan) GetTrialStart() *types.Timestamp {
	if m != nil {
		return m.TrialStart
	}
	return nil
}

func (m *Plan) GetTrialEnd() *types.Timestamp {
	if m != nil {
		return m.TrialEnd
	}
	return nil
}

func (m *Plan) GetPlanStart() *types.Timestamp {
	if m != nil {
		return m.PlanStart
	}
	return nil
}

func (m *Plan) GetPlanEnd() *types.Timestamp {
	if m != nil {
		return m.PlanEnd
	}
	return nil
}

func (m *Plan) GetProduct() *Plan_Product {
	if m != nil {
		return m.Product
	}
	return nil
}

func (m *Plan) GetBilling() *Plan_Billing {
	if m != nil {
		return m.Billing
	}
	return nil
}

func (m *Plan) GetReferralCode() string {
	if m != nil {
		return m.ReferralCode
	}
	return ""
}

func (m *Plan) GetAcceptTos() *types.BoolValue {
	if m != nil {
		return m.AcceptTos
	}
	return nil
}

func (m *Plan) GetAllowMultiTenant() bool {
	if m != nil {
		return m.AllowMultiTenant
	}
	return false
}

func (m *Plan) GetAcceptTosPlatform() *types.BoolValue {
	if m != nil {
		return m.AcceptTosPlatform
	}
	return nil
}

type Plan_Product struct {
	ReadThroughputMb  float64 `protobuf:"fixed64,1,opt,name=read_throughput_mb,json=readThroughputMb,proto3" json:"read_throughput_mb,omitempty" db:"read_throughput_mb,omitempty" url:"read_throughput_mb,omitempty"`
	WriteThroughputMb float64 `protobuf:"fixed64,2,opt,name=write_throughput_mb,json=writeThroughputMb,proto3" json:"write_throughput_mb,omitempty" db:"write_throughput_mb,omitempty" url:"write_throughput_mb,omitempty"`
	// max data that can be retained, usable, not counting total allocated for replication
	StorageGb            int32    `protobuf:"varint,3,opt,name=storage_gb,json=storageGb,proto3" json:"storage_gb,omitempty" db:"storage_gb,omitempty" url:"storage_gb,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Plan_Product) Reset()         { *m = Plan_Product{} }
func (m *Plan_Product) String() string { return proto.CompactTextString(m) }
func (*Plan_Product) ProtoMessage()    {}
func (*Plan_Product) Descriptor() ([]byte, []int) {
	return fileDescriptor_bff3a4753709c6f2, []int{5, 0}
}
func (m *Plan_Product) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Plan_Product) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Plan_Product.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Plan_Product) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Plan_Product.Merge(m, src)
}
func (m *Plan_Product) XXX_Size() int {
	return m.Size()
}
func (m *Plan_Product) XXX_DiscardUnknown() {
	xxx_messageInfo_Plan_Product.DiscardUnknown(m)
}

var xxx_messageInfo_Plan_Product proto.InternalMessageInfo

func (m *Plan_Product) GetReadThroughputMb() float64 {
	if m != nil {
		return m.ReadThroughputMb
	}
	return 0
}

func (m *Plan_Product) GetWriteThroughputMb() float64 {
	if m != nil {
		return m.WriteThroughputMb
	}
	return 0
}

func (m *Plan_Product) GetStorageGb() int32 {
	if m != nil {
		return m.StorageGb
	}
	return 0
}

type Plan_Billing struct {
	Method   BillingMethod   `protobuf:"varint,1,opt,name=method,proto3,enum=ccloud.org.BillingMethod" json:"method,omitempty" db:"method,omitempty" url:"method,omitempty"`
	Interval BillingInterval `protobuf:"varint,2,opt,name=interval,proto3,enum=ccloud.org.BillingInterval" json:"interval,omitempty" db:"interval,omitempty" url:"interval,omitempty"`
	// in hundredths of a cent, aggregates the running cost of all clusters
	// in the current billing cycle
	AccruedThisCycle     uint64   `protobuf:"varint,3,opt,name=accrued_this_cycle,json=accruedThisCycle,proto3" json:"accrued_this_cycle,omitempty" db:"accrued_this_cycle,omitempty" url:"accrued_this_cycle,omitempty"`
	StripeCustomerId     string   `protobuf:"bytes,4,opt,name=stripe_customer_id,json=stripeCustomerId,proto3" json:"stripe_customer_id,omitempty" db:"stripe_customer_id,omitempty" url:"stripe_customer_id,omitempty"`
	Email                string   `protobuf:"bytes,5,opt,name=email,proto3" json:"email,omitempty" db:"email,omitempty" url:"email,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Plan_Billing) Reset()         { *m = Plan_Billing{} }
func (m *Plan_Billing) String() string { return proto.CompactTextString(m) }
func (*Plan_Billing) ProtoMessage()    {}
func (*Plan_Billing) Descriptor() ([]byte, []int) {
	return fileDescriptor_bff3a4753709c6f2, []int{5, 1}
}
func (m *Plan_Billing) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Plan_Billing) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Plan_Billing.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Plan_Billing) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Plan_Billing.Merge(m, src)
}
func (m *Plan_Billing) XXX_Size() int {
	return m.Size()
}
func (m *Plan_Billing) XXX_DiscardUnknown() {
	xxx_messageInfo_Plan_Billing.DiscardUnknown(m)
}

var xxx_messageInfo_Plan_Billing proto.InternalMessageInfo

func (m *Plan_Billing) GetMethod() BillingMethod {
	if m != nil {
		return m.Method
	}
	return BillingMethod_STRIPE
}

func (m *Plan_Billing) GetInterval() BillingInterval {
	if m != nil {
		return m.Interval
	}
	return BillingInterval_MONTHLY
}

func (m *Plan_Billing) GetAccruedThisCycle() uint64 {
	if m != nil {
		return m.AccruedThisCycle
	}
	return 0
}

func (m *Plan_Billing) GetStripeCustomerId() string {
	if m != nil {
		return m.StripeCustomerId
	}
	return ""
}

func (m *Plan_Billing) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

type Saml struct {
	Enabled              bool     `protobuf:"varint,1,opt,name=enabled,proto3" json:"enabled,omitempty" db:"enabled,omitempty" url:"enabled,omitempty"`
	MetadataUrl          string   `protobuf:"bytes,2,opt,name=metadata_url,json=metadataUrl,proto3" json:"metadata_url,omitempty" db:"metadata_url,omitempty" url:"metadata_url,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Saml) Reset()         { *m = Saml{} }
func (m *Saml) String() string { return proto.CompactTextString(m) }
func (*Saml) ProtoMessage()    {}
func (*Saml) Descriptor() ([]byte, []int) {
	return fileDescriptor_bff3a4753709c6f2, []int{6}
}
func (m *Saml) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Saml) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Saml.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Saml) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Saml.Merge(m, src)
}
func (m *Saml) XXX_Size() int {
	return m.Size()
}
func (m *Saml) XXX_DiscardUnknown() {
	xxx_messageInfo_Saml.DiscardUnknown(m)
}

var xxx_messageInfo_Saml proto.InternalMessageInfo

func (m *Saml) GetEnabled() bool {
	if m != nil {
		return m.Enabled
	}
	return false
}

func (m *Saml) GetMetadataUrl() string {
	if m != nil {
		return m.MetadataUrl
	}
	return ""
}

type Organization struct {
	Id               int32            `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty" db:"id,omitempty" url:"id,omitempty"`
	Name             string           `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty" db:"name,omitempty" url:"name,omitempty"`
	Deactivated      bool             `protobuf:"varint,3,opt,name=deactivated,proto3" json:"deactivated,omitempty" db:"deactivated,omitempty" url:"deactivated,omitempty"`
	StripeCustomerId string           `protobuf:"bytes,4,opt,name=stripe_customer_id,json=stripeCustomerId,proto3" json:"stripe_customer_id,omitempty" db:"stripe_customer_id,omitempty" url:"stripe_customer_id,omitempty"`
	Created          *types.Timestamp `protobuf:"bytes,5,opt,name=created,proto3" json:"created,omitempty" db:"created,omitempty" url:"created,omitempty"`
	Modified         *types.Timestamp `protobuf:"bytes,6,opt,name=modified,proto3" json:"modified,omitempty" db:"modified,omitempty" url:"modified,omitempty"`
	BillingEmail     string           `protobuf:"bytes,7,opt,name=billing_email,json=billingEmail,proto3" json:"billing_email,omitempty" db:"billing_email,omitempty" url:"billing_email,omitempty"`
	Plan             *Plan            `protobuf:"bytes,8,opt,name=plan,proto3" json:"plan,omitempty" db:"plan,omitempty" url:"plan,omitempty"`
	Saml             *Saml            `protobuf:"bytes,9,opt,name=saml,proto3" json:"saml,omitempty" db:"saml,omitempty" url:"saml,omitempty"`
	Sso              *Sso             `protobuf:"bytes,10,opt,name=sso,proto3" json:"sso,omitempty" db:"sso,omitempty" url:"sso,omitempty"`
	Marketplace      *Marketplace     `protobuf:"bytes,11,opt,name=marketplace,proto3" json:"marketplace,omitempty" db:"marketplace,omitempty" url:"marketplace,omitempty"`
	ResourceId       string           `protobuf:"bytes,12,opt,name=resource_id,json=resourceId,proto3" json:"resource_id,omitempty" db:"resource_id,omitempty" url:"resource_id,omitempty"`
	//derived flags
	HasEntitlement bool      `protobuf:"varint,13,opt,name=has_entitlement,json=hasEntitlement,proto3" json:"has_entitlement,omitempty" db:"has_entitlement,omitempty" url:"has_entitlement,omitempty"`
	ShowBilling    bool      `protobuf:"varint,14,opt,name=show_billing,json=showBilling,proto3" json:"show_billing,omitempty" db:"show_billing,omitempty" url:"show_billing,omitempty"`
	AuditLog       *AuditLog `protobuf:"bytes,15,opt,name=audit_log,json=auditLog,proto3" json:"audit_log,omitempty" db:"audit_log,omitempty" url:"audit_log,omitempty"`
	// Derived flag from active orders (based on the current time), indicating if an org has commitment with us.
	HasCommitment bool `protobuf:"varint,16,opt,name=has_commitment,json=hasCommitment,proto3" json:"has_commitment,omitempty" db:"has_commitment,omitempty" url:"has_commitment,omitempty"` // Deprecated: Do not use.
	//derived marketplace subscription
	MarketplaceSubscription MarketplaceSubscription `protobuf:"varint,17,opt,name=marketplace_subscription,json=marketplaceSubscription,proto3,enum=ccloud.org.MarketplaceSubscription" json:"marketplace_subscription,omitempty" db:"marketplace_subscription,omitempty" url:"marketplace_subscription,omitempty"`
	DeactivatedAt           *types.Timestamp        `protobuf:"bytes,18,opt,name=deactivated_at,json=deactivatedAt,proto3" json:"deactivated_at,omitempty" db:"deactivated_at,omitempty" url:"deactivated_at,omitempty"`
	SuspensionStatus        *SuspensionStatus       `protobuf:"bytes,19,opt,name=suspension_status,json=suspensionStatus,proto3" json:"suspension_status,omitempty" db:"suspension_status,omitempty" url:"suspension_status,omitempty"`
	DisplayLabel            string                  `protobuf:"bytes,20,opt,name=display_label,json=displayLabel,proto3" json:"display_label,omitempty" db:"display_label,omitempty" url:"display_label,omitempty"`
	XXX_NoUnkeyedLiteral    struct{}                `json:"-"`
	XXX_unrecognized        []byte                  `json:"-"`
	XXX_sizecache           int32                   `json:"-"`
}

func (m *Organization) Reset()         { *m = Organization{} }
func (m *Organization) String() string { return proto.CompactTextString(m) }
func (*Organization) ProtoMessage()    {}
func (*Organization) Descriptor() ([]byte, []int) {
	return fileDescriptor_bff3a4753709c6f2, []int{7}
}
func (m *Organization) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Organization) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Organization.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Organization) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Organization.Merge(m, src)
}
func (m *Organization) XXX_Size() int {
	return m.Size()
}
func (m *Organization) XXX_DiscardUnknown() {
	xxx_messageInfo_Organization.DiscardUnknown(m)
}

var xxx_messageInfo_Organization proto.InternalMessageInfo

func (m *Organization) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Organization) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Organization) GetDeactivated() bool {
	if m != nil {
		return m.Deactivated
	}
	return false
}

func (m *Organization) GetStripeCustomerId() string {
	if m != nil {
		return m.StripeCustomerId
	}
	return ""
}

func (m *Organization) GetCreated() *types.Timestamp {
	if m != nil {
		return m.Created
	}
	return nil
}

func (m *Organization) GetModified() *types.Timestamp {
	if m != nil {
		return m.Modified
	}
	return nil
}

func (m *Organization) GetBillingEmail() string {
	if m != nil {
		return m.BillingEmail
	}
	return ""
}

func (m *Organization) GetPlan() *Plan {
	if m != nil {
		return m.Plan
	}
	return nil
}

func (m *Organization) GetSaml() *Saml {
	if m != nil {
		return m.Saml
	}
	return nil
}

func (m *Organization) GetSso() *Sso {
	if m != nil {
		return m.Sso
	}
	return nil
}

func (m *Organization) GetMarketplace() *Marketplace {
	if m != nil {
		return m.Marketplace
	}
	return nil
}

func (m *Organization) GetResourceId() string {
	if m != nil {
		return m.ResourceId
	}
	return ""
}

func (m *Organization) GetHasEntitlement() bool {
	if m != nil {
		return m.HasEntitlement
	}
	return false
}

func (m *Organization) GetShowBilling() bool {
	if m != nil {
		return m.ShowBilling
	}
	return false
}

func (m *Organization) GetAuditLog() *AuditLog {
	if m != nil {
		return m.AuditLog
	}
	return nil
}

// Deprecated: Do not use.
func (m *Organization) GetHasCommitment() bool {
	if m != nil {
		return m.HasCommitment
	}
	return false
}

func (m *Organization) GetMarketplaceSubscription() MarketplaceSubscription {
	if m != nil {
		return m.MarketplaceSubscription
	}
	return MarketplaceSubscription_SUBSCRIPTION_NONE
}

func (m *Organization) GetDeactivatedAt() *types.Timestamp {
	if m != nil {
		return m.DeactivatedAt
	}
	return nil
}

func (m *Organization) GetSuspensionStatus() *SuspensionStatus {
	if m != nil {
		return m.SuspensionStatus
	}
	return nil
}

func (m *Organization) GetDisplayLabel() string {
	if m != nil {
		return m.DisplayLabel
	}
	return ""
}

type SuspensionStatus struct {
	Suspended                   *types.Timestamp     `protobuf:"bytes,1,opt,name=suspended,proto3" json:"suspended,omitempty" db:"suspended,omitempty" url:"suspended,omitempty"`
	Status                      SuspensionStatusType `protobuf:"varint,2,opt,name=status,proto3,enum=ccloud.org.SuspensionStatusType" json:"status,omitempty" db:"status,omitempty" url:"status,omitempty"`
	EventType                   SuspensionEventType  `protobuf:"varint,3,opt,name=event_type,json=eventType,proto3,enum=ccloud.org.SuspensionEventType" json:"event_type,omitempty" db:"event_type,omitempty" url:"event_type,omitempty"`
	ScheduledDeactivatedAt      *types.Timestamp     `protobuf:"bytes,4,opt,name=scheduled_deactivated_at,json=scheduledDeactivatedAt,proto3" json:"scheduled_deactivated_at,omitempty" db:"scheduled_deactivated_at,omitempty" url:"scheduled_deactivated_at,omitempty"`
	Version                     int64                `protobuf:"varint,5,opt,name=version,proto3" json:"version,omitempty" db:"version,omitempty" url:"version,omitempty"`
	ErrorMessage                string               `protobuf:"bytes,6,opt,name=error_message,json=errorMessage,proto3" json:"error_message,omitempty" db:"error_message,omitempty" url:"error_message,omitempty"`
	ScheduledResourcesDeletedAt *types.Timestamp     `protobuf:"bytes,7,opt,name=scheduled_resources_deleted_at,json=scheduledResourcesDeletedAt,proto3" json:"scheduled_resources_deleted_at,omitempty" db:"scheduled_resources_deleted_at,omitempty" url:"scheduled_resources_deleted_at,omitempty"`
	ResourcesDeletedAt          *types.Timestamp     `protobuf:"bytes,8,opt,name=resources_deleted_at,json=resourcesDeletedAt,proto3" json:"resources_deleted_at,omitempty" db:"resources_deleted_at,omitempty" url:"resources_deleted_at,omitempty"`
	XXX_NoUnkeyedLiteral        struct{}             `json:"-"`
	XXX_unrecognized            []byte               `json:"-"`
	XXX_sizecache               int32                `json:"-"`
}

func (m *SuspensionStatus) Reset()         { *m = SuspensionStatus{} }
func (m *SuspensionStatus) String() string { return proto.CompactTextString(m) }
func (*SuspensionStatus) ProtoMessage()    {}
func (*SuspensionStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_bff3a4753709c6f2, []int{8}
}
func (m *SuspensionStatus) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SuspensionStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SuspensionStatus.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SuspensionStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SuspensionStatus.Merge(m, src)
}
func (m *SuspensionStatus) XXX_Size() int {
	return m.Size()
}
func (m *SuspensionStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_SuspensionStatus.DiscardUnknown(m)
}

var xxx_messageInfo_SuspensionStatus proto.InternalMessageInfo

func (m *SuspensionStatus) GetSuspended() *types.Timestamp {
	if m != nil {
		return m.Suspended
	}
	return nil
}

func (m *SuspensionStatus) GetStatus() SuspensionStatusType {
	if m != nil {
		return m.Status
	}
	return SuspensionStatusType_SUSPENSION_UNKNOWN
}

func (m *SuspensionStatus) GetEventType() SuspensionEventType {
	if m != nil {
		return m.EventType
	}
	return SuspensionEventType_SUSPENSION_EVENT_UNKNOWN
}

func (m *SuspensionStatus) GetScheduledDeactivatedAt() *types.Timestamp {
	if m != nil {
		return m.ScheduledDeactivatedAt
	}
	return nil
}

func (m *SuspensionStatus) GetVersion() int64 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *SuspensionStatus) GetErrorMessage() string {
	if m != nil {
		return m.ErrorMessage
	}
	return ""
}

func (m *SuspensionStatus) GetScheduledResourcesDeletedAt() *types.Timestamp {
	if m != nil {
		return m.ScheduledResourcesDeletedAt
	}
	return nil
}

func (m *SuspensionStatus) GetResourcesDeletedAt() *types.Timestamp {
	if m != nil {
		return m.ResourcesDeletedAt
	}
	return nil
}

// TODO remove with CDMUM-789
type MarketplaceCreds struct {
	Token                string             `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty" db:"token,omitempty" url:"token,omitempty"`
	Partner              MarketplacePartner `protobuf:"varint,2,opt,name=partner,proto3,enum=ccloud.core.MarketplacePartner" json:"partner,omitempty" db:"partner,omitempty" url:"partner,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *MarketplaceCreds) Reset()         { *m = MarketplaceCreds{} }
func (m *MarketplaceCreds) String() string { return proto.CompactTextString(m) }
func (*MarketplaceCreds) ProtoMessage()    {}
func (*MarketplaceCreds) Descriptor() ([]byte, []int) {
	return fileDescriptor_bff3a4753709c6f2, []int{9}
}
func (m *MarketplaceCreds) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MarketplaceCreds) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MarketplaceCreds.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MarketplaceCreds) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MarketplaceCreds.Merge(m, src)
}
func (m *MarketplaceCreds) XXX_Size() int {
	return m.Size()
}
func (m *MarketplaceCreds) XXX_DiscardUnknown() {
	xxx_messageInfo_MarketplaceCreds.DiscardUnknown(m)
}

var xxx_messageInfo_MarketplaceCreds proto.InternalMessageInfo

func (m *MarketplaceCreds) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

func (m *MarketplaceCreds) GetPartner() MarketplacePartner {
	if m != nil {
		return m.Partner
	}
	return MarketplacePartner_UNKNOWN
}

type SignupRequest struct {
	Organization         *Organization     `protobuf:"bytes,1,opt,name=organization,proto3" json:"organization,omitempty" db:"organization,omitempty" url:"organization,omitempty"`
	User                 *User             `protobuf:"bytes,2,opt,name=user,proto3" json:"user,omitempty" db:"user,omitempty" url:"user,omitempty"`
	Credentials          *Credentials      `protobuf:"bytes,3,opt,name=credentials,proto3" json:"credentials,omitempty" db:"credentials,omitempty" url:"credentials,omitempty"`
	StripeToken          string            `protobuf:"bytes,4,opt,name=stripe_token,json=stripeToken,proto3" json:"stripe_token,omitempty" db:"stripe_token,omitempty" url:"stripe_token,omitempty"`
	Enterprise           bool              `protobuf:"varint,5,opt,name=enterprise,proto3" json:"enterprise,omitempty" db:"enterprise,omitempty" url:"enterprise,omitempty"`
	RequestCarrier       map[string]string `protobuf:"bytes,6,rep,name=request_carrier,json=requestCarrier,proto3" json:"request_carrier,omitempty" redact:"-" db:"request_carrier,omitempty" url:"request_carrier,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Utm                  *Utm              `protobuf:"bytes,7,opt,name=utm,proto3" json:"utm,omitempty" db:"utm,omitempty" url:"utm,omitempty"`
	ExistingCreds        bool              `protobuf:"varint,8,opt,name=existing_creds,json=existingCreds,proto3" json:"existing_creds,omitempty" db:"existing_creds,omitempty" url:"existing_creds,omitempty"`
	Token                string            `protobuf:"bytes,9,opt,name=token,proto3" json:"token,omitempty" db:"token,omitempty" url:"token,omitempty"`
	MarketplaceCreds     *MarketplaceCreds `protobuf:"bytes,10,opt,name=marketplace_creds,json=marketplaceCreds,proto3" json:"marketplace_creds,omitempty" db:"marketplace_creds,omitempty" url:"marketplace_creds,omitempty"`
	CountryCode          string            `protobuf:"bytes,11,opt,name=country_code,json=countryCode,proto3" json:"country_code,omitempty" db:"country_code,omitempty" url:"country_code,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *SignupRequest) Reset()         { *m = SignupRequest{} }
func (m *SignupRequest) String() string { return proto.CompactTextString(m) }
func (*SignupRequest) ProtoMessage()    {}
func (*SignupRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_bff3a4753709c6f2, []int{10}
}
func (m *SignupRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SignupRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SignupRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SignupRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SignupRequest.Merge(m, src)
}
func (m *SignupRequest) XXX_Size() int {
	return m.Size()
}
func (m *SignupRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SignupRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SignupRequest proto.InternalMessageInfo

func (m *SignupRequest) GetOrganization() *Organization {
	if m != nil {
		return m.Organization
	}
	return nil
}

func (m *SignupRequest) GetUser() *User {
	if m != nil {
		return m.User
	}
	return nil
}

func (m *SignupRequest) GetCredentials() *Credentials {
	if m != nil {
		return m.Credentials
	}
	return nil
}

func (m *SignupRequest) GetStripeToken() string {
	if m != nil {
		return m.StripeToken
	}
	return ""
}

func (m *SignupRequest) GetEnterprise() bool {
	if m != nil {
		return m.Enterprise
	}
	return false
}

func (m *SignupRequest) GetRequestCarrier() map[string]string {
	if m != nil {
		return m.RequestCarrier
	}
	return nil
}

func (m *SignupRequest) GetUtm() *Utm {
	if m != nil {
		return m.Utm
	}
	return nil
}

func (m *SignupRequest) GetExistingCreds() bool {
	if m != nil {
		return m.ExistingCreds
	}
	return false
}

func (m *SignupRequest) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

func (m *SignupRequest) GetMarketplaceCreds() *MarketplaceCreds {
	if m != nil {
		return m.MarketplaceCreds
	}
	return nil
}

func (m *SignupRequest) GetCountryCode() string {
	if m != nil {
		return m.CountryCode
	}
	return ""
}

type Credentials struct {
	Username             string   `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty" db:"username,omitempty" url:"username,omitempty"`
	Password             string   `protobuf:"bytes,2,opt,name=password,proto3" json:"password,omitempty" redact:"-" db:"password,omitempty" url:"password,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Credentials) Reset()         { *m = Credentials{} }
func (m *Credentials) String() string { return proto.CompactTextString(m) }
func (*Credentials) ProtoMessage()    {}
func (*Credentials) Descriptor() ([]byte, []int) {
	return fileDescriptor_bff3a4753709c6f2, []int{11}
}
func (m *Credentials) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Credentials) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Credentials.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Credentials) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Credentials.Merge(m, src)
}
func (m *Credentials) XXX_Size() int {
	return m.Size()
}
func (m *Credentials) XXX_DiscardUnknown() {
	xxx_messageInfo_Credentials.DiscardUnknown(m)
}

var xxx_messageInfo_Credentials proto.InternalMessageInfo

func (m *Credentials) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func (m *Credentials) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

type SignupReply struct {
	User                 *User         `protobuf:"bytes,1,opt,name=user,proto3" json:"user,omitempty" db:"user,omitempty" url:"user,omitempty"`
	Organization         *Organization `protobuf:"bytes,2,opt,name=organization,proto3" json:"organization,omitempty" db:"organization,omitempty" url:"organization,omitempty"`
	Account              *Account      `protobuf:"bytes,3,opt,name=account,proto3" json:"account,omitempty" db:"account,omitempty" url:"account,omitempty"`
	Error                *Error        `protobuf:"bytes,5,opt,name=error,proto3" json:"error,omitempty" db:"error,omitempty" url:"error,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *SignupReply) Reset()         { *m = SignupReply{} }
func (m *SignupReply) String() string { return proto.CompactTextString(m) }
func (*SignupReply) ProtoMessage()    {}
func (*SignupReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_bff3a4753709c6f2, []int{12}
}
func (m *SignupReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SignupReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SignupReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SignupReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SignupReply.Merge(m, src)
}
func (m *SignupReply) XXX_Size() int {
	return m.Size()
}
func (m *SignupReply) XXX_DiscardUnknown() {
	xxx_messageInfo_SignupReply.DiscardUnknown(m)
}

var xxx_messageInfo_SignupReply proto.InternalMessageInfo

func (m *SignupReply) GetUser() *User {
	if m != nil {
		return m.User
	}
	return nil
}

func (m *SignupReply) GetOrganization() *Organization {
	if m != nil {
		return m.Organization
	}
	return nil
}

func (m *SignupReply) GetAccount() *Account {
	if m != nil {
		return m.Account
	}
	return nil
}

func (m *SignupReply) GetError() *Error {
	if m != nil {
		return m.Error
	}
	return nil
}

type GetUsersReply struct {
	Users                []*User   `protobuf:"bytes,1,rep,name=users,proto3" json:"users,omitempty" db:"users,omitempty" url:"users,omitempty"`
	Error                *Error    `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty" db:"error,omitempty" url:"error,omitempty"`
	PageInfo             *PageInfo `protobuf:"bytes,3,opt,name=page_info,json=pageInfo,proto3" json:"page_info,omitempty" db:"page_info,omitempty" url:"page_info,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *GetUsersReply) Reset()         { *m = GetUsersReply{} }
func (m *GetUsersReply) String() string { return proto.CompactTextString(m) }
func (*GetUsersReply) ProtoMessage()    {}
func (*GetUsersReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_bff3a4753709c6f2, []int{13}
}
func (m *GetUsersReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetUsersReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetUsersReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetUsersReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetUsersReply.Merge(m, src)
}
func (m *GetUsersReply) XXX_Size() int {
	return m.Size()
}
func (m *GetUsersReply) XXX_DiscardUnknown() {
	xxx_messageInfo_GetUsersReply.DiscardUnknown(m)
}

var xxx_messageInfo_GetUsersReply proto.InternalMessageInfo

func (m *GetUsersReply) GetUsers() []*User {
	if m != nil {
		return m.Users
	}
	return nil
}

func (m *GetUsersReply) GetError() *Error {
	if m != nil {
		return m.Error
	}
	return nil
}

func (m *GetUsersReply) GetPageInfo() *PageInfo {
	if m != nil {
		return m.PageInfo
	}
	return nil
}

type CreateAccountRequest struct {
	Account              *Account          `protobuf:"bytes,1,opt,name=account,proto3" json:"account,omitempty" db:"account,omitempty" url:"account,omitempty"`
	RequestCarrier       map[string]string `protobuf:"bytes,2,rep,name=request_carrier,json=requestCarrier,proto3" json:"request_carrier,omitempty" redact:"-" db:"request_carrier,omitempty" url:"request_carrier,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *CreateAccountRequest) Reset()         { *m = CreateAccountRequest{} }
func (m *CreateAccountRequest) String() string { return proto.CompactTextString(m) }
func (*CreateAccountRequest) ProtoMessage()    {}
func (*CreateAccountRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_bff3a4753709c6f2, []int{14}
}
func (m *CreateAccountRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateAccountRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreateAccountRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CreateAccountRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateAccountRequest.Merge(m, src)
}
func (m *CreateAccountRequest) XXX_Size() int {
	return m.Size()
}
func (m *CreateAccountRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateAccountRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CreateAccountRequest proto.InternalMessageInfo

func (m *CreateAccountRequest) GetAccount() *Account {
	if m != nil {
		return m.Account
	}
	return nil
}

func (m *CreateAccountRequest) GetRequestCarrier() map[string]string {
	if m != nil {
		return m.RequestCarrier
	}
	return nil
}

type CreateAccountReply struct {
	Account              *Account `protobuf:"bytes,1,opt,name=account,proto3" json:"account,omitempty" db:"account,omitempty" url:"account,omitempty"`
	Error                *Error   `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty" db:"error,omitempty" url:"error,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CreateAccountReply) Reset()         { *m = CreateAccountReply{} }
func (m *CreateAccountReply) String() string { return proto.CompactTextString(m) }
func (*CreateAccountReply) ProtoMessage()    {}
func (*CreateAccountReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_bff3a4753709c6f2, []int{15}
}
func (m *CreateAccountReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateAccountReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreateAccountReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CreateAccountReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateAccountReply.Merge(m, src)
}
func (m *CreateAccountReply) XXX_Size() int {
	return m.Size()
}
func (m *CreateAccountReply) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateAccountReply.DiscardUnknown(m)
}

var xxx_messageInfo_CreateAccountReply proto.InternalMessageInfo

func (m *CreateAccountReply) GetAccount() *Account {
	if m != nil {
		return m.Account
	}
	return nil
}

func (m *CreateAccountReply) GetError() *Error {
	if m != nil {
		return m.Error
	}
	return nil
}

type GetAccountReply struct {
	Account              *Account `protobuf:"bytes,1,opt,name=account,proto3" json:"account,omitempty" db:"account,omitempty" url:"account,omitempty"`
	Error                *Error   `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty" db:"error,omitempty" url:"error,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetAccountReply) Reset()         { *m = GetAccountReply{} }
func (m *GetAccountReply) String() string { return proto.CompactTextString(m) }
func (*GetAccountReply) ProtoMessage()    {}
func (*GetAccountReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_bff3a4753709c6f2, []int{16}
}
func (m *GetAccountReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetAccountReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetAccountReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetAccountReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetAccountReply.Merge(m, src)
}
func (m *GetAccountReply) XXX_Size() int {
	return m.Size()
}
func (m *GetAccountReply) XXX_DiscardUnknown() {
	xxx_messageInfo_GetAccountReply.DiscardUnknown(m)
}

var xxx_messageInfo_GetAccountReply proto.InternalMessageInfo

func (m *GetAccountReply) GetAccount() *Account {
	if m != nil {
		return m.Account
	}
	return nil
}

func (m *GetAccountReply) GetError() *Error {
	if m != nil {
		return m.Error
	}
	return nil
}

type ListAccountsReply struct {
	Accounts             []*Account `protobuf:"bytes,1,rep,name=accounts,proto3" json:"accounts,omitempty" db:"accounts,omitempty" url:"accounts,omitempty"`
	Error                *Error     `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty" db:"error,omitempty" url:"error,omitempty"`
	PageInfo             *PageInfo  `protobuf:"bytes,3,opt,name=page_info,json=pageInfo,proto3" json:"page_info,omitempty" db:"page_info,omitempty" url:"page_info,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *ListAccountsReply) Reset()         { *m = ListAccountsReply{} }
func (m *ListAccountsReply) String() string { return proto.CompactTextString(m) }
func (*ListAccountsReply) ProtoMessage()    {}
func (*ListAccountsReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_bff3a4753709c6f2, []int{17}
}
func (m *ListAccountsReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListAccountsReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListAccountsReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListAccountsReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListAccountsReply.Merge(m, src)
}
func (m *ListAccountsReply) XXX_Size() int {
	return m.Size()
}
func (m *ListAccountsReply) XXX_DiscardUnknown() {
	xxx_messageInfo_ListAccountsReply.DiscardUnknown(m)
}

var xxx_messageInfo_ListAccountsReply proto.InternalMessageInfo

func (m *ListAccountsReply) GetAccounts() []*Account {
	if m != nil {
		return m.Accounts
	}
	return nil
}

func (m *ListAccountsReply) GetError() *Error {
	if m != nil {
		return m.Error
	}
	return nil
}

func (m *ListAccountsReply) GetPageInfo() *PageInfo {
	if m != nil {
		return m.PageInfo
	}
	return nil
}

type Address struct {
	Street1              string   `protobuf:"bytes,1,opt,name=street1,proto3" json:"street1,omitempty" db:"street1,omitempty" url:"street1,omitempty"`
	Street2              string   `protobuf:"bytes,2,opt,name=street2,proto3" json:"street2,omitempty" db:"street2,omitempty" url:"street2,omitempty"`
	City                 string   `protobuf:"bytes,3,opt,name=city,proto3" json:"city,omitempty" db:"city,omitempty" url:"city,omitempty"`
	State                string   `protobuf:"bytes,4,opt,name=state,proto3" json:"state,omitempty" db:"state,omitempty" url:"state,omitempty"`
	Country              string   `protobuf:"bytes,5,opt,name=country,proto3" json:"country,omitempty" db:"country,omitempty" url:"country,omitempty"`
	Zip                  string   `protobuf:"bytes,6,opt,name=zip,proto3" json:"zip,omitempty" db:"zip,omitempty" url:"zip,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Address) Reset()         { *m = Address{} }
func (m *Address) String() string { return proto.CompactTextString(m) }
func (*Address) ProtoMessage()    {}
func (*Address) Descriptor() ([]byte, []int) {
	return fileDescriptor_bff3a4753709c6f2, []int{18}
}
func (m *Address) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Address) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Address.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Address) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Address.Merge(m, src)
}
func (m *Address) XXX_Size() int {
	return m.Size()
}
func (m *Address) XXX_DiscardUnknown() {
	xxx_messageInfo_Address.DiscardUnknown(m)
}

var xxx_messageInfo_Address proto.InternalMessageInfo

func (m *Address) GetStreet1() string {
	if m != nil {
		return m.Street1
	}
	return ""
}

func (m *Address) GetStreet2() string {
	if m != nil {
		return m.Street2
	}
	return ""
}

func (m *Address) GetCity() string {
	if m != nil {
		return m.City
	}
	return ""
}

func (m *Address) GetState() string {
	if m != nil {
		return m.State
	}
	return ""
}

func (m *Address) GetCountry() string {
	if m != nil {
		return m.Country
	}
	return ""
}

func (m *Address) GetZip() string {
	if m != nil {
		return m.Zip
	}
	return ""
}

type Utm struct {
	Source               string   `protobuf:"bytes,1,opt,name=source,proto3" json:"source,omitempty" db:"source,omitempty" url:"source,omitempty"`
	Campaign             string   `protobuf:"bytes,2,opt,name=campaign,proto3" json:"campaign,omitempty" db:"campaign,omitempty" url:"campaign,omitempty"`
	Medium               string   `protobuf:"bytes,3,opt,name=medium,proto3" json:"medium,omitempty" db:"medium,omitempty" url:"medium,omitempty"`
	Partner              string   `protobuf:"bytes,4,opt,name=partner,proto3" json:"partner,omitempty" db:"partner,omitempty" url:"partner,omitempty"`
	Term                 string   `protobuf:"bytes,5,opt,name=term,proto3" json:"term,omitempty" db:"term,omitempty" url:"term,omitempty"`
	Content              string   `protobuf:"bytes,6,opt,name=content,proto3" json:"content,omitempty" db:"content,omitempty" url:"content,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Utm) Reset()         { *m = Utm{} }
func (m *Utm) String() string { return proto.CompactTextString(m) }
func (*Utm) ProtoMessage()    {}
func (*Utm) Descriptor() ([]byte, []int) {
	return fileDescriptor_bff3a4753709c6f2, []int{19}
}
func (m *Utm) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Utm) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Utm.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Utm) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Utm.Merge(m, src)
}
func (m *Utm) XXX_Size() int {
	return m.Size()
}
func (m *Utm) XXX_DiscardUnknown() {
	xxx_messageInfo_Utm.DiscardUnknown(m)
}

var xxx_messageInfo_Utm proto.InternalMessageInfo

func (m *Utm) GetSource() string {
	if m != nil {
		return m.Source
	}
	return ""
}

func (m *Utm) GetCampaign() string {
	if m != nil {
		return m.Campaign
	}
	return ""
}

func (m *Utm) GetMedium() string {
	if m != nil {
		return m.Medium
	}
	return ""
}

func (m *Utm) GetPartner() string {
	if m != nil {
		return m.Partner
	}
	return ""
}

func (m *Utm) GetTerm() string {
	if m != nil {
		return m.Term
	}
	return ""
}

func (m *Utm) GetContent() string {
	if m != nil {
		return m.Content
	}
	return ""
}

// Following fields are required to get the service account
// id, organization_id of the super user making the request.
type GetServiceAccountsRequest struct {
	User                 *User             `protobuf:"bytes,1,opt,name=user,proto3" json:"user,omitempty" db:"user,omitempty" url:"user,omitempty"`
	RequestCarrier       map[string]string `protobuf:"bytes,2,rep,name=request_carrier,json=requestCarrier,proto3" json:"request_carrier,omitempty" redact:"-" db:"request_carrier,omitempty" url:"request_carrier,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	PageInfo             *PageInfo         `protobuf:"bytes,3,opt,name=page_info,json=pageInfo,proto3" json:"page_info,omitempty" db:"page_info,omitempty" url:"page_info,omitempty"`
	Organization         *Organization     `protobuf:"bytes,4,opt,name=organization,proto3" json:"organization,omitempty" db:"organization,omitempty" url:"organization,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *GetServiceAccountsRequest) Reset()         { *m = GetServiceAccountsRequest{} }
func (m *GetServiceAccountsRequest) String() string { return proto.CompactTextString(m) }
func (*GetServiceAccountsRequest) ProtoMessage()    {}
func (*GetServiceAccountsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_bff3a4753709c6f2, []int{20}
}
func (m *GetServiceAccountsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetServiceAccountsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetServiceAccountsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetServiceAccountsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetServiceAccountsRequest.Merge(m, src)
}
func (m *GetServiceAccountsRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetServiceAccountsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetServiceAccountsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetServiceAccountsRequest proto.InternalMessageInfo

func (m *GetServiceAccountsRequest) GetUser() *User {
	if m != nil {
		return m.User
	}
	return nil
}

func (m *GetServiceAccountsRequest) GetRequestCarrier() map[string]string {
	if m != nil {
		return m.RequestCarrier
	}
	return nil
}

func (m *GetServiceAccountsRequest) GetPageInfo() *PageInfo {
	if m != nil {
		return m.PageInfo
	}
	return nil
}

func (m *GetServiceAccountsRequest) GetOrganization() *Organization {
	if m != nil {
		return m.Organization
	}
	return nil
}

// GetServiceAccountsReply contains the requests service account user
type GetServiceAccountsReply struct {
	Users                []*User   `protobuf:"bytes,1,rep,name=users,proto3" json:"users,omitempty" db:"users,omitempty" url:"users,omitempty"`
	Error                *Error    `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty" db:"error,omitempty" url:"error,omitempty"`
	PageInfo             *PageInfo `protobuf:"bytes,3,opt,name=page_info,json=pageInfo,proto3" json:"page_info,omitempty" db:"page_info,omitempty" url:"page_info,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *GetServiceAccountsReply) Reset()         { *m = GetServiceAccountsReply{} }
func (m *GetServiceAccountsReply) String() string { return proto.CompactTextString(m) }
func (*GetServiceAccountsReply) ProtoMessage()    {}
func (*GetServiceAccountsReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_bff3a4753709c6f2, []int{21}
}
func (m *GetServiceAccountsReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetServiceAccountsReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetServiceAccountsReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetServiceAccountsReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetServiceAccountsReply.Merge(m, src)
}
func (m *GetServiceAccountsReply) XXX_Size() int {
	return m.Size()
}
func (m *GetServiceAccountsReply) XXX_DiscardUnknown() {
	xxx_messageInfo_GetServiceAccountsReply.DiscardUnknown(m)
}

var xxx_messageInfo_GetServiceAccountsReply proto.InternalMessageInfo

func (m *GetServiceAccountsReply) GetUsers() []*User {
	if m != nil {
		return m.Users
	}
	return nil
}

func (m *GetServiceAccountsReply) GetError() *Error {
	if m != nil {
		return m.Error
	}
	return nil
}

func (m *GetServiceAccountsReply) GetPageInfo() *PageInfo {
	if m != nil {
		return m.PageInfo
	}
	return nil
}

// Following fields are required to get the service account
// id of the service account.
type GetServiceAccountRequest struct {
	User                 *User             `protobuf:"bytes,1,opt,name=user,proto3" json:"user,omitempty" db:"user,omitempty" url:"user,omitempty"`
	RequestCarrier       map[string]string `protobuf:"bytes,2,rep,name=request_carrier,json=requestCarrier,proto3" json:"request_carrier,omitempty" redact:"-" db:"request_carrier,omitempty" url:"request_carrier,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	IncludeDeactivated   bool              `protobuf:"varint,3,opt,name=include_deactivated,json=includeDeactivated,proto3" json:"include_deactivated,omitempty" db:"include_deactivated,omitempty" url:"include_deactivated,omitempty"`
	Organization         *Organization     `protobuf:"bytes,4,opt,name=organization,proto3" json:"organization,omitempty" db:"organization,omitempty" url:"organization,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *GetServiceAccountRequest) Reset()         { *m = GetServiceAccountRequest{} }
func (m *GetServiceAccountRequest) String() string { return proto.CompactTextString(m) }
func (*GetServiceAccountRequest) ProtoMessage()    {}
func (*GetServiceAccountRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_bff3a4753709c6f2, []int{22}
}
func (m *GetServiceAccountRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetServiceAccountRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetServiceAccountRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetServiceAccountRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetServiceAccountRequest.Merge(m, src)
}
func (m *GetServiceAccountRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetServiceAccountRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetServiceAccountRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetServiceAccountRequest proto.InternalMessageInfo

func (m *GetServiceAccountRequest) GetUser() *User {
	if m != nil {
		return m.User
	}
	return nil
}

func (m *GetServiceAccountRequest) GetRequestCarrier() map[string]string {
	if m != nil {
		return m.RequestCarrier
	}
	return nil
}

func (m *GetServiceAccountRequest) GetIncludeDeactivated() bool {
	if m != nil {
		return m.IncludeDeactivated
	}
	return false
}

func (m *GetServiceAccountRequest) GetOrganization() *Organization {
	if m != nil {
		return m.Organization
	}
	return nil
}

// GetServiceAccountReply contains the requested service account user
type GetServiceAccountReply struct {
	User                 *User    `protobuf:"bytes,1,opt,name=user,proto3" json:"user,omitempty" db:"user,omitempty" url:"user,omitempty"`
	Error                *Error   `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty" db:"error,omitempty" url:"error,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetServiceAccountReply) Reset()         { *m = GetServiceAccountReply{} }
func (m *GetServiceAccountReply) String() string { return proto.CompactTextString(m) }
func (*GetServiceAccountReply) ProtoMessage()    {}
func (*GetServiceAccountReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_bff3a4753709c6f2, []int{23}
}
func (m *GetServiceAccountReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetServiceAccountReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetServiceAccountReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetServiceAccountReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetServiceAccountReply.Merge(m, src)
}
func (m *GetServiceAccountReply) XXX_Size() int {
	return m.Size()
}
func (m *GetServiceAccountReply) XXX_DiscardUnknown() {
	xxx_messageInfo_GetServiceAccountReply.DiscardUnknown(m)
}

var xxx_messageInfo_GetServiceAccountReply proto.InternalMessageInfo

func (m *GetServiceAccountReply) GetUser() *User {
	if m != nil {
		return m.User
	}
	return nil
}

func (m *GetServiceAccountReply) GetError() *Error {
	if m != nil {
		return m.Error
	}
	return nil
}

type Marketplace struct {
	Partner              MarketplacePartner       `protobuf:"varint,1,opt,name=partner,proto3,enum=ccloud.core.MarketplacePartner" json:"partner,omitempty" db:"partner,omitempty" url:"partner,omitempty"`
	CustomerId           string                   `protobuf:"bytes,2,opt,name=customer_id,json=customerId,proto3" json:"customer_id,omitempty" db:"customer_id,omitempty" url:"customer_id,omitempty"`
	CustomerState        MarketplaceCustomerState `protobuf:"varint,3,opt,name=customer_state,json=customerState,proto3,enum=ccloud.org.MarketplaceCustomerState" json:"customer_state,omitempty" db:"customer_state,omitempty" url:"customer_state,omitempty"`
	ConsoleIntegrated    bool                     `protobuf:"varint,4,opt,name=console_integrated,json=consoleIntegrated,proto3" json:"console_integrated,omitempty" db:"console_integrated,omitempty" url:"console_integrated,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                 `json:"-"`
	XXX_unrecognized     []byte                   `json:"-"`
	XXX_sizecache        int32                    `json:"-"`
}

func (m *Marketplace) Reset()         { *m = Marketplace{} }
func (m *Marketplace) String() string { return proto.CompactTextString(m) }
func (*Marketplace) ProtoMessage()    {}
func (*Marketplace) Descriptor() ([]byte, []int) {
	return fileDescriptor_bff3a4753709c6f2, []int{24}
}
func (m *Marketplace) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Marketplace) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Marketplace.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Marketplace) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Marketplace.Merge(m, src)
}
func (m *Marketplace) XXX_Size() int {
	return m.Size()
}
func (m *Marketplace) XXX_DiscardUnknown() {
	xxx_messageInfo_Marketplace.DiscardUnknown(m)
}

var xxx_messageInfo_Marketplace proto.InternalMessageInfo

func (m *Marketplace) GetPartner() MarketplacePartner {
	if m != nil {
		return m.Partner
	}
	return MarketplacePartner_UNKNOWN
}

func (m *Marketplace) GetCustomerId() string {
	if m != nil {
		return m.CustomerId
	}
	return ""
}

func (m *Marketplace) GetCustomerState() MarketplaceCustomerState {
	if m != nil {
		return m.CustomerState
	}
	return MarketplaceCustomerState_CUSTOMER_APPROVAL_PENDING
}

func (m *Marketplace) GetConsoleIntegrated() bool {
	if m != nil {
		return m.ConsoleIntegrated
	}
	return false
}

// *
// Represents the customer-accessible audit log cluster info for the organization
type AuditLog struct {
	ClusterId                string   `protobuf:"bytes,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty" db:"cluster_id,omitempty" url:"cluster_id,omitempty"`
	AccountId                string   `protobuf:"bytes,2,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty" db:"account_id,omitempty" url:"account_id,omitempty"`
	ServiceAccountId         int32    `protobuf:"varint,3,opt,name=service_account_id,json=serviceAccountId,proto3" json:"service_account_id,omitempty" db:"service_account_id,omitempty" url:"service_account_id,omitempty"`
	TopicName                string   `protobuf:"bytes,4,opt,name=topic_name,json=topicName,proto3" json:"topic_name,omitempty" db:"topic_name,omitempty" url:"topic_name,omitempty"`
	ServiceAccountResourceId string   `protobuf:"bytes,5,opt,name=service_account_resource_id,json=serviceAccountResourceId,proto3" json:"service_account_resource_id,omitempty" db:"service_account_resource_id,omitempty" url:"service_account_resource_id,omitempty"`
	XXX_NoUnkeyedLiteral     struct{} `json:"-"`
	XXX_unrecognized         []byte   `json:"-"`
	XXX_sizecache            int32    `json:"-"`
}

func (m *AuditLog) Reset()         { *m = AuditLog{} }
func (m *AuditLog) String() string { return proto.CompactTextString(m) }
func (*AuditLog) ProtoMessage()    {}
func (*AuditLog) Descriptor() ([]byte, []int) {
	return fileDescriptor_bff3a4753709c6f2, []int{25}
}
func (m *AuditLog) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AuditLog) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AuditLog.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AuditLog) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AuditLog.Merge(m, src)
}
func (m *AuditLog) XXX_Size() int {
	return m.Size()
}
func (m *AuditLog) XXX_DiscardUnknown() {
	xxx_messageInfo_AuditLog.DiscardUnknown(m)
}

var xxx_messageInfo_AuditLog proto.InternalMessageInfo

func (m *AuditLog) GetClusterId() string {
	if m != nil {
		return m.ClusterId
	}
	return ""
}

func (m *AuditLog) GetAccountId() string {
	if m != nil {
		return m.AccountId
	}
	return ""
}

func (m *AuditLog) GetServiceAccountId() int32 {
	if m != nil {
		return m.ServiceAccountId
	}
	return 0
}

func (m *AuditLog) GetTopicName() string {
	if m != nil {
		return m.TopicName
	}
	return ""
}

func (m *AuditLog) GetServiceAccountResourceId() string {
	if m != nil {
		return m.ServiceAccountResourceId
	}
	return ""
}

func init() {
	proto.RegisterEnum("ccloud.org.SsoMode", SsoMode_name, SsoMode_value)
	proto.RegisterEnum("ccloud.org.AuthType", AuthType_name, AuthType_value)
	proto.RegisterEnum("ccloud.org.BillingMethod", BillingMethod_name, BillingMethod_value)
	proto.RegisterEnum("ccloud.org.BillingInterval", BillingInterval_name, BillingInterval_value)
	proto.RegisterEnum("ccloud.org.ProductLevel", ProductLevel_name, ProductLevel_value)
	proto.RegisterEnum("ccloud.org.SuspensionStatusType", SuspensionStatusType_name, SuspensionStatusType_value)
	proto.RegisterEnum("ccloud.org.MarketplaceSubscription", MarketplaceSubscription_name, MarketplaceSubscription_value)
	proto.RegisterEnum("ccloud.org.SuspensionEventType", SuspensionEventType_name, SuspensionEventType_value)
	proto.RegisterEnum("ccloud.org.MarketplaceCustomerState", MarketplaceCustomerState_name, MarketplaceCustomerState_value)
	proto.RegisterType((*PageInfo)(nil), "ccloud.org.PageInfo")
	proto.RegisterType((*Sso)(nil), "ccloud.org.Sso")
	proto.RegisterType((*User)(nil), "ccloud.org.User")
	proto.RegisterMapType((map[string]string)(nil), "ccloud.org.User.PreferencesEntry")
	proto.RegisterType((*Account)(nil), "ccloud.org.Account")
	proto.RegisterType((*AccountConfig)(nil), "ccloud.org.AccountConfig")
	proto.RegisterType((*Plan)(nil), "ccloud.org.Plan")
	proto.RegisterType((*Plan_Product)(nil), "ccloud.org.Plan.Product")
	proto.RegisterType((*Plan_Billing)(nil), "ccloud.org.Plan.Billing")
	proto.RegisterType((*Saml)(nil), "ccloud.org.Saml")
	proto.RegisterType((*Organization)(nil), "ccloud.org.Organization")
	proto.RegisterType((*SuspensionStatus)(nil), "ccloud.org.SuspensionStatus")
	proto.RegisterType((*MarketplaceCreds)(nil), "ccloud.org.MarketplaceCreds")
	proto.RegisterType((*SignupRequest)(nil), "ccloud.org.SignupRequest")
	proto.RegisterMapType((map[string]string)(nil), "ccloud.org.SignupRequest.RequestCarrierEntry")
	proto.RegisterType((*Credentials)(nil), "ccloud.org.Credentials")
	proto.RegisterType((*SignupReply)(nil), "ccloud.org.SignupReply")
	proto.RegisterType((*GetUsersReply)(nil), "ccloud.org.GetUsersReply")
	proto.RegisterType((*CreateAccountRequest)(nil), "ccloud.org.CreateAccountRequest")
	proto.RegisterMapType((map[string]string)(nil), "ccloud.org.CreateAccountRequest.RequestCarrierEntry")
	proto.RegisterType((*CreateAccountReply)(nil), "ccloud.org.CreateAccountReply")
	proto.RegisterType((*GetAccountReply)(nil), "ccloud.org.GetAccountReply")
	proto.RegisterType((*ListAccountsReply)(nil), "ccloud.org.ListAccountsReply")
	proto.RegisterType((*Address)(nil), "ccloud.org.Address")
	proto.RegisterType((*Utm)(nil), "ccloud.org.Utm")
	proto.RegisterType((*GetServiceAccountsRequest)(nil), "ccloud.org.GetServiceAccountsRequest")
	proto.RegisterMapType((map[string]string)(nil), "ccloud.org.GetServiceAccountsRequest.RequestCarrierEntry")
	proto.RegisterType((*GetServiceAccountsReply)(nil), "ccloud.org.GetServiceAccountsReply")
	proto.RegisterType((*GetServiceAccountRequest)(nil), "ccloud.org.GetServiceAccountRequest")
	proto.RegisterMapType((map[string]string)(nil), "ccloud.org.GetServiceAccountRequest.RequestCarrierEntry")
	proto.RegisterType((*GetServiceAccountReply)(nil), "ccloud.org.GetServiceAccountReply")
	proto.RegisterType((*Marketplace)(nil), "ccloud.org.Marketplace")
	proto.RegisterType((*AuditLog)(nil), "ccloud.org.AuditLog")
}

func init() { proto.RegisterFile("org/org.proto", fileDescriptor_bff3a4753709c6f2) }

var fileDescriptor_bff3a4753709c6f2 = []byte{
	// 4505 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x5b, 0xcd, 0x8f, 0x1b, 0x47,
	0x76, 0x77, 0x93, 0x9c, 0x21, 0x59, 0x9c, 0x8f, 0x9e, 0x1a, 0xd9, 0xa2, 0xe5, 0x8d, 0xa8, 0x30,
	0x8b, 0x85, 0x30, 0xb6, 0x46, 0xb6, 0xe2, 0x18, 0x5a, 0xad, 0xb1, 0x31, 0xc9, 0x69, 0x49, 0x94,
	0x39, 0x24, 0x53, 0xe4, 0xc8, 0xf6, 0x7a, 0x81, 0xde, 0x9e, 0xee, 0x1a, 0x4e, 0x5b, 0x4d, 0x36,
	0xb7, 0xbb, 0x39, 0xd2, 0x68, 0x11, 0x04, 0xd8, 0x1c, 0x02, 0x04, 0xc8, 0x21, 0x08, 0x10, 0x20,
	0x0b, 0x04, 0xc8, 0x75, 0x93, 0x20, 0x08, 0x82, 0xdd, 0x20, 0x01, 0x82, 0x04, 0xc9, 0x21, 0x1f,
	0x40, 0x12, 0x6c, 0x2e, 0xc9, 0x8d, 0x08, 0xfc, 0x17, 0x04, 0x0c, 0x72, 0xd8, 0x3d, 0x05, 0x55,
	0x5d, 0xdd, 0x5d, 0xdd, 0x55, 0xe4, 0x18, 0x89, 0x24, 0x1b, 0x8b, 0xbd, 0x48, 0xc3, 0xf7, 0x7b,
	0xf5, 0x5e, 0x7d, 0xbc, 0x7a, 0xf5, 0xea, 0xd5, 0x6b, 0xb0, 0xe9, 0x7a, 0xa3, 0x9b, 0xae, 0x37,
	0xda, 0x9f, 0x7a, 0x6e, 0xe0, 0x42, 0x60, 0x9a, 0x8e, 0x3b, 0xb3, 0xf6, 0x5d, 0x6f, 0x74, 0xe5,
	0xd2, 0xc8, 0x1d, 0xb9, 0x94, 0x7c, 0x93, 0xfc, 0x15, 0x72, 0x5c, 0xa9, 0x8d, 0x5c, 0x77, 0xe4,
	0xe0, 0x9b, 0xf4, 0xd7, 0xf1, 0xec, 0xe4, 0x66, 0x60, 0x8f, 0xb1, 0x1f, 0x18, 0xe3, 0x29, 0x63,
	0xb8, 0x9a, 0x65, 0x78, 0xec, 0x19, 0xd3, 0x29, 0xf6, 0x7c, 0x86, 0x5f, 0x3e, 0x33, 0x1c, 0xdb,
	0x32, 0x02, 0x7c, 0x33, 0xfa, 0x83, 0x01, 0xdb, 0xa6, 0xeb, 0xe1, 0x9b, 0xe4, 0x1f, 0x46, 0x50,
	0x29, 0x01, 0x7b, 0x9e, 0xeb, 0x31, 0xca, 0x86, 0x8f, 0x83, 0x00, 0x47, 0xbf, 0xca, 0xfe, 0xb7,
	0x9d, 0xf0, 0xcf, 0xfa, 0x5f, 0x28, 0xa0, 0xd4, 0x37, 0x46, 0xb8, 0x3d, 0x39, 0x71, 0xe1, 0x00,
	0x94, 0xa7, 0xc6, 0x08, 0xeb, 0xbe, 0xfd, 0x14, 0x57, 0x95, 0x6b, 0xca, 0xf5, 0xb5, 0xe6, 0x3b,
	0x8b, 0x79, 0xed, 0x96, 0x75, 0x7c, 0xa7, 0x1e, 0x03, 0x6f, 0xb8, 0x63, 0x3b, 0xc0, 0xe3, 0x69,
	0x70, 0x5e, 0xbf, 0x36, 0xf3, 0x1c, 0x39, 0x82, 0x4a, 0x84, 0x3a, 0xb0, 0x9f, 0x62, 0xf8, 0x01,
	0x00, 0x94, 0x23, 0x70, 0x1f, 0xe1, 0x49, 0x35, 0x77, 0x4d, 0xb9, 0x5e, 0x6e, 0xde, 0x5e, 0xcc,
	0x6b, 0x6f, 0xc7, 0x52, 0x29, 0x22, 0x17, 0x9b, 0x85, 0x10, 0xed, 0xe0, 0x90, 0x50, 0xeb, 0xff,
	0x93, 0x07, 0xf9, 0x81, 0xef, 0xc2, 0x0e, 0x28, 0xe2, 0x89, 0x71, 0xec, 0x60, 0x8b, 0xf6, 0xb9,
	0xd4, 0xbc, 0xb5, 0x98, 0xd7, 0xf6, 0x89, 0x74, 0x46, 0x16, 0x44, 0x8b, 0x74, 0x14, 0x89, 0x80,
	0xdf, 0x55, 0xc0, 0xcb, 0xc6, 0x2c, 0x38, 0x7d, 0x53, 0x37, 0xdd, 0xc9, 0x04, 0x9b, 0x81, 0xed,
	0x4e, 0xf4, 0x89, 0x31, 0xc6, 0xac, 0xeb, 0xdd, 0xc5, 0xbc, 0xf6, 0x80, 0x08, 0x97, 0x32, 0x09,
	0xaa, 0x2e, 0xe2, 0x42, 0xbb, 0x94, 0xa3, 0x15, 0x33, 0x74, 0x8d, 0x31, 0x26, 0x0b, 0x11, 0xe0,
	0x89, 0x31, 0x09, 0x74, 0xdb, 0xaa, 0xe6, 0xa9, 0xde, 0x78, 0x21, 0x62, 0x40, 0xd0, 0x25, 0x43,
	0x50, 0x29, 0xa4, 0xb6, 0x2d, 0xa8, 0x83, 0x8d, 0xf1, 0xcc, 0x09, 0x6c, 0x3d, 0xa4, 0x54, 0x0b,
	0x74, 0xb2, 0xde, 0x5d, 0xcc, 0x6b, 0xb7, 0x89, 0x5c, 0x1e, 0x13, 0x44, 0x2f, 0x01, 0x51, 0x85,
	0x02, 0x43, 0x4a, 0x87, 0x47, 0xa0, 0x30, 0x76, 0x2d, 0x5c, 0x2d, 0x5e, 0x53, 0xae, 0x6f, 0xdd,
	0xda, 0xdd, 0x4f, 0xb6, 0xc4, 0xfe, 0xc0, 0x77, 0x0f, 0x5d, 0x0b, 0x37, 0xdf, 0x58, 0xcc, 0x6b,
	0xd7, 0xa9, 0x36, 0xd7, 0x12, 0x27, 0x2b, 0x43, 0x44, 0x54, 0xdc, 0x9d, 0xd2, 0x6f, 0xfe, 0xf8,
	0xf5, 0xc2, 0x27, 0xbe, 0x3b, 0x79, 0x50, 0x28, 0xad, 0xa9, 0xeb, 0xf5, 0x7f, 0xd9, 0x02, 0x85,
	0x23, 0x1f, 0x7b, 0x70, 0x1f, 0xe4, 0x6c, 0x8b, 0xd9, 0xe9, 0xd5, 0xc5, 0xbc, 0x76, 0x85, 0x0a,
	0xb1, 0xad, 0xfa, 0x35, 0xa2, 0x21, 0x3d, 0x0d, 0x39, 0xdb, 0x82, 0x0d, 0xb0, 0x86, 0xc7, 0x86,
	0xed, 0xb0, 0x95, 0x7c, 0xfd, 0x27, 0xcd, 0x82, 0x97, 0xfb, 0x96, 0xb2, 0x98, 0xd7, 0x98, 0x59,
	0x10, 0x30, 0x6c, 0x4c, 0xff, 0xe4, 0xdb, 0x87, 0x2d, 0xe1, 0x21, 0x00, 0x27, 0xb6, 0xe7, 0x07,
	0xa1, 0x45, 0x84, 0x2b, 0xb3, 0xbf, 0x98, 0xd7, 0xf6, 0xa8, 0x80, 0x04, 0x0a, 0xa5, 0x24, 0xbf,
	0x53, 0x26, 0x4c, 0xc9, 0x74, 0x9d, 0xdb, 0xa0, 0xec, 0x18, 0x91, 0xb4, 0x02, 0x95, 0x46, 0x67,
	0x88, 0x4a, 0x8b, 0x91, 0x50, 0x58, 0xfc, 0x33, 0xb5, 0xba, 0x84, 0x4a, 0x45, 0x7d, 0x13, 0x54,
	0x2c, 0x6c, 0x98, 0x81, 0x7d, 0x66, 0x04, 0xd8, 0xa2, 0x6b, 0x50, 0x6a, 0xde, 0x59, 0xcc, 0x6b,
	0xef, 0x90, 0xc6, 0x1c, 0x24, 0xcc, 0xba, 0x1c, 0x43, 0xbc, 0x38, 0xe8, 0x80, 0xd2, 0x19, 0xf6,
	0xec, 0x13, 0x1b, 0x5b, 0xd5, 0xca, 0x35, 0xe5, 0x7a, 0xe5, 0xd6, 0x95, 0xfd, 0xd0, 0x5d, 0xed,
	0x47, 0xee, 0x6a, 0x7f, 0x18, 0xf9, 0xb3, 0xe6, 0xdb, 0x8b, 0x79, 0xed, 0x4d, 0xa2, 0x36, 0x6a,
	0x23, 0xe8, 0x94, 0x00, 0x28, 0xd6, 0x00, 0x4f, 0x41, 0xd1, 0xf4, 0x30, 0x1d, 0x47, 0xe9, 0x42,
	0x65, 0xf1, 0x6e, 0x67, 0x4d, 0x04, 0x5d, 0x22, 0x1d, 0x45, 0xe2, 0xc9, 0xb8, 0xc6, 0xae, 0x15,
	0x8e, 0xab, 0xfc, 0xd9, 0xc7, 0x15, 0xb5, 0x91, 0x59, 0xb0, 0x38, 0xae, 0x88, 0x48, 0x76, 0xa0,
	0x8f, 0xbd, 0x33, 0xdb, 0xc4, 0xe1, 0x8a, 0x6f, 0xd0, 0x15, 0x8f, 0x77, 0x20, 0x8f, 0x09, 0x92,
	0x97, 0x80, 0xa8, 0xc2, 0x00, 0x6a, 0x04, 0xdf, 0x01, 0xbb, 0x11, 0x9f, 0x85, 0x7d, 0xd3, 0xb3,
	0xa7, 0xc4, 0xa5, 0x54, 0x37, 0xa9, 0x9e, 0x07, 0x8b, 0x79, 0xed, 0x2e, 0xaf, 0x87, 0x63, 0x59,
	0xaa, 0x4e, 0xce, 0x83, 0x20, 0xc3, 0x0f, 0x12, 0x18, 0x3e, 0x02, 0xdb, 0x51, 0x2b, 0xc3, 0x34,
	0xdd, 0xd9, 0x24, 0xa8, 0x6e, 0x51, 0x2b, 0x6c, 0x2e, 0xe6, 0xb5, 0xaf, 0xf3, 0x8a, 0x19, 0xbc,
	0x54, 0xa9, 0x88, 0xa3, 0x2d, 0x86, 0x35, 0x42, 0x08, 0xfe, 0x1a, 0xa8, 0x4c, 0x3d, 0x7c, 0x82,
	0x3d, 0x3c, 0x31, 0xb1, 0x5f, 0x55, 0xaf, 0xe5, 0xaf, 0x57, 0x6e, 0xfd, 0x3c, 0xef, 0x72, 0x88,
	0x8b, 0xd8, 0xef, 0x27, 0x3c, 0xda, 0x24, 0xf0, 0xce, 0x93, 0x1d, 0xc1, 0xb5, 0x16, 0x8f, 0x1e,
	0x29, 0x86, 0x78, 0x8d, 0xb0, 0x0f, 0x4a, 0xf6, 0x24, 0xc0, 0xde, 0xc4, 0x70, 0xaa, 0x3b, 0x74,
	0x98, 0xb1, 0x75, 0x44, 0x74, 0x41, 0xae, 0x04, 0x40, 0xb1, 0x14, 0xf8, 0x31, 0xa8, 0x78, 0xd8,
	0x77, 0x67, 0x9e, 0x89, 0x89, 0xdb, 0x87, 0x74, 0xd1, 0xe2, 0xfe, 0x72, 0x90, 0x20, 0x57, 0x8e,
	0x21, 0x10, 0xd1, 0xdb, 0x16, 0xfc, 0x75, 0x05, 0x6c, 0x71, 0x1b, 0x5a, 0x37, 0x82, 0xea, 0xee,
	0x85, 0xf6, 0xfe, 0xde, 0x62, 0x5e, 0x7b, 0x37, 0xe3, 0x3e, 0x74, 0x23, 0x58, 0xe5, 0x41, 0xd2,
	0x30, 0xda, 0xe4, 0xa0, 0x46, 0x00, 0x7d, 0xb0, 0xe3, 0xbb, 0xa6, 0x6d, 0x38, 0xdc, 0x89, 0x58,
	0xbd, 0x44, 0x07, 0x7a, 0x77, 0x31, 0xaf, 0x35, 0xa9, 0x91, 0x64, 0x19, 0x44, 0x33, 0x59, 0xc1,
	0x81, 0xd4, 0x10, 0x4d, 0x0e, 0x54, 0x68, 0x83, 0x32, 0x39, 0x63, 0xf5, 0xe0, 0x7c, 0x8a, 0xab,
	0x2f, 0xd3, 0xb3, 0xe9, 0x12, 0x6f, 0x28, 0x8d, 0x59, 0x70, 0x3a, 0x3c, 0x9f, 0xe2, 0xe4, 0x88,
	0x8d, 0xd9, 0xa5, 0xc7, 0x79, 0x16, 0x41, 0x25, 0x83, 0x49, 0xb8, 0xf2, 0x3d, 0x05, 0xa8, 0x59,
	0x93, 0x83, 0xef, 0x82, 0xfc, 0x23, 0x7c, 0x4e, 0xcf, 0xa9, 0x72, 0x73, 0x6f, 0x31, 0xaf, 0x7d,
	0x85, 0xe8, 0x78, 0x84, 0xcf, 0x05, 0xe9, 0x69, 0x1a, 0x22, 0xcd, 0xe0, 0x01, 0x58, 0x3b, 0x33,
	0x9c, 0x59, 0x14, 0x7e, 0xd0, 0xc3, 0x86, 0xba, 0x56, 0x42, 0x14, 0xfd, 0x6a, 0x86, 0x8a, 0xc2,
	0xc6, 0x77, 0x72, 0xb7, 0x95, 0xf0, 0xf4, 0x7c, 0x50, 0x28, 0xad, 0xab, 0xc5, 0x07, 0x85, 0x12,
	0x50, 0x2b, 0x0f, 0x0a, 0xa5, 0x6d, 0x55, 0xad, 0xff, 0x47, 0x11, 0x14, 0xa3, 0x6d, 0x75, 0x3b,
	0x3e, 0x52, 0xcb, 0xcd, 0xeb, 0x8b, 0x79, 0xed, 0xcb, 0xc2, 0x49, 0xca, 0x2c, 0x59, 0x38, 0x5c,
	0xdf, 0x03, 0x05, 0x2e, 0x4a, 0x8a, 0xcf, 0x79, 0xa9, 0x2f, 0xcb, 0xfa, 0x30, 0xda, 0x92, 0xf8,
	0x0f, 0xd7, 0x1b, 0x19, 0x13, 0xfb, 0xa9, 0x41, 0x23, 0x25, 0xdb, 0xa2, 0x47, 0xe2, 0x5a, 0xe2,
	0x3f, 0x32, 0xb0, 0x20, 0x77, 0x39, 0x8e, 0xb6, 0x78, 0xac, 0x6d, 0x65, 0x8f, 0xcb, 0xb5, 0x67,
	0x7b, 0x5c, 0x72, 0x07, 0xd8, 0xfa, 0x8b, 0x3b, 0xc0, 0x8a, 0xcf, 0xfd, 0x00, 0x33, 0xc1, 0xba,
	0xe9, 0x4e, 0x4e, 0xec, 0x11, 0x3b, 0x97, 0x5f, 0x4d, 0xed, 0xa3, 0xd0, 0x86, 0x5a, 0x94, 0xa1,
	0xf9, 0xe6, 0x62, 0x5e, 0x7b, 0x83, 0x8e, 0x8a, 0xfe, 0x16, 0x07, 0x95, 0x25, 0x23, 0x26, 0x3a,
	0xe5, 0x59, 0xcb, 0xcf, 0xc4, 0xb3, 0x4a, 0x9c, 0x1f, 0x78, 0xf1, 0xce, 0xef, 0x13, 0x6a, 0xdf,
	0x3a, 0xef, 0xe3, 0x2b, 0x74, 0xb3, 0xf0, 0xf6, 0xad, 0xaf, 0xf2, 0xf3, 0xcb, 0x71, 0x44, 0xae,
	0xa3, 0x28, 0x76, 0xf7, 0x0f, 0x0a, 0xa5, 0xbc, 0x5a, 0xa8, 0xff, 0x86, 0x02, 0x36, 0x53, 0xab,
	0x02, 0xcf, 0x00, 0x1c, 0x1b, 0x4f, 0xf4, 0x47, 0xc6, 0xc9, 0x23, 0x43, 0x37, 0x9d, 0x99, 0x1f,
	0x60, 0xcf, 0x67, 0x21, 0xf4, 0xfd, 0xc5, 0xbc, 0x76, 0x40, 0x8d, 0x43, 0xe0, 0x10, 0xcd, 0x64,
	0x15, 0x0b, 0x52, 0xc7, 0xc6, 0x93, 0xf7, 0x09, 0xda, 0x62, 0x60, 0xfd, 0xbf, 0x77, 0x40, 0xa1,
	0xef, 0x18, 0x13, 0x38, 0x05, 0x95, 0xc0, 0x78, 0xa2, 0x1b, 0x96, 0xe5, 0x61, 0x3f, 0xd4, 0x5c,
	0x49, 0x5f, 0x15, 0x1a, 0x21, 0x94, 0x6c, 0x46, 0x8e, 0x5f, 0xbc, 0xf2, 0x48, 0x31, 0x04, 0x02,
	0xe3, 0x09, 0x93, 0x03, 0x7f, 0x15, 0x6c, 0x4e, 0x3d, 0xd7, 0x9a, 0x99, 0x81, 0xee, 0xe0, 0x33,
	0x1c, 0x46, 0xff, 0x5b, 0xb7, 0xaa, 0xbc, 0xce, 0x7e, 0xc8, 0xd0, 0x21, 0x78, 0xf3, 0xeb, 0x8b,
	0x79, 0xed, 0x4e, 0x18, 0x22, 0x70, 0xcd, 0x24, 0x41, 0x82, 0x1c, 0x45, 0x1b, 0x53, 0x4e, 0x1a,
	0x7c, 0x0c, 0x2a, 0x81, 0x47, 0x8e, 0x2b, 0x3f, 0x30, 0xbc, 0x80, 0x5e, 0x19, 0x56, 0xdb, 0x5d,
	0x32, 0xee, 0xa4, 0x99, 0x38, 0x6e, 0x29, 0x86, 0x00, 0xa5, 0x0f, 0x08, 0x19, 0xba, 0xa0, 0x1c,
	0x72, 0xe1, 0x49, 0xe8, 0x48, 0x57, 0xab, 0x4d, 0xee, 0x97, 0x51, 0xa3, 0x25, 0x4a, 0xd3, 0x08,
	0x2a, 0x51, 0xaa, 0x36, 0xb1, 0xa0, 0x0f, 0xc0, 0xd4, 0x31, 0x26, 0x6c, 0xa0, 0x6b, 0x17, 0x6a,
	0x4c, 0x92, 0x00, 0x71, 0x2b, 0x71, 0x92, 0x65, 0x10, 0x2a, 0x13, 0x72, 0x38, 0xca, 0x47, 0xa0,
	0x44, 0x79, 0xc8, 0x20, 0xd7, 0x3f, 0xbb, 0xff, 0x8b, 0xda, 0xc8, 0x15, 0x66, 0x86, 0x58, 0x24,
	0x44, 0x32, 0xc2, 0x13, 0x50, 0x64, 0x6b, 0xcb, 0xfc, 0x5f, 0xda, 0x88, 0x1c, 0x63, 0x12, 0x59,
	0x52, 0xe2, 0xd4, 0x59, 0x83, 0x65, 0xe6, 0x93, 0xd6, 0x13, 0xd2, 0x88, 0x9e, 0x63, 0xdb, 0x71,
	0xec, 0xc9, 0x88, 0x5d, 0x4a, 0x44, 0x3d, 0xcd, 0x10, 0x4f, 0xf4, 0xb0, 0x06, 0x82, 0x1e, 0x91,
	0x8e, 0x22, 0xe1, 0xd0, 0x04, 0x9b, 0x34, 0x58, 0xf1, 0x68, 0x34, 0x65, 0x61, 0xea, 0x15, 0xcb,
	0xc9, 0x06, 0x48, 0x81, 0x92, 0xa8, 0x53, 0x8e, 0xa2, 0x8d, 0x08, 0x69, 0xb9, 0x16, 0x26, 0x66,
	0x61, 0x98, 0x26, 0x9e, 0x06, 0x7a, 0xe0, 0xfa, 0x4b, 0x2f, 0x8f, 0x4d, 0xd7, 0x75, 0x1e, 0x92,
	0x50, 0x25, 0x31, 0x8b, 0xa4, 0x95, 0x18, 0x86, 0xc9, 0x20, 0x54, 0x0e, 0xc9, 0x43, 0xd7, 0x27,
	0x7e, 0xce, 0x70, 0x1c, 0xf7, 0xb1, 0x9e, 0xca, 0x78, 0x6c, 0xd0, 0xd3, 0x24, 0xf6, 0x73, 0x22,
	0x87, 0xa8, 0x68, 0x15, 0x0b, 0x52, 0x29, 0x7c, 0xc8, 0xa5, 0x40, 0x7e, 0x57, 0x01, 0xbb, 0x49,
	0xe7, 0xf4, 0xa9, 0x63, 0x04, 0x27, 0xae, 0x37, 0xa6, 0x37, 0xb0, 0xd5, 0xc3, 0x8e, 0x6f, 0x67,
	0x92, 0xe6, 0x2b, 0xc6, 0x2f, 0xe3, 0x41, 0x3b, 0xf1, 0x44, 0xf4, 0x19, 0x7a, 0xe5, 0xdf, 0x73,
	0xa0, 0xc8, 0x6c, 0x93, 0x4c, 0x8e, 0x87, 0x0d, 0x4b, 0x0f, 0x4e, 0x3d, 0x77, 0x36, 0x3a, 0x9d,
	0xce, 0x02, 0x7d, 0x7c, 0x4c, 0x5d, 0xb1, 0x92, 0x4c, 0x8e, 0xc8, 0x21, 0x31, 0x80, 0x15, 0x2c,
	0x48, 0x25, 0xf0, 0x30, 0x46, 0x0f, 0x8f, 0xe1, 0x53, 0xb0, 0xfb, 0xd8, 0xb3, 0x03, 0x9c, 0x51,
	0x9c, 0xa3, 0x8a, 0xe3, 0xf1, 0x4b, 0x58, 0x04, 0xcd, 0xab, 0x79, 0xd0, 0x0e, 0xc5, 0x53, 0xba,
	0x3f, 0x00, 0xc0, 0x0f, 0x5c, 0xcf, 0x18, 0x61, 0x7d, 0x74, 0x4c, 0xbd, 0xf0, 0x5a, 0x62, 0x69,
	0x09, 0x22, 0xde, 0x35, 0x64, 0x10, 0x2a, 0x33, 0xf2, 0xbd, 0xe3, 0x2b, 0xbf, 0x53, 0x00, 0xc5,
	0x66, 0xbc, 0x9f, 0xd6, 0xc7, 0x38, 0x38, 0x75, 0xc3, 0x08, 0x7a, 0x2b, 0x1d, 0x1e, 0x31, 0xa6,
	0x43, 0xca, 0x90, 0x84, 0x47, 0x61, 0x03, 0xf1, 0x80, 0xcd, 0x92, 0x11, 0x13, 0x0d, 0xc7, 0x2c,
	0x3c, 0x3a, 0x33, 0xa2, 0xa3, 0xec, 0x35, 0x89, 0x9a, 0x36, 0x63, 0xc9, 0xc4, 0x4e, 0x67, 0xcb,
	0x62, 0xa7, 0x33, 0x59, 0xec, 0x74, 0x66, 0x38, 0x74, 0x27, 0x99, 0xa6, 0x37, 0xc3, 0x64, 0xa9,
	0x6d, 0x5f, 0x37, 0xcf, 0x4d, 0x27, 0xcc, 0x7c, 0x15, 0xb8, 0x9d, 0x24, 0x70, 0xc8, 0x4c, 0x76,
	0x39, 0x0b, 0x52, 0x19, 0x3c, 0x3c, 0xb5, 0xfd, 0x16, 0x01, 0x89, 0x5e, 0x3f, 0xf0, 0xec, 0x29,
	0xd6, 0xcd, 0x99, 0x1f, 0xb8, 0x63, 0xec, 0x45, 0x17, 0x82, 0x72, 0xa2, 0x57, 0xe4, 0x90, 0x2c,
	0xe0, 0x0a, 0x16, 0xa4, 0x86, 0x70, 0x8b, 0xa1, 0x6d, 0x8b, 0xdc, 0xb7, 0xc2, 0x24, 0xe1, 0x5a,
	0xfa, 0xbe, 0x95, 0xcd, 0x08, 0x72, 0x29, 0x43, 0x31, 0x4f, 0xf8, 0xa0, 0x50, 0x2a, 0xaa, 0xa5,
	0xfa, 0x0f, 0x15, 0x50, 0x18, 0x18, 0x63, 0xe7, 0x19, 0xa7, 0xa8, 0x75, 0xb0, 0x31, 0xc6, 0x81,
	0x61, 0x19, 0x81, 0xa1, 0xcf, 0xbc, 0x28, 0x9d, 0x99, 0x24, 0x72, 0x39, 0x4c, 0x66, 0x57, 0x32,
	0x10, 0x55, 0x22, 0xe0, 0xc8, 0x73, 0xea, 0x7f, 0xa7, 0x82, 0x8d, 0x1e, 0x77, 0x5f, 0xe2, 0xae,
	0x85, 0x6b, 0x2f, 0xfc, 0x5a, 0x98, 0xb9, 0xa9, 0xe5, 0x9f, 0xed, 0x4d, 0xed, 0xf3, 0x32, 0x33,
	0xee, 0x86, 0xb8, 0xf6, 0xe2, 0x6e, 0x88, 0xeb, 0x2f, 0xe0, 0x86, 0xb8, 0xc9, 0xa2, 0x0b, 0x3d,
	0xdc, 0x46, 0xc5, 0x74, 0x48, 0x91, 0x02, 0x97, 0x05, 0x2b, 0x02, 0x8a, 0x36, 0x18, 0xa2, 0xd1,
	0x2c, 0x3c, 0x02, 0x05, 0x12, 0x92, 0xb1, 0x20, 0x4c, 0xcd, 0x06, 0x47, 0x89, 0x99, 0x11, 0x2e,
	0x69, 0x88, 0x97, 0x32, 0x33, 0x42, 0x20, 0x32, 0x7d, 0x63, 0xec, 0xb0, 0x80, 0x2b, 0x25, 0x93,
	0x6c, 0xe1, 0x44, 0x26, 0xe1, 0x12, 0x97, 0x3f, 0x4d, 0x44, 0x54, 0x16, 0x3c, 0x04, 0x79, 0xdf,
	0x77, 0xd9, 0x5d, 0x73, 0x3b, 0xf3, 0x1e, 0x92, 0xa4, 0x82, 0x7c, 0xdf, 0x15, 0x05, 0xa6, 0x68,
	0x88, 0xc8, 0x81, 0x33, 0x50, 0x19, 0x1b, 0xde, 0x23, 0x1c, 0x4c, 0x1d, 0xc3, 0xc4, 0x2c, 0x94,
	0xba, 0xcc, 0x8b, 0x3d, 0x4c, 0xe0, 0x64, 0x8b, 0x70, 0x6d, 0x24, 0xf7, 0x38, 0x19, 0x86, 0x78,
	0x3d, 0xd9, 0xbc, 0xe4, 0xc6, 0x33, 0xcd, 0x4b, 0x3e, 0x02, 0xdb, 0xa7, 0x86, 0xaf, 0xe3, 0x49,
	0x60, 0x07, 0x0e, 0x1e, 0xe3, 0x49, 0x40, 0x63, 0x25, 0x2e, 0x69, 0x9c, 0x81, 0x05, 0x25, 0xcb,
	0x71, 0xb4, 0x75, 0x6a, 0xf8, 0x5a, 0x02, 0xd1, 0xfc, 0xfb, 0xa9, 0xfb, 0x58, 0x8f, 0x82, 0xeb,
	0xad, 0xf4, 0x0b, 0x18, 0x8f, 0x89, 0x0b, 0x22, 0x07, 0x51, 0x85, 0x00, 0x51, 0x00, 0x40, 0x53,
	0x8d, 0x96, 0x1d, 0xe8, 0x8e, 0x3b, 0xaa, 0x6e, 0xd3, 0xf5, 0xc9, 0xa4, 0x1a, 0x2d, 0x3b, 0xe8,
	0xb8, 0x23, 0x3e, 0xd5, 0xc8, 0xd8, 0x25, 0xa9, 0x46, 0x11, 0x41, 0x25, 0x83, 0x49, 0x80, 0x36,
	0x20, 0xa3, 0xd3, 0x4d, 0x77, 0x3c, 0xb6, 0x03, 0x3a, 0x6f, 0x6a, 0x3c, 0x6f, 0xef, 0x46, 0xf3,
	0x96, 0xa0, 0xd2, 0x69, 0x93, 0xc2, 0x55, 0x05, 0x6d, 0x9e, 0x1a, 0x7e, 0x2b, 0xc6, 0xe0, 0x0f,
	0x14, 0x50, 0xe5, 0x0c, 0x42, 0xf7, 0x67, 0xc7, 0xc9, 0xdb, 0xc2, 0x0e, 0x0d, 0x41, 0x7e, 0x61,
	0x89, 0x15, 0x0e, 0x38, 0xd6, 0xe6, 0x70, 0x31, 0xaf, 0xf5, 0x33, 0x16, 0x99, 0x12, 0xb6, 0xca,
	0x3c, 0x97, 0x31, 0xa2, 0xcb, 0x63, 0xb9, 0x3a, 0x59, 0xd6, 0x07, 0xbe, 0xf8, 0xac, 0xcf, 0x6f,
	0x2b, 0x60, 0xc7, 0x9f, 0xf9, 0x53, 0x3c, 0xf1, 0x6d, 0x97, 0xde, 0x65, 0x83, 0x99, 0xcf, 0x72,
	0xef, 0x5f, 0x4a, 0xb9, 0x84, 0x98, 0x69, 0x40, 0x79, 0xb8, 0x8c, 0x78, 0xb6, 0xb9, 0x68, 0x9c,
	0x2b, 0x38, 0x90, 0xea, 0x67, 0x24, 0x13, 0x27, 0x6d, 0xd9, 0xfe, 0xd4, 0x31, 0xce, 0x75, 0xc7,
	0x38, 0xc6, 0x0e, 0x4b, 0xc1, 0xc7, 0x4e, 0x3a, 0x05, 0x8a, 0x43, 0x5f, 0x82, 0xa2, 0x0d, 0x86,
	0x74, 0x08, 0x50, 0xff, 0xa3, 0x12, 0x50, 0xb3, 0x63, 0x82, 0x53, 0x50, 0x0e, 0x7b, 0x63, 0xb1,
	0x50, 0xe8, 0x33, 0x26, 0x25, 0xe2, 0x46, 0x4b, 0x86, 0x9e, 0x46, 0x50, 0xa2, 0x04, 0x7e, 0x02,
	0xd6, 0xd9, 0x9c, 0x87, 0xc1, 0xf2, 0xb5, 0x55, 0x73, 0x4e, 0x9f, 0x01, 0xe2, 0xd0, 0x7c, 0xd9,
	0x64, 0x0b, 0x33, 0xcc, 0x34, 0xc0, 0x27, 0x00, 0xe0, 0x33, 0x3c, 0x09, 0xc2, 0xa7, 0x86, 0x3c,
	0xd5, 0x57, 0x93, 0xeb, 0xd3, 0x08, 0x1f, 0x55, 0x17, 0xdf, 0x42, 0x92, 0xa6, 0x62, 0x34, 0x28,
	0x83, 0x50, 0x19, 0x47, 0x42, 0xe0, 0x1f, 0x2a, 0xa0, 0xea, 0x9b, 0xa7, 0xd8, 0x9a, 0x39, 0xd8,
	0xd2, 0x33, 0x56, 0x7f, 0x71, 0xf2, 0x27, 0xde, 0x99, 0xcb, 0x64, 0x88, 0x93, 0x70, 0x31, 0x23,
	0x7a, 0x25, 0x66, 0x3a, 0x48, 0x6d, 0x89, 0x0e, 0x28, 0x9e, 0x61, 0x8f, 0xcc, 0x02, 0x8d, 0x7d,
	0xf2, 0x49, 0x7c, 0xc3, 0xc8, 0xb2, 0xe7, 0xe2, 0x0c, 0x1d, 0x45, 0x22, 0x88, 0x31, 0xd3, 0x4a,
	0x17, 0x7d, 0x8c, 0x7d, 0xdf, 0x18, 0x61, 0x1a, 0xe4, 0x70, 0xc6, 0x9c, 0x02, 0xc5, 0x99, 0x5d,
	0x82, 0xa2, 0x0d, 0x8a, 0x1c, 0x86, 0x00, 0xfc, 0x5b, 0x05, 0x5c, 0x4d, 0x86, 0x1c, 0x9d, 0x5f,
	0xbe, 0x6e, 0x61, 0x07, 0xb3, 0x59, 0xbe, 0x38, 0xfb, 0xfe, 0xad, 0xc5, 0xbc, 0xf6, 0xcd, 0xf4,
	0x2c, 0xcb, 0x24, 0xad, 0x98, 0xeb, 0x0b, 0xd8, 0xd1, 0x6b, 0x31, 0x6b, 0x94, 0x0b, 0xf6, 0x0f,
	0x42, 0xc6, 0x46, 0x00, 0xbf, 0xa7, 0x80, 0x4b, 0xd2, 0x9e, 0x5f, 0xfc, 0xc6, 0xde, 0x59, 0xcc,
	0x6b, 0xf7, 0xf9, 0xd3, 0x7e, 0x65, 0x7f, 0x2f, 0xea, 0x25, 0xf4, 0x84, 0xce, 0xd5, 0xff, 0x41,
	0x01, 0x2a, 0x77, 0x6e, 0xb4, 0x3c, 0x6c, 0xf9, 0xe4, 0x2e, 0x16, 0x56, 0x0d, 0x29, 0xe9, 0xbb,
	0x98, 0xbc, 0x60, 0x48, 0xa8, 0x15, 0x0a, 0x1b, 0xc3, 0x31, 0x28, 0x4e, 0x0d, 0x2f, 0x98, 0x60,
	0x8f, 0xb9, 0x80, 0x78, 0x4b, 0xd2, 0x92, 0x29, 0x4e, 0x6b, 0x3f, 0x64, 0xe3, 0x92, 0x77, 0x21,
	0x41, 0x52, 0x9b, 0x94, 0xa5, 0xa3, 0x48, 0x47, 0xfd, 0x47, 0x00, 0x6c, 0x0e, 0xec, 0xd1, 0x64,
	0x36, 0x45, 0xf8, 0xdb, 0x33, 0xec, 0x07, 0xf0, 0x29, 0xd8, 0xe0, 0x5f, 0x9f, 0x98, 0xdf, 0x4b,
	0xe5, 0xf4, 0xf8, 0xdb, 0x56, 0x12, 0x90, 0xf0, 0xad, 0x56, 0x3e, 0x76, 0xa5, 0x0c, 0x97, 0x07,
	0x48, 0x58, 0x3b, 0xf3, 0xd9, 0xc8, 0x33, 0x61, 0xed, 0x91, 0x8f, 0xbd, 0x24, 0xac, 0x25, 0x5c,
	0x82, 0x8e, 0x0c, 0x11, 0x51, 0x59, 0x24, 0x0e, 0x35, 0x3d, 0x6c, 0x91, 0xa0, 0xcb, 0x70, 0x7c,
	0x96, 0xd2, 0x4e, 0xc5, 0xa1, 0xad, 0x04, 0x4e, 0x22, 0x45, 0xae, 0x8d, 0xec, 0x02, 0x23, 0xc1,
	0x10, 0xaf, 0x87, 0x46, 0x6f, 0xe1, 0x2d, 0x2b, 0x34, 0x8a, 0x42, 0xa6, 0x7a, 0x82, 0xc3, 0x96,
	0x5d, 0xcf, 0x04, 0x13, 0xa9, 0x84, 0x00, 0x2d, 0x28, 0x83, 0x1f, 0x02, 0x80, 0x27, 0x01, 0xf6,
	0xa6, 0x9e, 0xed, 0x63, 0xf6, 0x24, 0x98, 0x78, 0xe7, 0x18, 0x91, 0xdc, 0xd5, 0x25, 0x10, 0xe2,
	0x64, 0xc1, 0xef, 0x2b, 0x60, 0xdb, 0x0b, 0xad, 0x41, 0x37, 0x0d, 0xcf, 0xb3, 0xb1, 0x57, 0x5d,
	0xa7, 0x25, 0x0b, 0x37, 0x52, 0xc7, 0x03, 0x6f, 0x36, 0xfb, 0xec, 0xff, 0x56, 0xc8, 0x1f, 0x96,
	0x2f, 0xfc, 0xca, 0x62, 0x5e, 0x6b, 0x7b, 0xd8, 0x32, 0xcc, 0xe0, 0x4e, 0xfd, 0x46, 0x58, 0x18,
	0x94, 0x11, 0x2c, 0xd9, 0x8e, 0xcb, 0xf0, 0xff, 0xfa, 0xc9, 0xeb, 0x0a, 0xda, 0xf2, 0x52, 0x7a,
	0xc8, 0xa5, 0x65, 0x16, 0x8c, 0x99, 0x3b, 0x4b, 0x5d, 0x5a, 0x8e, 0x82, 0x71, 0x72, 0x69, 0x99,
	0x05, 0x62, 0x5a, 0x32, 0x4d, 0x43, 0x44, 0x0e, 0x1c, 0x81, 0x2d, 0xfc, 0xc4, 0xf6, 0x03, 0x72,
	0xad, 0x23, 0xab, 0xe9, 0x53, 0x77, 0x53, 0x4a, 0x02, 0xad, 0x34, 0x2a, 0x4e, 0xee, 0x32, 0x18,
	0x6d, 0x46, 0x50, 0xc6, 0x59, 0x94, 0xff, 0x3f, 0xce, 0x82, 0x84, 0x6b, 0x7c, 0xd4, 0x19, 0x76,
	0x19, 0x88, 0xe1, 0x5a, 0xd6, 0x59, 0x25, 0xe1, 0x9a, 0xd0, 0x7c, 0x65, 0x58, 0x2b, 0x0c, 0x4b,
	0x1d, 0x67, 0xdd, 0xa0, 0x0e, 0x36, 0xe8, 0x1b, 0x9e, 0x77, 0x1e, 0x66, 0xe9, 0x2b, 0x69, 0xc3,
	0xe7, 0x31, 0xc9, 0x33, 0xab, 0x14, 0x44, 0x15, 0x06, 0xb4, 0x5c, 0x0b, 0x5f, 0xf9, 0x7d, 0x05,
	0xec, 0x4a, 0xac, 0xed, 0x8b, 0x52, 0xb9, 0x50, 0xff, 0x2b, 0x05, 0x54, 0x38, 0x97, 0x02, 0xfb,
	0xa0, 0x44, 0x1c, 0x11, 0x4d, 0x2c, 0x85, 0x9d, 0x8b, 0xd3, 0x16, 0x11, 0x5d, 0xea, 0xca, 0x84,
	0xea, 0xb9, 0x88, 0x08, 0x3f, 0x06, 0xa5, 0xa9, 0xe1, 0xfb, 0x8f, 0x5d, 0xcf, 0x62, 0xdd, 0xfd,
	0xe5, 0xc5, 0xbc, 0xf6, 0xb5, 0xcc, 0x4e, 0x8b, 0x58, 0x24, 0xe7, 0x81, 0x00, 0xa0, 0x58, 0x60,
	0xfd, 0x0f, 0xf2, 0xa0, 0x12, 0x6d, 0xed, 0xa9, 0x73, 0x1e, 0xfb, 0x64, 0xe5, 0x19, 0xfa, 0xe4,
	0xec, 0x19, 0x93, 0x7b, 0x81, 0x67, 0x8c, 0x01, 0x8a, 0x51, 0xc1, 0x57, 0x5e, 0xf2, 0x9e, 0x1b,
	0x42, 0xc9, 0xa1, 0xba, 0xac, 0xfa, 0x4b, 0x52, 0xf5, 0x15, 0xc9, 0x85, 0x1f, 0x82, 0x35, 0x1a,
	0x8f, 0xb1, 0x64, 0x19, 0x4c, 0x9d, 0xe0, 0x1a, 0x41, 0xb8, 0x4c, 0x2d, 0xf9, 0x29, 0x0f, 0xf4,
	0xd2, 0x99, 0x5a, 0x42, 0x79, 0x50, 0x28, 0x15, 0xd4, 0xb5, 0xfa, 0x1f, 0xe7, 0xc0, 0xe6, 0x3d,
	0x1c, 0x90, 0xe9, 0xf7, 0xc3, 0x45, 0x7a, 0x08, 0xd6, 0xc8, 0xc4, 0xfa, 0x55, 0x85, 0xfa, 0x69,
	0x71, 0x95, 0x62, 0x7d, 0x94, 0x4d, 0xba, 0x4c, 0xa9, 0x7d, 0x1d, 0x8a, 0x4b, 0x46, 0x92, 0x7b,
	0xc6, 0x23, 0x81, 0x36, 0xab, 0xde, 0xb6, 0x27, 0x27, 0x2e, 0x5b, 0x88, 0x54, 0xf2, 0x21, 0x2a,
	0xf3, 0xce, 0xd4, 0x74, 0x13, 0x76, 0x79, 0xf1, 0x75, 0x06, 0x09, 0x6b, 0xba, 0x89, 0x84, 0xfa,
	0x3f, 0xe7, 0xc1, 0xa5, 0x16, 0xcd, 0x2f, 0xb2, 0xd5, 0x8d, 0x42, 0x1d, 0xce, 0x14, 0x94, 0xe7,
	0x64, 0x0a, 0x7f, 0x2a, 0x39, 0x4b, 0x73, 0x74, 0x8d, 0xde, 0xce, 0x84, 0x20, 0x42, 0xf7, 0x3e,
	0xa7, 0x23, 0xf5, 0x0b, 0xef, 0x5f, 0xff, 0x4d, 0x01, 0x30, 0x33, 0x5f, 0x64, 0x0b, 0xbc, 0x80,
	0xc5, 0x7c, 0x6e, 0xbb, 0xa1, 0xfe, 0xaf, 0x0a, 0xd8, 0xbe, 0x87, 0x83, 0x9f, 0x9e, 0x01, 0xfd,
	0x4d, 0x0e, 0xec, 0x74, 0x6c, 0x3f, 0x1a, 0x11, 0x73, 0x53, 0x18, 0x94, 0x98, 0xea, 0xc8, 0x53,
	0x49, 0xc7, 0x14, 0x9f, 0x8f, 0x11, 0xf3, 0xb2, 0x41, 0xf9, 0xe9, 0x6c, 0x23, 0x23, 0xfe, 0x74,
	0x78, 0xad, 0xbf, 0xcc, 0x83, 0x62, 0x54, 0x15, 0xd4, 0x01, 0x45, 0x3f, 0xf0, 0x30, 0x0e, 0xde,
	0x62, 0xdb, 0x2f, 0x5e, 0x75, 0x46, 0x96, 0x5d, 0x21, 0x32, 0x74, 0x14, 0x89, 0x48, 0xa4, 0xdd,
	0x62, 0x9b, 0x31, 0x23, 0xed, 0xd6, 0x12, 0x69, 0xb7, 0x24, 0xd2, 0x6e, 0xc1, 0xf7, 0x40, 0xc1,
	0xb4, 0x83, 0x73, 0xf6, 0x79, 0x41, 0x1c, 0x0d, 0x10, 0x9a, 0x18, 0xdf, 0xa5, 0x89, 0x88, 0xb6,
	0x24, 0xae, 0xc1, 0x0f, 0x8c, 0x20, 0xfa, 0xa6, 0x20, 0x5e, 0x1a, 0x4a, 0x94, 0x26, 0xb4, 0xd2,
	0xae, 0x81, 0x52, 0xc8, 0xa8, 0x58, 0x94, 0xc8, 0x1e, 0x43, 0x93, 0x77, 0xa8, 0x90, 0xbc, 0x2c,
	0xda, 0x4c, 0xbf, 0x43, 0x85, 0x34, 0xe2, 0xec, 0x9e, 0xda, 0x53, 0x96, 0x9d, 0x89, 0x9d, 0xdd,
	0x53, 0x7b, 0x2a, 0x48, 0x49, 0xd3, 0x10, 0x69, 0x56, 0xff, 0xa7, 0x3c, 0xc8, 0x1f, 0x05, 0x63,
	0x78, 0x1f, 0xac, 0x87, 0xb9, 0x03, 0xb6, 0x6c, 0x49, 0xb2, 0x8e, 0x52, 0x25, 0xb5, 0xc2, 0x19,
	0x32, 0x62, 0xed, 0x49, 0x10, 0x69, 0x1a, 0xe3, 0xa9, 0x61, 0x8f, 0xa2, 0xaf, 0x92, 0xe2, 0x4d,
	0x12, 0xd1, 0xc5, 0xf1, 0x89, 0x00, 0x8a, 0xa5, 0x90, 0xbe, 0x8d, 0xb1, 0x65, 0xcf, 0xc6, 0x6c,
	0xe5, 0xb8, 0x37, 0x7e, 0x42, 0x95, 0xbc, 0xc5, 0x66, 0xc8, 0x88, 0xb5, 0x27, 0x33, 0x1f, 0xa5,
	0x2c, 0x0a, 0xe9, 0x99, 0xff, 0x3f, 0x64, 0x24, 0x88, 0x3d, 0x05, 0xd8, 0x1b, 0xb3, 0x45, 0x8c,
	0xed, 0x89, 0xd0, 0x24, 0xdf, 0x10, 0xa5, 0x4b, 0x49, 0x68, 0xcb, 0xd0, 0x12, 0x26, 0x01, 0x9e,
	0x04, 0x6c, 0xfd, 0x38, 0x4b, 0xa0, 0x64, 0x59, 0x79, 0x67, 0x86, 0x8e, 0x22, 0x11, 0xf5, 0x3f,
	0x59, 0x03, 0xaf, 0xde, 0xc3, 0xc1, 0x20, 0x55, 0xd1, 0xef, 0x47, 0x21, 0xc4, 0xf3, 0x88, 0x8e,
	0x7f, 0xb8, 0x34, 0x66, 0xf8, 0x2a, 0x2f, 0x7f, 0x69, 0xa7, 0x3e, 0xaf, 0xbb, 0xf8, 0x8b, 0x73,
	0x8e, 0xc2, 0x05, 0xa2, 0xf0, 0xe2, 0x2e, 0x10, 0x5f, 0xf8, 0xf8, 0xe8, 0xcf, 0x73, 0xe0, 0xb2,
	0xcc, 0x36, 0x7e, 0x76, 0x4f, 0xb8, 0xe0, 0xc4, 0xfd, 0xeb, 0x35, 0x50, 0x15, 0x26, 0xee, 0x79,
	0x6e, 0xf4, 0x1f, 0x2c, 0xdd, 0xe8, 0xb7, 0x57, 0x6e, 0xf4, 0xcf, 0x79, 0x9f, 0x7f, 0x07, 0xec,
	0xda, 0x13, 0xd3, 0x99, 0x59, 0x58, 0x17, 0x6b, 0x5d, 0xe2, 0xca, 0x38, 0x09, 0x8b, 0xa4, 0x98,
	0x6b, 0x15, 0x0f, 0x82, 0x0c, 0xe7, 0x1e, 0x64, 0x7e, 0xb6, 0xf3, 0x57, 0xec, 0xfc, 0xbf, 0x57,
	0xc0, 0x2b, 0x12, 0x63, 0x79, 0x5e, 0x59, 0x9c, 0xe7, 0x77, 0x7b, 0xf8, 0x34, 0x0f, 0x2a, 0x5c,
	0xca, 0x92, 0x7f, 0x14, 0x51, 0x9e, 0xff, 0xa3, 0x08, 0xfc, 0x18, 0x54, 0xf8, 0xfa, 0xaa, 0x5c,
	0xba, 0x86, 0x64, 0x55, 0x61, 0xd5, 0x92, 0x8a, 0x2a, 0x60, 0x26, 0xb5, 0x54, 0xbf, 0xa5, 0x80,
	0xad, 0x98, 0x2d, 0x8c, 0x7b, 0xc3, 0xb7, 0xd7, 0x2f, 0x2f, 0x4b, 0xd8, 0x32, 0xe6, 0x01, 0xe1,
	0x4d, 0x32, 0xd1, 0x69, 0x19, 0xcb, 0x7b, 0x22, 0xc4, 0xcb, 0x9b, 0x26, 0x2f, 0x10, 0x3e, 0x06,
	0xd0, 0x74, 0x27, 0xbe, 0xeb, 0x10, 0xd7, 0x18, 0xe0, 0x91, 0x47, 0x37, 0x73, 0x21, 0x5d, 0x7c,
	0x2c, 0x72, 0xc8, 0x62, 0xa8, 0xe5, 0x2c, 0x68, 0x87, 0xc1, 0xed, 0x18, 0xad, 0x7f, 0xbf, 0x00,
	0x4a, 0x51, 0x89, 0x09, 0xfc, 0x00, 0x00, 0xf6, 0x6d, 0x86, 0x1e, 0x7f, 0xd2, 0x15, 0xbf, 0x66,
	0x24, 0x88, 0xa8, 0x55, 0x06, 0xa1, 0x32, 0x23, 0xb7, 0x2d, 0x22, 0x98, 0xdd, 0x0b, 0x93, 0xa5,
	0xe4, 0x8b, 0xb6, 0x19, 0xb2, 0xec, 0x86, 0x99, 0x15, 0xcc, 0xc8, 0xed, 0xb0, 0x16, 0x2f, 0xfd,
	0x05, 0x68, 0xf4, 0xf9, 0x3b, 0xf7, 0x71, 0x8a, 0xc8, 0x71, 0xd1, 0x67, 0xa4, 0x42, 0x2d, 0x5e,
	0x6a, 0x33, 0x87, 0x03, 0x0a, 0xdc, 0xa9, 0x6d, 0xf2, 0x9f, 0x61, 0xc7, 0x03, 0x4a, 0x10, 0xc9,
	0x1b, 0x82, 0x04, 0x42, 0x65, 0x4a, 0xa6, 0x9f, 0xe3, 0xfe, 0x9e, 0x02, 0x5e, 0xcb, 0x76, 0x86,
	0x2f, 0xa5, 0x0a, 0x03, 0xf2, 0x6f, 0x2c, 0xe6, 0xb5, 0x87, 0xb2, 0xa1, 0xad, 0x2a, 0xad, 0xfa,
	0x6c, 0xbc, 0xa8, 0xea, 0x67, 0x3c, 0x57, 0x54, 0x78, 0xb5, 0xf7, 0x00, 0x14, 0xd9, 0x47, 0xf9,
	0xf0, 0x12, 0x50, 0x07, 0x83, 0x9e, 0x7e, 0xd8, 0x3b, 0xd0, 0xf4, 0xa3, 0xee, 0xfb, 0xdd, 0xde,
	0x07, 0x5d, 0xf5, 0x25, 0x78, 0x19, 0xec, 0xc6, 0x54, 0xa4, 0x0d, 0x86, 0xa8, 0xdd, 0x1a, 0x6a,
	0x07, 0xaa, 0x02, 0x55, 0xb0, 0x11, 0x03, 0x9d, 0xc6, 0x87, 0x6a, 0x6e, 0xaf, 0x47, 0xcc, 0x2e,
	0xfc, 0x04, 0x12, 0xbe, 0x0c, 0x76, 0x1a, 0x47, 0xc3, 0xfb, 0xfa, 0xf0, 0xa3, 0x3e, 0x2f, 0x6d,
	0x17, 0x6c, 0x27, 0xe4, 0x4e, 0xaf, 0xd5, 0xe8, 0xa8, 0x0a, 0xdc, 0x01, 0x9b, 0x09, 0x71, 0x30,
	0xe8, 0xa9, 0xb9, 0x7a, 0xa1, 0x94, 0x57, 0xf3, 0x7b, 0x47, 0x60, 0x33, 0x55, 0x2e, 0x0d, 0x01,
	0x58, 0x27, 0x3d, 0xe8, 0x6b, 0xea, 0x4b, 0xe4, 0xef, 0xc3, 0x46, 0xf7, 0x88, 0x4a, 0x28, 0x82,
	0xfc, 0xbd, 0x56, 0x5f, 0xcd, 0xc1, 0x12, 0x28, 0x0c, 0xde, 0x6f, 0xf7, 0xd5, 0x3c, 0xdc, 0x06,
	0x95, 0xc3, 0x06, 0x7a, 0x5f, 0x1b, 0xf6, 0x3b, 0x8d, 0x96, 0xa6, 0x16, 0x08, 0xd4, 0xed, 0x75,
	0x35, 0x75, 0x6d, 0xef, 0x0d, 0xb0, 0x9d, 0x29, 0x8f, 0x86, 0x15, 0x50, 0x3c, 0xec, 0x75, 0x87,
	0xf7, 0x3b, 0x1f, 0xa9, 0x2f, 0xc1, 0x0d, 0x50, 0x6a, 0x74, 0x89, 0xe4, 0xce, 0x47, 0xaa, 0xb2,
	0x77, 0x00, 0x36, 0xf8, 0xef, 0x82, 0xe0, 0x26, 0x28, 0x1f, 0x68, 0x0f, 0xb5, 0x4e, 0xaf, 0xaf,
	0x21, 0xf5, 0x25, 0x22, 0x76, 0xa8, 0x35, 0x0e, 0x55, 0x05, 0x6e, 0x01, 0xa0, 0x75, 0x87, 0x1a,
	0xea, 0xa3, 0xf6, 0x40, 0x53, 0x73, 0x44, 0xe6, 0x51, 0xb7, 0x7d, 0xb7, 0xad, 0x1d, 0xa8, 0xf9,
	0xbd, 0x3f, 0x53, 0xc0, 0x25, 0x59, 0x99, 0x09, 0x7c, 0x05, 0xc0, 0xc1, 0xd1, 0xa0, 0xaf, 0x75,
	0x07, 0xed, 0x5e, 0x97, 0x9b, 0xa9, 0x2b, 0xe0, 0x15, 0x8e, 0xde, 0xee, 0xea, 0x7d, 0xd4, 0xbb,
	0x87, 0xb4, 0xc1, 0x40, 0x55, 0x60, 0x15, 0x5c, 0xe2, 0xb0, 0x56, 0xef, 0xb0, 0xdf, 0xd1, 0xc8,
	0xa2, 0xe4, 0xe0, 0x97, 0x40, 0xf5, 0xa8, 0xbb, 0xa4, 0x5d, 0x9e, 0x2c, 0x0a, 0x87, 0xdd, 0x6d,
	0xb4, 0x3b, 0xda, 0x81, 0x5a, 0x20, 0x4b, 0x9c, 0x6a, 0xc4, 0x80, 0xb5, 0x3d, 0x13, 0x5c, 0x5e,
	0x52, 0xc4, 0x15, 0x8a, 0x6a, 0x0e, 0x5a, 0xa8, 0xdd, 0x1f, 0x92, 0x36, 0x74, 0x6a, 0x5f, 0x0a,
	0x7b, 0xc6, 0x91, 0xfb, 0x5a, 0xf7, 0xa0, 0xdd, 0xbd, 0xa7, 0x2a, 0xd4, 0x8e, 0x78, 0xa4, 0xd1,
	0x1a, 0xb6, 0x1f, 0x6a, 0x6a, 0x6e, 0xef, 0xc7, 0x39, 0xb0, 0x2b, 0x29, 0x88, 0x21, 0x43, 0xe1,
	0xfa, 0xa4, 0x3d, 0xd4, 0xba, 0x43, 0x6e, 0x7a, 0xbe, 0x02, 0xea, 0x02, 0xaa, 0x75, 0x0f, 0xf4,
	0xde, 0x5d, 0xfd, 0x2e, 0xd2, 0x34, 0x7d, 0x88, 0xda, 0xd4, 0x32, 0x6e, 0x83, 0xb7, 0x05, 0xbe,
	0xd6, 0xd1, 0x60, 0xd8, 0x3b, 0xd4, 0x90, 0xde, 0xee, 0xb6, 0x87, 0xed, 0xc6, 0x50, 0x3b, 0xd0,
	0x7b, 0xe8, 0x9e, 0x7e, 0xa0, 0xd1, 0x3e, 0x35, 0x48, 0xf7, 0xd4, 0x1c, 0xfc, 0x2a, 0xf8, 0x25,
	0xa1, 0x25, 0x67, 0x51, 0xba, 0xd6, 0x1d, 0xb6, 0x87, 0x1d, 0xed, 0x90, 0x4a, 0x6c, 0x74, 0x5b,
	0x5a, 0xa7, 0x13, 0x36, 0xcd, 0xc3, 0x1a, 0x78, 0x4d, 0x68, 0xda, 0xed, 0xe9, 0xfd, 0xc6, 0x47,
	0x84, 0x5b, 0x2d, 0xc0, 0x9b, 0xe0, 0x75, 0x81, 0x61, 0xa0, 0xb5, 0x8e, 0x50, 0x7b, 0xf8, 0x91,
	0xde, 0xee, 0xb6, 0xda, 0x07, 0x84, 0xd2, 0x43, 0x7a, 0xa3, 0x79, 0x34, 0xd0, 0xd4, 0x35, 0xf8,
	0x1a, 0xb8, 0x2c, 0x34, 0xe8, 0x0d, 0xef, 0x6b, 0x68, 0xa0, 0xae, 0x4b, 0xc7, 0xd8, 0x26, 0x96,
	0xd8, 0x6d, 0x74, 0x56, 0x8d, 0xb1, 0xb8, 0xf7, 0x5d, 0x05, 0x54, 0x97, 0x1d, 0x88, 0xf0, 0xe7,
	0xc0, 0xab, 0xf1, 0x4c, 0x35, 0xfa, 0x7d, 0xd4, 0x7b, 0xd8, 0xe8, 0xc4, 0x0b, 0x4a, 0x0d, 0x54,
	0x84, 0x07, 0x64, 0x7c, 0x0a, 0xb1, 0x8e, 0x0c, 0x46, 0xad, 0xf3, 0x12, 0x50, 0x63, 0xf2, 0x81,
	0x16, 0xda, 0x6c, 0xbe, 0x39, 0xfd, 0xc7, 0x4f, 0xaf, 0x2a, 0x3f, 0xfa, 0xf4, 0xaa, 0xf2, 0x9f,
	0x9f, 0x5e, 0x55, 0xc0, 0x75, 0xdb, 0xdd, 0x37, 0xdd, 0xc9, 0x89, 0x33, 0xc3, 0x93, 0x60, 0x3f,
	0x3c, 0xb7, 0xe3, 0x52, 0x14, 0xfa, 0xad, 0x21, 0x3d, 0xc6, 0xcf, 0xde, 0xea, 0x2b, 0xdf, 0x78,
	0x67, 0x64, 0x07, 0xa7, 0xb3, 0xe3, 0x7d, 0xd3, 0x1d, 0xdf, 0x8c, 0xdb, 0xd8, 0x13, 0xf3, 0x66,
	0x78, 0xde, 0xdf, 0xf0, 0xad, 0x47, 0x37, 0x46, 0xee, 0x8d, 0xb3, 0xb7, 0x6e, 0x4c, 0x67, 0xc7,
	0x8e, 0x6d, 0x7e, 0x2d, 0xa4, 0x1f, 0xaf, 0x53, 0x81, 0xbf, 0xf8, 0xbf, 0x01, 0x00, 0x00, 0xff,
	0xff, 0xea, 0x9f, 0x7d, 0xee, 0xbd, 0x47, 0x00, 0x00,
}

func (m *PageInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PageInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.PageSize != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintOrg(dAtA, i, uint64(m.PageSize))
	}
	if len(m.PageToken) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintOrg(dAtA, i, uint64(len(m.PageToken)))
		i += copy(dAtA[i:], m.PageToken)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *Sso) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Sso) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Enabled {
		dAtA[i] = 0x8
		i++
		if m.Enabled {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.Auth0ConnectionName) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintOrg(dAtA, i, uint64(len(m.Auth0ConnectionName)))
		i += copy(dAtA[i:], m.Auth0ConnectionName)
	}
	if len(m.TenantId) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintOrg(dAtA, i, uint64(len(m.TenantId)))
		i += copy(dAtA[i:], m.TenantId)
	}
	if m.MultiTenant {
		dAtA[i] = 0x20
		i++
		if m.MultiTenant {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Mode != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintOrg(dAtA, i, uint64(m.Mode))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *User) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *User) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintOrg(dAtA, i, uint64(m.Id))
	}
	if len(m.Email) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintOrg(dAtA, i, uint64(len(m.Email)))
		i += copy(dAtA[i:], m.Email)
	}
	if len(m.FirstName) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintOrg(dAtA, i, uint64(len(m.FirstName)))
		i += copy(dAtA[i:], m.FirstName)
	}
	if len(m.LastName) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintOrg(dAtA, i, uint64(len(m.LastName)))
		i += copy(dAtA[i:], m.LastName)
	}
	if m.Deactivated {
		dAtA[i] = 0x38
		i++
		if m.Deactivated {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Created != nil {
		dAtA[i] = 0x42
		i++
		i = encodeVarintOrg(dAtA, i, uint64(m.Created.Size()))
		n1, err := m.Created.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if m.Modified != nil {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintOrg(dAtA, i, uint64(m.Modified.Size()))
		n2, err := m.Modified.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	if m.Verified != nil {
		dAtA[i] = 0x5a
		i++
		i = encodeVarintOrg(dAtA, i, uint64(m.Verified.Size()))
		n3, err := m.Verified.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	if len(m.ServiceName) > 0 {
		dAtA[i] = 0x62
		i++
		i = encodeVarintOrg(dAtA, i, uint64(len(m.ServiceName)))
		i += copy(dAtA[i:], m.ServiceName)
	}
	if len(m.ServiceDescription) > 0 {
		dAtA[i] = 0x6a
		i++
		i = encodeVarintOrg(dAtA, i, uint64(len(m.ServiceDescription)))
		i += copy(dAtA[i:], m.ServiceDescription)
	}
	if m.ServiceAccount {
		dAtA[i] = 0x70
		i++
		if m.ServiceAccount {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.Preferences) > 0 {
		for k, _ := range m.Preferences {
			dAtA[i] = 0x82
			i++
			dAtA[i] = 0x1
			i++
			v := m.Preferences[k]
			mapSize := 1 + len(k) + sovOrg(uint64(len(k))) + 1 + len(v) + sovOrg(uint64(len(v)))
			i = encodeVarintOrg(dAtA, i, uint64(mapSize))
			dAtA[i] = 0xa
			i++
			i = encodeVarintOrg(dAtA, i, uint64(len(k)))
			i += copy(dAtA[i:], k)
			dAtA[i] = 0x12
			i++
			i = encodeVarintOrg(dAtA, i, uint64(len(v)))
			i += copy(dAtA[i:], v)
		}
	}
	if m.Internal {
		dAtA[i] = 0x88
		i++
		dAtA[i] = 0x1
		i++
		if m.Internal {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.ResourceId) > 0 {
		dAtA[i] = 0x92
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintOrg(dAtA, i, uint64(len(m.ResourceId)))
		i += copy(dAtA[i:], m.ResourceId)
	}
	if m.DeactivatedAt != nil {
		dAtA[i] = 0x9a
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintOrg(dAtA, i, uint64(m.DeactivatedAt.Size()))
		n4, err := m.DeactivatedAt.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	if len(m.SocialConnection) > 0 {
		dAtA[i] = 0xa2
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintOrg(dAtA, i, uint64(len(m.SocialConnection)))
		i += copy(dAtA[i:], m.SocialConnection)
	}
	if m.AuthType != 0 {
		dAtA[i] = 0xa8
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintOrg(dAtA, i, uint64(m.AuthType))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *Account) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Account) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintOrg(dAtA, i, uint64(len(m.Id)))
		i += copy(dAtA[i:], m.Id)
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintOrg(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if m.OrganizationId != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintOrg(dAtA, i, uint64(m.OrganizationId))
	}
	if m.Deactivated {
		dAtA[i] = 0x28
		i++
		if m.Deactivated {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Created != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintOrg(dAtA, i, uint64(m.Created.Size()))
		n5, err := m.Created.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	if m.Modified != nil {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintOrg(dAtA, i, uint64(m.Modified.Size()))
		n6, err := m.Modified.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n6
	}
	if m.Config != nil {
		dAtA[i] = 0x42
		i++
		i = encodeVarintOrg(dAtA, i, uint64(m.Config.Size()))
		n7, err := m.Config.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n7
	}
	if m.Internal {
		dAtA[i] = 0x48
		i++
		if m.Internal {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.DeactivatedAt != nil {
		dAtA[i] = 0x52
		i++
		i = encodeVarintOrg(dAtA, i, uint64(m.DeactivatedAt.Size()))
		n8, err := m.DeactivatedAt.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n8
	}
	if len(m.OrgResourceId) > 0 {
		dAtA[i] = 0x5a
		i++
		i = encodeVarintOrg(dAtA, i, uint64(len(m.OrgResourceId)))
		i += copy(dAtA[i:], m.OrgResourceId)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *AccountConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AccountConfig) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.MaxKafkaClusters != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintOrg(dAtA, i, uint64(m.MaxKafkaClusters))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *Plan) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Plan) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.TaxAddress != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintOrg(dAtA, i, uint64(m.TaxAddress.Size()))
		n9, err := m.TaxAddress.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n9
	}
	if m.ProductLevel != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintOrg(dAtA, i, uint64(m.ProductLevel))
	}
	if m.TrialStart != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintOrg(dAtA, i, uint64(m.TrialStart.Size()))
		n10, err := m.TrialStart.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n10
	}
	if m.TrialEnd != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintOrg(dAtA, i, uint64(m.TrialEnd.Size()))
		n11, err := m.TrialEnd.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n11
	}
	if m.PlanStart != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintOrg(dAtA, i, uint64(m.PlanStart.Size()))
		n12, err := m.PlanStart.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n12
	}
	if m.PlanEnd != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintOrg(dAtA, i, uint64(m.PlanEnd.Size()))
		n13, err := m.PlanEnd.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n13
	}
	if m.Product != nil {
		dAtA[i] = 0x42
		i++
		i = encodeVarintOrg(dAtA, i, uint64(m.Product.Size()))
		n14, err := m.Product.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n14
	}
	if m.Billing != nil {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintOrg(dAtA, i, uint64(m.Billing.Size()))
		n15, err := m.Billing.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n15
	}
	if len(m.ReferralCode) > 0 {
		dAtA[i] = 0x52
		i++
		i = encodeVarintOrg(dAtA, i, uint64(len(m.ReferralCode)))
		i += copy(dAtA[i:], m.ReferralCode)
	}
	if m.AcceptTos != nil {
		dAtA[i] = 0x5a
		i++
		i = encodeVarintOrg(dAtA, i, uint64(m.AcceptTos.Size()))
		n16, err := m.AcceptTos.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n16
	}
	if m.AllowMultiTenant {
		dAtA[i] = 0x60
		i++
		if m.AllowMultiTenant {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.AcceptTosPlatform != nil {
		dAtA[i] = 0x6a
		i++
		i = encodeVarintOrg(dAtA, i, uint64(m.AcceptTosPlatform.Size()))
		n17, err := m.AcceptTosPlatform.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n17
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *Plan_Product) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Plan_Product) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ReadThroughputMb != 0 {
		dAtA[i] = 0x9
		i++
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.ReadThroughputMb))))
		i += 8
	}
	if m.WriteThroughputMb != 0 {
		dAtA[i] = 0x11
		i++
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.WriteThroughputMb))))
		i += 8
	}
	if m.StorageGb != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintOrg(dAtA, i, uint64(m.StorageGb))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *Plan_Billing) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Plan_Billing) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Method != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintOrg(dAtA, i, uint64(m.Method))
	}
	if m.Interval != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintOrg(dAtA, i, uint64(m.Interval))
	}
	if m.AccruedThisCycle != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintOrg(dAtA, i, uint64(m.AccruedThisCycle))
	}
	if len(m.StripeCustomerId) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintOrg(dAtA, i, uint64(len(m.StripeCustomerId)))
		i += copy(dAtA[i:], m.StripeCustomerId)
	}
	if len(m.Email) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintOrg(dAtA, i, uint64(len(m.Email)))
		i += copy(dAtA[i:], m.Email)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *Saml) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Saml) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Enabled {
		dAtA[i] = 0x8
		i++
		if m.Enabled {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.MetadataUrl) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintOrg(dAtA, i, uint64(len(m.MetadataUrl)))
		i += copy(dAtA[i:], m.MetadataUrl)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *Organization) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Organization) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintOrg(dAtA, i, uint64(m.Id))
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintOrg(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if m.Deactivated {
		dAtA[i] = 0x18
		i++
		if m.Deactivated {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.StripeCustomerId) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintOrg(dAtA, i, uint64(len(m.StripeCustomerId)))
		i += copy(dAtA[i:], m.StripeCustomerId)
	}
	if m.Created != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintOrg(dAtA, i, uint64(m.Created.Size()))
		n18, err := m.Created.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n18
	}
	if m.Modified != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintOrg(dAtA, i, uint64(m.Modified.Size()))
		n19, err := m.Modified.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n19
	}
	if len(m.BillingEmail) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintOrg(dAtA, i, uint64(len(m.BillingEmail)))
		i += copy(dAtA[i:], m.BillingEmail)
	}
	if m.Plan != nil {
		dAtA[i] = 0x42
		i++
		i = encodeVarintOrg(dAtA, i, uint64(m.Plan.Size()))
		n20, err := m.Plan.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n20
	}
	if m.Saml != nil {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintOrg(dAtA, i, uint64(m.Saml.Size()))
		n21, err := m.Saml.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n21
	}
	if m.Sso != nil {
		dAtA[i] = 0x52
		i++
		i = encodeVarintOrg(dAtA, i, uint64(m.Sso.Size()))
		n22, err := m.Sso.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n22
	}
	if m.Marketplace != nil {
		dAtA[i] = 0x5a
		i++
		i = encodeVarintOrg(dAtA, i, uint64(m.Marketplace.Size()))
		n23, err := m.Marketplace.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n23
	}
	if len(m.ResourceId) > 0 {
		dAtA[i] = 0x62
		i++
		i = encodeVarintOrg(dAtA, i, uint64(len(m.ResourceId)))
		i += copy(dAtA[i:], m.ResourceId)
	}
	if m.HasEntitlement {
		dAtA[i] = 0x68
		i++
		if m.HasEntitlement {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.ShowBilling {
		dAtA[i] = 0x70
		i++
		if m.ShowBilling {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.AuditLog != nil {
		dAtA[i] = 0x7a
		i++
		i = encodeVarintOrg(dAtA, i, uint64(m.AuditLog.Size()))
		n24, err := m.AuditLog.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n24
	}
	if m.HasCommitment {
		dAtA[i] = 0x80
		i++
		dAtA[i] = 0x1
		i++
		if m.HasCommitment {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.MarketplaceSubscription != 0 {
		dAtA[i] = 0x88
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintOrg(dAtA, i, uint64(m.MarketplaceSubscription))
	}
	if m.DeactivatedAt != nil {
		dAtA[i] = 0x92
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintOrg(dAtA, i, uint64(m.DeactivatedAt.Size()))
		n25, err := m.DeactivatedAt.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n25
	}
	if m.SuspensionStatus != nil {
		dAtA[i] = 0x9a
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintOrg(dAtA, i, uint64(m.SuspensionStatus.Size()))
		n26, err := m.SuspensionStatus.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n26
	}
	if len(m.DisplayLabel) > 0 {
		dAtA[i] = 0xa2
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintOrg(dAtA, i, uint64(len(m.DisplayLabel)))
		i += copy(dAtA[i:], m.DisplayLabel)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *SuspensionStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SuspensionStatus) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Suspended != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintOrg(dAtA, i, uint64(m.Suspended.Size()))
		n27, err := m.Suspended.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n27
	}
	if m.Status != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintOrg(dAtA, i, uint64(m.Status))
	}
	if m.EventType != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintOrg(dAtA, i, uint64(m.EventType))
	}
	if m.ScheduledDeactivatedAt != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintOrg(dAtA, i, uint64(m.ScheduledDeactivatedAt.Size()))
		n28, err := m.ScheduledDeactivatedAt.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n28
	}
	if m.Version != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintOrg(dAtA, i, uint64(m.Version))
	}
	if len(m.ErrorMessage) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintOrg(dAtA, i, uint64(len(m.ErrorMessage)))
		i += copy(dAtA[i:], m.ErrorMessage)
	}
	if m.ScheduledResourcesDeletedAt != nil {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintOrg(dAtA, i, uint64(m.ScheduledResourcesDeletedAt.Size()))
		n29, err := m.ScheduledResourcesDeletedAt.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n29
	}
	if m.ResourcesDeletedAt != nil {
		dAtA[i] = 0x42
		i++
		i = encodeVarintOrg(dAtA, i, uint64(m.ResourcesDeletedAt.Size()))
		n30, err := m.ResourcesDeletedAt.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n30
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *SignupRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SignupRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Organization != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintOrg(dAtA, i, uint64(m.Organization.Size()))
		n31, err := m.Organization.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n31
	}
	if m.User != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintOrg(dAtA, i, uint64(m.User.Size()))
		n32, err := m.User.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n32
	}
	if m.Credentials != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintOrg(dAtA, i, uint64(m.Credentials.Size()))
		n33, err := m.Credentials.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n33
	}
	if len(m.StripeToken) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintOrg(dAtA, i, uint64(len(m.StripeToken)))
		i += copy(dAtA[i:], m.StripeToken)
	}
	if m.Enterprise {
		dAtA[i] = 0x28
		i++
		if m.Enterprise {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.RequestCarrier) > 0 {
		for k, _ := range m.RequestCarrier {
			dAtA[i] = 0x32
			i++
			v := m.RequestCarrier[k]
			mapSize := 1 + len(k) + sovOrg(uint64(len(k))) + 1 + len(v) + sovOrg(uint64(len(v)))
			i = encodeVarintOrg(dAtA, i, uint64(mapSize))
			dAtA[i] = 0xa
			i++
			i = encodeVarintOrg(dAtA, i, uint64(len(k)))
			i += copy(dAtA[i:], k)
			dAtA[i] = 0x12
			i++
			i = encodeVarintOrg(dAtA, i, uint64(len(v)))
			i += copy(dAtA[i:], v)
		}
	}
	if m.Utm != nil {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintOrg(dAtA, i, uint64(m.Utm.Size()))
		n34, err := m.Utm.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n34
	}
	if m.ExistingCreds {
		dAtA[i] = 0x40
		i++
		if m.ExistingCreds {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.Token) > 0 {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintOrg(dAtA, i, uint64(len(m.Token)))
		i += copy(dAtA[i:], m.Token)
	}
	if m.MarketplaceCreds != nil {
		dAtA[i] = 0x52
		i++
		i = encodeVarintOrg(dAtA, i, uint64(m.MarketplaceCreds.Size()))
		n35, err := m.MarketplaceCreds.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n35
	}
	if len(m.CountryCode) > 0 {
		dAtA[i] = 0x5a
		i++
		i = encodeVarintOrg(dAtA, i, uint64(len(m.CountryCode)))
		i += copy(dAtA[i:], m.CountryCode)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *SignupReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SignupReply) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.User != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintOrg(dAtA, i, uint64(m.User.Size()))
		n36, err := m.User.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n36
	}
	if m.Organization != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintOrg(dAtA, i, uint64(m.Organization.Size()))
		n37, err := m.Organization.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n37
	}
	if m.Account != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintOrg(dAtA, i, uint64(m.Account.Size()))
		n38, err := m.Account.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n38
	}
	if m.Error != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintOrg(dAtA, i, uint64(m.Error.Size()))
		n39, err := m.Error.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n39
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *GetUsersReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetUsersReply) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Users) > 0 {
		for _, msg := range m.Users {
			dAtA[i] = 0xa
			i++
			i = encodeVarintOrg(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.Error != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintOrg(dAtA, i, uint64(m.Error.Size()))
		n40, err := m.Error.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n40
	}
	if m.PageInfo != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintOrg(dAtA, i, uint64(m.PageInfo.Size()))
		n41, err := m.PageInfo.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n41
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *CreateAccountRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateAccountRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Account != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintOrg(dAtA, i, uint64(m.Account.Size()))
		n42, err := m.Account.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n42
	}
	if len(m.RequestCarrier) > 0 {
		for k, _ := range m.RequestCarrier {
			dAtA[i] = 0x12
			i++
			v := m.RequestCarrier[k]
			mapSize := 1 + len(k) + sovOrg(uint64(len(k))) + 1 + len(v) + sovOrg(uint64(len(v)))
			i = encodeVarintOrg(dAtA, i, uint64(mapSize))
			dAtA[i] = 0xa
			i++
			i = encodeVarintOrg(dAtA, i, uint64(len(k)))
			i += copy(dAtA[i:], k)
			dAtA[i] = 0x12
			i++
			i = encodeVarintOrg(dAtA, i, uint64(len(v)))
			i += copy(dAtA[i:], v)
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *CreateAccountReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateAccountReply) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Account != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintOrg(dAtA, i, uint64(m.Account.Size()))
		n43, err := m.Account.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n43
	}
	if m.Error != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintOrg(dAtA, i, uint64(m.Error.Size()))
		n44, err := m.Error.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n44
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *GetAccountReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetAccountReply) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Account != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintOrg(dAtA, i, uint64(m.Account.Size()))
		n45, err := m.Account.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n45
	}
	if m.Error != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintOrg(dAtA, i, uint64(m.Error.Size()))
		n46, err := m.Error.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n46
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ListAccountsReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListAccountsReply) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Accounts) > 0 {
		for _, msg := range m.Accounts {
			dAtA[i] = 0xa
			i++
			i = encodeVarintOrg(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.Error != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintOrg(dAtA, i, uint64(m.Error.Size()))
		n47, err := m.Error.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n47
	}
	if m.PageInfo != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintOrg(dAtA, i, uint64(m.PageInfo.Size()))
		n48, err := m.PageInfo.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n48
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *Address) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Address) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Street1) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintOrg(dAtA, i, uint64(len(m.Street1)))
		i += copy(dAtA[i:], m.Street1)
	}
	if len(m.Street2) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintOrg(dAtA, i, uint64(len(m.Street2)))
		i += copy(dAtA[i:], m.Street2)
	}
	if len(m.City) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintOrg(dAtA, i, uint64(len(m.City)))
		i += copy(dAtA[i:], m.City)
	}
	if len(m.State) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintOrg(dAtA, i, uint64(len(m.State)))
		i += copy(dAtA[i:], m.State)
	}
	if len(m.Country) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintOrg(dAtA, i, uint64(len(m.Country)))
		i += copy(dAtA[i:], m.Country)
	}
	if len(m.Zip) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintOrg(dAtA, i, uint64(len(m.Zip)))
		i += copy(dAtA[i:], m.Zip)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *Utm) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Utm) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Source) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintOrg(dAtA, i, uint64(len(m.Source)))
		i += copy(dAtA[i:], m.Source)
	}
	if len(m.Campaign) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintOrg(dAtA, i, uint64(len(m.Campaign)))
		i += copy(dAtA[i:], m.Campaign)
	}
	if len(m.Medium) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintOrg(dAtA, i, uint64(len(m.Medium)))
		i += copy(dAtA[i:], m.Medium)
	}
	if len(m.Partner) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintOrg(dAtA, i, uint64(len(m.Partner)))
		i += copy(dAtA[i:], m.Partner)
	}
	if len(m.Term) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintOrg(dAtA, i, uint64(len(m.Term)))
		i += copy(dAtA[i:], m.Term)
	}
	if len(m.Content) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintOrg(dAtA, i, uint64(len(m.Content)))
		i += copy(dAtA[i:], m.Content)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *GetServiceAccountsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetServiceAccountsRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.User != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintOrg(dAtA, i, uint64(m.User.Size()))
		n49, err := m.User.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n49
	}
	if len(m.RequestCarrier) > 0 {
		for k, _ := range m.RequestCarrier {
			dAtA[i] = 0x12
			i++
			v := m.RequestCarrier[k]
			mapSize := 1 + len(k) + sovOrg(uint64(len(k))) + 1 + len(v) + sovOrg(uint64(len(v)))
			i = encodeVarintOrg(dAtA, i, uint64(mapSize))
			dAtA[i] = 0xa
			i++
			i = encodeVarintOrg(dAtA, i, uint64(len(k)))
			i += copy(dAtA[i:], k)
			dAtA[i] = 0x12
			i++
			i = encodeVarintOrg(dAtA, i, uint64(len(v)))
			i += copy(dAtA[i:], v)
		}
	}
	if m.PageInfo != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintOrg(dAtA, i, uint64(m.PageInfo.Size()))
		n50, err := m.PageInfo.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n50
	}
	if m.Organization != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintOrg(dAtA, i, uint64(m.Organization.Size()))
		n51, err := m.Organization.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n51
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *GetServiceAccountsReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetServiceAccountsReply) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Users) > 0 {
		for _, msg := range m.Users {
			dAtA[i] = 0xa
			i++
			i = encodeVarintOrg(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.Error != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintOrg(dAtA, i, uint64(m.Error.Size()))
		n52, err := m.Error.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n52
	}
	if m.PageInfo != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintOrg(dAtA, i, uint64(m.PageInfo.Size()))
		n53, err := m.PageInfo.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n53
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *GetServiceAccountRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetServiceAccountRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.User != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintOrg(dAtA, i, uint64(m.User.Size()))
		n54, err := m.User.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n54
	}
	if len(m.RequestCarrier) > 0 {
		for k, _ := range m.RequestCarrier {
			dAtA[i] = 0x12
			i++
			v := m.RequestCarrier[k]
			mapSize := 1 + len(k) + sovOrg(uint64(len(k))) + 1 + len(v) + sovOrg(uint64(len(v)))
			i = encodeVarintOrg(dAtA, i, uint64(mapSize))
			dAtA[i] = 0xa
			i++
			i = encodeVarintOrg(dAtA, i, uint64(len(k)))
			i += copy(dAtA[i:], k)
			dAtA[i] = 0x12
			i++
			i = encodeVarintOrg(dAtA, i, uint64(len(v)))
			i += copy(dAtA[i:], v)
		}
	}
	if m.IncludeDeactivated {
		dAtA[i] = 0x18
		i++
		if m.IncludeDeactivated {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Organization != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintOrg(dAtA, i, uint64(m.Organization.Size()))
		n55, err := m.Organization.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n55
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *GetServiceAccountReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetServiceAccountReply) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.User != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintOrg(dAtA, i, uint64(m.User.Size()))
		n56, err := m.User.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n56
	}
	if m.Error != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintOrg(dAtA, i, uint64(m.Error.Size()))
		n57, err := m.Error.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n57
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *Marketplace) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Marketplace) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Partner != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintOrg(dAtA, i, uint64(m.Partner))
	}
	if len(m.CustomerId) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintOrg(dAtA, i, uint64(len(m.CustomerId)))
		i += copy(dAtA[i:], m.CustomerId)
	}
	if m.CustomerState != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintOrg(dAtA, i, uint64(m.CustomerState))
	}
	if m.ConsoleIntegrated {
		dAtA[i] = 0x20
		i++
		if m.ConsoleIntegrated {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *AuditLog) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AuditLog) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ClusterId) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintOrg(dAtA, i, uint64(len(m.ClusterId)))
		i += copy(dAtA[i:], m.ClusterId)
	}
	if len(m.AccountId) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintOrg(dAtA, i, uint64(len(m.AccountId)))
		i += copy(dAtA[i:], m.AccountId)
	}
	if m.ServiceAccountId != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintOrg(dAtA, i, uint64(m.ServiceAccountId))
	}
	if len(m.TopicName) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintOrg(dAtA, i, uint64(len(m.TopicName)))
		i += copy(dAtA[i:], m.TopicName)
	}
	if len(m.ServiceAccountResourceId) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintOrg(dAtA, i, uint64(len(m.ServiceAccountResourceId)))
		i += copy(dAtA[i:], m.ServiceAccountResourceId)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func encodeVarintOrg(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *PageInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PageSize != 0 {
		n += 1 + sovOrg(uint64(m.PageSize))
	}
	l = len(m.PageToken)
	if l > 0 {
		n += 1 + l + sovOrg(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Sso) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Enabled {
		n += 2
	}
	l = len(m.Auth0ConnectionName)
	if l > 0 {
		n += 1 + l + sovOrg(uint64(l))
	}
	l = len(m.TenantId)
	if l > 0 {
		n += 1 + l + sovOrg(uint64(l))
	}
	if m.MultiTenant {
		n += 2
	}
	if m.Mode != 0 {
		n += 1 + sovOrg(uint64(m.Mode))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *User) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovOrg(uint64(m.Id))
	}
	l = len(m.Email)
	if l > 0 {
		n += 1 + l + sovOrg(uint64(l))
	}
	l = len(m.FirstName)
	if l > 0 {
		n += 1 + l + sovOrg(uint64(l))
	}
	l = len(m.LastName)
	if l > 0 {
		n += 1 + l + sovOrg(uint64(l))
	}
	if m.Deactivated {
		n += 2
	}
	if m.Created != nil {
		l = m.Created.Size()
		n += 1 + l + sovOrg(uint64(l))
	}
	if m.Modified != nil {
		l = m.Modified.Size()
		n += 1 + l + sovOrg(uint64(l))
	}
	if m.Verified != nil {
		l = m.Verified.Size()
		n += 1 + l + sovOrg(uint64(l))
	}
	l = len(m.ServiceName)
	if l > 0 {
		n += 1 + l + sovOrg(uint64(l))
	}
	l = len(m.ServiceDescription)
	if l > 0 {
		n += 1 + l + sovOrg(uint64(l))
	}
	if m.ServiceAccount {
		n += 2
	}
	if len(m.Preferences) > 0 {
		for k, v := range m.Preferences {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovOrg(uint64(len(k))) + 1 + len(v) + sovOrg(uint64(len(v)))
			n += mapEntrySize + 2 + sovOrg(uint64(mapEntrySize))
		}
	}
	if m.Internal {
		n += 3
	}
	l = len(m.ResourceId)
	if l > 0 {
		n += 2 + l + sovOrg(uint64(l))
	}
	if m.DeactivatedAt != nil {
		l = m.DeactivatedAt.Size()
		n += 2 + l + sovOrg(uint64(l))
	}
	l = len(m.SocialConnection)
	if l > 0 {
		n += 2 + l + sovOrg(uint64(l))
	}
	if m.AuthType != 0 {
		n += 2 + sovOrg(uint64(m.AuthType))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Account) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovOrg(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovOrg(uint64(l))
	}
	if m.OrganizationId != 0 {
		n += 1 + sovOrg(uint64(m.OrganizationId))
	}
	if m.Deactivated {
		n += 2
	}
	if m.Created != nil {
		l = m.Created.Size()
		n += 1 + l + sovOrg(uint64(l))
	}
	if m.Modified != nil {
		l = m.Modified.Size()
		n += 1 + l + sovOrg(uint64(l))
	}
	if m.Config != nil {
		l = m.Config.Size()
		n += 1 + l + sovOrg(uint64(l))
	}
	if m.Internal {
		n += 2
	}
	if m.DeactivatedAt != nil {
		l = m.DeactivatedAt.Size()
		n += 1 + l + sovOrg(uint64(l))
	}
	l = len(m.OrgResourceId)
	if l > 0 {
		n += 1 + l + sovOrg(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AccountConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MaxKafkaClusters != 0 {
		n += 1 + sovOrg(uint64(m.MaxKafkaClusters))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Plan) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TaxAddress != nil {
		l = m.TaxAddress.Size()
		n += 1 + l + sovOrg(uint64(l))
	}
	if m.ProductLevel != 0 {
		n += 1 + sovOrg(uint64(m.ProductLevel))
	}
	if m.TrialStart != nil {
		l = m.TrialStart.Size()
		n += 1 + l + sovOrg(uint64(l))
	}
	if m.TrialEnd != nil {
		l = m.TrialEnd.Size()
		n += 1 + l + sovOrg(uint64(l))
	}
	if m.PlanStart != nil {
		l = m.PlanStart.Size()
		n += 1 + l + sovOrg(uint64(l))
	}
	if m.PlanEnd != nil {
		l = m.PlanEnd.Size()
		n += 1 + l + sovOrg(uint64(l))
	}
	if m.Product != nil {
		l = m.Product.Size()
		n += 1 + l + sovOrg(uint64(l))
	}
	if m.Billing != nil {
		l = m.Billing.Size()
		n += 1 + l + sovOrg(uint64(l))
	}
	l = len(m.ReferralCode)
	if l > 0 {
		n += 1 + l + sovOrg(uint64(l))
	}
	if m.AcceptTos != nil {
		l = m.AcceptTos.Size()
		n += 1 + l + sovOrg(uint64(l))
	}
	if m.AllowMultiTenant {
		n += 2
	}
	if m.AcceptTosPlatform != nil {
		l = m.AcceptTosPlatform.Size()
		n += 1 + l + sovOrg(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Plan_Product) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ReadThroughputMb != 0 {
		n += 9
	}
	if m.WriteThroughputMb != 0 {
		n += 9
	}
	if m.StorageGb != 0 {
		n += 1 + sovOrg(uint64(m.StorageGb))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Plan_Billing) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Method != 0 {
		n += 1 + sovOrg(uint64(m.Method))
	}
	if m.Interval != 0 {
		n += 1 + sovOrg(uint64(m.Interval))
	}
	if m.AccruedThisCycle != 0 {
		n += 1 + sovOrg(uint64(m.AccruedThisCycle))
	}
	l = len(m.StripeCustomerId)
	if l > 0 {
		n += 1 + l + sovOrg(uint64(l))
	}
	l = len(m.Email)
	if l > 0 {
		n += 1 + l + sovOrg(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Saml) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Enabled {
		n += 2
	}
	l = len(m.MetadataUrl)
	if l > 0 {
		n += 1 + l + sovOrg(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Organization) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovOrg(uint64(m.Id))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovOrg(uint64(l))
	}
	if m.Deactivated {
		n += 2
	}
	l = len(m.StripeCustomerId)
	if l > 0 {
		n += 1 + l + sovOrg(uint64(l))
	}
	if m.Created != nil {
		l = m.Created.Size()
		n += 1 + l + sovOrg(uint64(l))
	}
	if m.Modified != nil {
		l = m.Modified.Size()
		n += 1 + l + sovOrg(uint64(l))
	}
	l = len(m.BillingEmail)
	if l > 0 {
		n += 1 + l + sovOrg(uint64(l))
	}
	if m.Plan != nil {
		l = m.Plan.Size()
		n += 1 + l + sovOrg(uint64(l))
	}
	if m.Saml != nil {
		l = m.Saml.Size()
		n += 1 + l + sovOrg(uint64(l))
	}
	if m.Sso != nil {
		l = m.Sso.Size()
		n += 1 + l + sovOrg(uint64(l))
	}
	if m.Marketplace != nil {
		l = m.Marketplace.Size()
		n += 1 + l + sovOrg(uint64(l))
	}
	l = len(m.ResourceId)
	if l > 0 {
		n += 1 + l + sovOrg(uint64(l))
	}
	if m.HasEntitlement {
		n += 2
	}
	if m.ShowBilling {
		n += 2
	}
	if m.AuditLog != nil {
		l = m.AuditLog.Size()
		n += 1 + l + sovOrg(uint64(l))
	}
	if m.HasCommitment {
		n += 3
	}
	if m.MarketplaceSubscription != 0 {
		n += 2 + sovOrg(uint64(m.MarketplaceSubscription))
	}
	if m.DeactivatedAt != nil {
		l = m.DeactivatedAt.Size()
		n += 2 + l + sovOrg(uint64(l))
	}
	if m.SuspensionStatus != nil {
		l = m.SuspensionStatus.Size()
		n += 2 + l + sovOrg(uint64(l))
	}
	l = len(m.DisplayLabel)
	if l > 0 {
		n += 2 + l + sovOrg(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SuspensionStatus) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Suspended != nil {
		l = m.Suspended.Size()
		n += 1 + l + sovOrg(uint64(l))
	}
	if m.Status != 0 {
		n += 1 + sovOrg(uint64(m.Status))
	}
	if m.EventType != 0 {
		n += 1 + sovOrg(uint64(m.EventType))
	}
	if m.ScheduledDeactivatedAt != nil {
		l = m.ScheduledDeactivatedAt.Size()
		n += 1 + l + sovOrg(uint64(l))
	}
	if m.Version != 0 {
		n += 1 + sovOrg(uint64(m.Version))
	}
	l = len(m.ErrorMessage)
	if l > 0 {
		n += 1 + l + sovOrg(uint64(l))
	}
	if m.ScheduledResourcesDeletedAt != nil {
		l = m.ScheduledResourcesDeletedAt.Size()
		n += 1 + l + sovOrg(uint64(l))
	}
	if m.ResourcesDeletedAt != nil {
		l = m.ResourcesDeletedAt.Size()
		n += 1 + l + sovOrg(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SignupRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Organization != nil {
		l = m.Organization.Size()
		n += 1 + l + sovOrg(uint64(l))
	}
	if m.User != nil {
		l = m.User.Size()
		n += 1 + l + sovOrg(uint64(l))
	}
	if m.Credentials != nil {
		l = m.Credentials.Size()
		n += 1 + l + sovOrg(uint64(l))
	}
	l = len(m.StripeToken)
	if l > 0 {
		n += 1 + l + sovOrg(uint64(l))
	}
	if m.Enterprise {
		n += 2
	}
	if len(m.RequestCarrier) > 0 {
		for k, v := range m.RequestCarrier {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovOrg(uint64(len(k))) + 1 + len(v) + sovOrg(uint64(len(v)))
			n += mapEntrySize + 1 + sovOrg(uint64(mapEntrySize))
		}
	}
	if m.Utm != nil {
		l = m.Utm.Size()
		n += 1 + l + sovOrg(uint64(l))
	}
	if m.ExistingCreds {
		n += 2
	}
	l = len(m.Token)
	if l > 0 {
		n += 1 + l + sovOrg(uint64(l))
	}
	if m.MarketplaceCreds != nil {
		l = m.MarketplaceCreds.Size()
		n += 1 + l + sovOrg(uint64(l))
	}
	l = len(m.CountryCode)
	if l > 0 {
		n += 1 + l + sovOrg(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SignupReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.User != nil {
		l = m.User.Size()
		n += 1 + l + sovOrg(uint64(l))
	}
	if m.Organization != nil {
		l = m.Organization.Size()
		n += 1 + l + sovOrg(uint64(l))
	}
	if m.Account != nil {
		l = m.Account.Size()
		n += 1 + l + sovOrg(uint64(l))
	}
	if m.Error != nil {
		l = m.Error.Size()
		n += 1 + l + sovOrg(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetUsersReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Users) > 0 {
		for _, e := range m.Users {
			l = e.Size()
			n += 1 + l + sovOrg(uint64(l))
		}
	}
	if m.Error != nil {
		l = m.Error.Size()
		n += 1 + l + sovOrg(uint64(l))
	}
	if m.PageInfo != nil {
		l = m.PageInfo.Size()
		n += 1 + l + sovOrg(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CreateAccountRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Account != nil {
		l = m.Account.Size()
		n += 1 + l + sovOrg(uint64(l))
	}
	if len(m.RequestCarrier) > 0 {
		for k, v := range m.RequestCarrier {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovOrg(uint64(len(k))) + 1 + len(v) + sovOrg(uint64(len(v)))
			n += mapEntrySize + 1 + sovOrg(uint64(mapEntrySize))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CreateAccountReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Account != nil {
		l = m.Account.Size()
		n += 1 + l + sovOrg(uint64(l))
	}
	if m.Error != nil {
		l = m.Error.Size()
		n += 1 + l + sovOrg(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetAccountReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Account != nil {
		l = m.Account.Size()
		n += 1 + l + sovOrg(uint64(l))
	}
	if m.Error != nil {
		l = m.Error.Size()
		n += 1 + l + sovOrg(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ListAccountsReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Accounts) > 0 {
		for _, e := range m.Accounts {
			l = e.Size()
			n += 1 + l + sovOrg(uint64(l))
		}
	}
	if m.Error != nil {
		l = m.Error.Size()
		n += 1 + l + sovOrg(uint64(l))
	}
	if m.PageInfo != nil {
		l = m.PageInfo.Size()
		n += 1 + l + sovOrg(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Address) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Street1)
	if l > 0 {
		n += 1 + l + sovOrg(uint64(l))
	}
	l = len(m.Street2)
	if l > 0 {
		n += 1 + l + sovOrg(uint64(l))
	}
	l = len(m.City)
	if l > 0 {
		n += 1 + l + sovOrg(uint64(l))
	}
	l = len(m.State)
	if l > 0 {
		n += 1 + l + sovOrg(uint64(l))
	}
	l = len(m.Country)
	if l > 0 {
		n += 1 + l + sovOrg(uint64(l))
	}
	l = len(m.Zip)
	if l > 0 {
		n += 1 + l + sovOrg(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Utm) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Source)
	if l > 0 {
		n += 1 + l + sovOrg(uint64(l))
	}
	l = len(m.Campaign)
	if l > 0 {
		n += 1 + l + sovOrg(uint64(l))
	}
	l = len(m.Medium)
	if l > 0 {
		n += 1 + l + sovOrg(uint64(l))
	}
	l = len(m.Partner)
	if l > 0 {
		n += 1 + l + sovOrg(uint64(l))
	}
	l = len(m.Term)
	if l > 0 {
		n += 1 + l + sovOrg(uint64(l))
	}
	l = len(m.Content)
	if l > 0 {
		n += 1 + l + sovOrg(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetServiceAccountsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.User != nil {
		l = m.User.Size()
		n += 1 + l + sovOrg(uint64(l))
	}
	if len(m.RequestCarrier) > 0 {
		for k, v := range m.RequestCarrier {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovOrg(uint64(len(k))) + 1 + len(v) + sovOrg(uint64(len(v)))
			n += mapEntrySize + 1 + sovOrg(uint64(mapEntrySize))
		}
	}
	if m.PageInfo != nil {
		l = m.PageInfo.Size()
		n += 1 + l + sovOrg(uint64(l))
	}
	if m.Organization != nil {
		l = m.Organization.Size()
		n += 1 + l + sovOrg(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetServiceAccountsReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Users) > 0 {
		for _, e := range m.Users {
			l = e.Size()
			n += 1 + l + sovOrg(uint64(l))
		}
	}
	if m.Error != nil {
		l = m.Error.Size()
		n += 1 + l + sovOrg(uint64(l))
	}
	if m.PageInfo != nil {
		l = m.PageInfo.Size()
		n += 1 + l + sovOrg(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetServiceAccountRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.User != nil {
		l = m.User.Size()
		n += 1 + l + sovOrg(uint64(l))
	}
	if len(m.RequestCarrier) > 0 {
		for k, v := range m.RequestCarrier {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovOrg(uint64(len(k))) + 1 + len(v) + sovOrg(uint64(len(v)))
			n += mapEntrySize + 1 + sovOrg(uint64(mapEntrySize))
		}
	}
	if m.IncludeDeactivated {
		n += 2
	}
	if m.Organization != nil {
		l = m.Organization.Size()
		n += 1 + l + sovOrg(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetServiceAccountReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.User != nil {
		l = m.User.Size()
		n += 1 + l + sovOrg(uint64(l))
	}
	if m.Error != nil {
		l = m.Error.Size()
		n += 1 + l + sovOrg(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Marketplace) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Partner != 0 {
		n += 1 + sovOrg(uint64(m.Partner))
	}
	l = len(m.CustomerId)
	if l > 0 {
		n += 1 + l + sovOrg(uint64(l))
	}
	if m.CustomerState != 0 {
		n += 1 + sovOrg(uint64(m.CustomerState))
	}
	if m.ConsoleIntegrated {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AuditLog) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ClusterId)
	if l > 0 {
		n += 1 + l + sovOrg(uint64(l))
	}
	l = len(m.AccountId)
	if l > 0 {
		n += 1 + l + sovOrg(uint64(l))
	}
	if m.ServiceAccountId != 0 {
		n += 1 + sovOrg(uint64(m.ServiceAccountId))
	}
	l = len(m.TopicName)
	if l > 0 {
		n += 1 + l + sovOrg(uint64(l))
	}
	l = len(m.ServiceAccountResourceId)
	if l > 0 {
		n += 1 + l + sovOrg(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovOrg(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozOrg(x uint64) (n int) {
	return sovOrg(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *PageInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOrg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PageInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PageInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PageSize", wireType)
			}
			m.PageSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PageSize |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PageToken", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOrg
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOrg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PageToken = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOrg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthOrg
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthOrg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Sso) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOrg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Sso: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Sso: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Enabled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Enabled = bool(v != 0)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Auth0ConnectionName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOrg
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOrg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Auth0ConnectionName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TenantId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOrg
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOrg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TenantId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MultiTenant", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.MultiTenant = bool(v != 0)
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mode", wireType)
			}
			m.Mode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mode |= SsoMode(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipOrg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthOrg
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthOrg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *User) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOrg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: User: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: User: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Email", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOrg
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOrg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Email = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FirstName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOrg
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOrg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FirstName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOrg
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOrg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LastName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Deactivated", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Deactivated = bool(v != 0)
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Created", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOrg
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOrg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Created == nil {
				m.Created = &types.Timestamp{}
			}
			if err := m.Created.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Modified", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOrg
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOrg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Modified == nil {
				m.Modified = &types.Timestamp{}
			}
			if err := m.Modified.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Verified", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOrg
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOrg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Verified == nil {
				m.Verified = &types.Timestamp{}
			}
			if err := m.Verified.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServiceName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOrg
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOrg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ServiceName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServiceDescription", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOrg
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOrg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ServiceDescription = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServiceAccount", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ServiceAccount = bool(v != 0)
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Preferences", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOrg
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOrg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Preferences == nil {
				m.Preferences = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowOrg
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowOrg
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthOrg
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthOrg
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowOrg
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthOrg
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthOrg
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipOrg(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthOrg
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Preferences[mapkey] = mapvalue
			iNdEx = postIndex
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Internal", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Internal = bool(v != 0)
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResourceId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOrg
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOrg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ResourceId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeactivatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOrg
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOrg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DeactivatedAt == nil {
				m.DeactivatedAt = &types.Timestamp{}
			}
			if err := m.DeactivatedAt.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 20:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SocialConnection", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOrg
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOrg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SocialConnection = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 21:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuthType", wireType)
			}
			m.AuthType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AuthType |= AuthType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipOrg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthOrg
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthOrg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Account) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOrg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Account: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Account: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOrg
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOrg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOrg
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOrg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrganizationId", wireType)
			}
			m.OrganizationId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OrganizationId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Deactivated", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Deactivated = bool(v != 0)
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Created", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOrg
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOrg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Created == nil {
				m.Created = &types.Timestamp{}
			}
			if err := m.Created.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Modified", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOrg
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOrg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Modified == nil {
				m.Modified = &types.Timestamp{}
			}
			if err := m.Modified.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Config", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOrg
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOrg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Config == nil {
				m.Config = &AccountConfig{}
			}
			if err := m.Config.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Internal", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Internal = bool(v != 0)
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeactivatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOrg
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOrg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DeactivatedAt == nil {
				m.DeactivatedAt = &types.Timestamp{}
			}
			if err := m.DeactivatedAt.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrgResourceId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOrg
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOrg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OrgResourceId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOrg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthOrg
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthOrg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AccountConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOrg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AccountConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AccountConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxKafkaClusters", wireType)
			}
			m.MaxKafkaClusters = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxKafkaClusters |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipOrg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthOrg
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthOrg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Plan) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOrg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Plan: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Plan: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaxAddress", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOrg
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOrg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TaxAddress == nil {
				m.TaxAddress = &Address{}
			}
			if err := m.TaxAddress.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProductLevel", wireType)
			}
			m.ProductLevel = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ProductLevel |= ProductLevel(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TrialStart", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOrg
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOrg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TrialStart == nil {
				m.TrialStart = &types.Timestamp{}
			}
			if err := m.TrialStart.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TrialEnd", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOrg
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOrg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TrialEnd == nil {
				m.TrialEnd = &types.Timestamp{}
			}
			if err := m.TrialEnd.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlanStart", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOrg
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOrg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PlanStart == nil {
				m.PlanStart = &types.Timestamp{}
			}
			if err := m.PlanStart.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlanEnd", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOrg
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOrg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PlanEnd == nil {
				m.PlanEnd = &types.Timestamp{}
			}
			if err := m.PlanEnd.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Product", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOrg
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOrg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Product == nil {
				m.Product = &Plan_Product{}
			}
			if err := m.Product.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Billing", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOrg
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOrg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Billing == nil {
				m.Billing = &Plan_Billing{}
			}
			if err := m.Billing.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReferralCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOrg
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOrg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReferralCode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AcceptTos", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOrg
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOrg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AcceptTos == nil {
				m.AcceptTos = &types.BoolValue{}
			}
			if err := m.AcceptTos.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AllowMultiTenant", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AllowMultiTenant = bool(v != 0)
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AcceptTosPlatform", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOrg
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOrg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AcceptTosPlatform == nil {
				m.AcceptTosPlatform = &types.BoolValue{}
			}
			if err := m.AcceptTosPlatform.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOrg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthOrg
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthOrg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Plan_Product) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOrg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Product: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Product: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReadThroughputMb", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.ReadThroughputMb = float64(math.Float64frombits(v))
		case 2:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field WriteThroughputMb", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.WriteThroughputMb = float64(math.Float64frombits(v))
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StorageGb", wireType)
			}
			m.StorageGb = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StorageGb |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipOrg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthOrg
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthOrg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Plan_Billing) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOrg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Billing: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Billing: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Method", wireType)
			}
			m.Method = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Method |= BillingMethod(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Interval", wireType)
			}
			m.Interval = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Interval |= BillingInterval(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccruedThisCycle", wireType)
			}
			m.AccruedThisCycle = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AccruedThisCycle |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StripeCustomerId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOrg
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOrg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StripeCustomerId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Email", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOrg
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOrg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Email = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOrg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthOrg
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthOrg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Saml) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOrg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Saml: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Saml: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Enabled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Enabled = bool(v != 0)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MetadataUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOrg
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOrg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MetadataUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOrg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthOrg
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthOrg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Organization) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOrg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Organization: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Organization: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOrg
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOrg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Deactivated", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Deactivated = bool(v != 0)
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StripeCustomerId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOrg
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOrg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StripeCustomerId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Created", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOrg
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOrg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Created == nil {
				m.Created = &types.Timestamp{}
			}
			if err := m.Created.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Modified", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOrg
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOrg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Modified == nil {
				m.Modified = &types.Timestamp{}
			}
			if err := m.Modified.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BillingEmail", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOrg
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOrg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BillingEmail = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Plan", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOrg
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOrg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Plan == nil {
				m.Plan = &Plan{}
			}
			if err := m.Plan.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Saml", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOrg
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOrg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Saml == nil {
				m.Saml = &Saml{}
			}
			if err := m.Saml.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sso", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOrg
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOrg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Sso == nil {
				m.Sso = &Sso{}
			}
			if err := m.Sso.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Marketplace", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOrg
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOrg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Marketplace == nil {
				m.Marketplace = &Marketplace{}
			}
			if err := m.Marketplace.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResourceId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOrg
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOrg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ResourceId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HasEntitlement", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.HasEntitlement = bool(v != 0)
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShowBilling", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ShowBilling = bool(v != 0)
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuditLog", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOrg
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOrg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AuditLog == nil {
				m.AuditLog = &AuditLog{}
			}
			if err := m.AuditLog.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HasCommitment", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.HasCommitment = bool(v != 0)
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MarketplaceSubscription", wireType)
			}
			m.MarketplaceSubscription = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MarketplaceSubscription |= MarketplaceSubscription(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeactivatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOrg
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOrg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DeactivatedAt == nil {
				m.DeactivatedAt = &types.Timestamp{}
			}
			if err := m.DeactivatedAt.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SuspensionStatus", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOrg
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOrg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SuspensionStatus == nil {
				m.SuspensionStatus = &SuspensionStatus{}
			}
			if err := m.SuspensionStatus.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 20:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisplayLabel", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOrg
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOrg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DisplayLabel = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOrg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthOrg
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthOrg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SuspensionStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOrg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SuspensionStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SuspensionStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Suspended", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOrg
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOrg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Suspended == nil {
				m.Suspended = &types.Timestamp{}
			}
			if err := m.Suspended.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= SuspensionStatusType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventType", wireType)
			}
			m.EventType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EventType |= SuspensionEventType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScheduledDeactivatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOrg
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOrg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ScheduledDeactivatedAt == nil {
				m.ScheduledDeactivatedAt = &types.Timestamp{}
			}
			if err := m.ScheduledDeactivatedAt.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			m.Version = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Version |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorMessage", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOrg
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOrg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ErrorMessage = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScheduledResourcesDeletedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOrg
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOrg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ScheduledResourcesDeletedAt == nil {
				m.ScheduledResourcesDeletedAt = &types.Timestamp{}
			}
			if err := m.ScheduledResourcesDeletedAt.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResourcesDeletedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOrg
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOrg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ResourcesDeletedAt == nil {
				m.ResourcesDeletedAt = &types.Timestamp{}
			}
			if err := m.ResourcesDeletedAt.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOrg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthOrg
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthOrg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SignupRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOrg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SignupRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SignupRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Organization", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOrg
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOrg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Organization == nil {
				m.Organization = &Organization{}
			}
			if err := m.Organization.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field User", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOrg
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOrg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.User == nil {
				m.User = &User{}
			}
			if err := m.User.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Credentials", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOrg
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOrg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Credentials == nil {
				m.Credentials = &Credentials{}
			}
			if err := m.Credentials.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StripeToken", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOrg
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOrg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StripeToken = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Enterprise", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Enterprise = bool(v != 0)
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestCarrier", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOrg
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOrg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RequestCarrier == nil {
				m.RequestCarrier = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowOrg
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowOrg
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthOrg
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthOrg
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowOrg
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthOrg
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthOrg
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipOrg(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthOrg
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.RequestCarrier[mapkey] = mapvalue
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Utm", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOrg
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOrg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Utm == nil {
				m.Utm = &Utm{}
			}
			if err := m.Utm.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExistingCreds", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ExistingCreds = bool(v != 0)
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOrg
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOrg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Token = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MarketplaceCreds", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOrg
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOrg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.MarketplaceCreds == nil {
				m.MarketplaceCreds = &MarketplaceCreds{}
			}
			if err := m.MarketplaceCreds.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CountryCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOrg
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOrg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CountryCode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOrg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthOrg
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthOrg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SignupReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOrg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SignupReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SignupReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field User", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOrg
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOrg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.User == nil {
				m.User = &User{}
			}
			if err := m.User.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Organization", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOrg
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOrg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Organization == nil {
				m.Organization = &Organization{}
			}
			if err := m.Organization.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Account", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOrg
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOrg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Account == nil {
				m.Account = &Account{}
			}
			if err := m.Account.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOrg
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOrg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Error == nil {
				m.Error = &Error{}
			}
			if err := m.Error.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOrg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthOrg
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthOrg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetUsersReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOrg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetUsersReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetUsersReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Users", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOrg
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOrg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Users = append(m.Users, &User{})
			if err := m.Users[len(m.Users)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOrg
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOrg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Error == nil {
				m.Error = &Error{}
			}
			if err := m.Error.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PageInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOrg
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOrg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PageInfo == nil {
				m.PageInfo = &PageInfo{}
			}
			if err := m.PageInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOrg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthOrg
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthOrg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateAccountRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOrg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateAccountRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateAccountRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Account", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOrg
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOrg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Account == nil {
				m.Account = &Account{}
			}
			if err := m.Account.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestCarrier", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOrg
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOrg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RequestCarrier == nil {
				m.RequestCarrier = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowOrg
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowOrg
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthOrg
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthOrg
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowOrg
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthOrg
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthOrg
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipOrg(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthOrg
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.RequestCarrier[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOrg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthOrg
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthOrg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateAccountReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOrg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateAccountReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateAccountReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Account", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOrg
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOrg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Account == nil {
				m.Account = &Account{}
			}
			if err := m.Account.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOrg
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOrg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Error == nil {
				m.Error = &Error{}
			}
			if err := m.Error.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOrg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthOrg
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthOrg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetAccountReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOrg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetAccountReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetAccountReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Account", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOrg
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOrg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Account == nil {
				m.Account = &Account{}
			}
			if err := m.Account.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOrg
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOrg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Error == nil {
				m.Error = &Error{}
			}
			if err := m.Error.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOrg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthOrg
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthOrg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListAccountsReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOrg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListAccountsReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListAccountsReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Accounts", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOrg
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOrg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Accounts = append(m.Accounts, &Account{})
			if err := m.Accounts[len(m.Accounts)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOrg
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOrg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Error == nil {
				m.Error = &Error{}
			}
			if err := m.Error.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PageInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOrg
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOrg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PageInfo == nil {
				m.PageInfo = &PageInfo{}
			}
			if err := m.PageInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOrg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthOrg
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthOrg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Address) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOrg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Address: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Address: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Street1", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOrg
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOrg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Street1 = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Street2", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOrg
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOrg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Street2 = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field City", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOrg
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOrg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.City = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOrg
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOrg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.State = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Country", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOrg
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOrg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Country = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Zip", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOrg
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOrg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Zip = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOrg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthOrg
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthOrg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Utm) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOrg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Utm: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Utm: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Source", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOrg
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOrg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Source = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Campaign", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOrg
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOrg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Campaign = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Medium", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOrg
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOrg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Medium = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Partner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOrg
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOrg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Partner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Term", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOrg
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOrg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Term = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Content", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOrg
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOrg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Content = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOrg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthOrg
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthOrg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetServiceAccountsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOrg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetServiceAccountsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetServiceAccountsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field User", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOrg
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOrg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.User == nil {
				m.User = &User{}
			}
			if err := m.User.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestCarrier", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOrg
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOrg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RequestCarrier == nil {
				m.RequestCarrier = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowOrg
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowOrg
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthOrg
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthOrg
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowOrg
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthOrg
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthOrg
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipOrg(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthOrg
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.RequestCarrier[mapkey] = mapvalue
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PageInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOrg
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOrg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PageInfo == nil {
				m.PageInfo = &PageInfo{}
			}
			if err := m.PageInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Organization", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOrg
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOrg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Organization == nil {
				m.Organization = &Organization{}
			}
			if err := m.Organization.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOrg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthOrg
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthOrg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetServiceAccountsReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOrg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetServiceAccountsReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetServiceAccountsReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Users", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOrg
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOrg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Users = append(m.Users, &User{})
			if err := m.Users[len(m.Users)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOrg
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOrg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Error == nil {
				m.Error = &Error{}
			}
			if err := m.Error.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PageInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOrg
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOrg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PageInfo == nil {
				m.PageInfo = &PageInfo{}
			}
			if err := m.PageInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOrg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthOrg
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthOrg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetServiceAccountRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOrg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetServiceAccountRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetServiceAccountRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field User", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOrg
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOrg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.User == nil {
				m.User = &User{}
			}
			if err := m.User.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestCarrier", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOrg
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOrg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RequestCarrier == nil {
				m.RequestCarrier = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowOrg
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowOrg
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthOrg
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthOrg
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowOrg
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthOrg
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthOrg
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipOrg(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthOrg
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.RequestCarrier[mapkey] = mapvalue
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IncludeDeactivated", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IncludeDeactivated = bool(v != 0)
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Organization", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOrg
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOrg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Organization == nil {
				m.Organization = &Organization{}
			}
			if err := m.Organization.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOrg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthOrg
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthOrg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetServiceAccountReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOrg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetServiceAccountReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetServiceAccountReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field User", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOrg
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOrg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.User == nil {
				m.User = &User{}
			}
			if err := m.User.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOrg
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOrg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Error == nil {
				m.Error = &Error{}
			}
			if err := m.Error.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOrg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthOrg
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthOrg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Marketplace) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOrg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Marketplace: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Marketplace: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Partner", wireType)
			}
			m.Partner = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Partner |= MarketplacePartner(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CustomerId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOrg
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOrg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CustomerId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CustomerState", wireType)
			}
			m.CustomerState = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CustomerState |= MarketplaceCustomerState(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConsoleIntegrated", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ConsoleIntegrated = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipOrg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthOrg
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthOrg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AuditLog) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOrg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AuditLog: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AuditLog: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClusterId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOrg
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOrg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClusterId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccountId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOrg
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOrg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AccountId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServiceAccountId", wireType)
			}
			m.ServiceAccountId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ServiceAccountId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopicName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOrg
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOrg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TopicName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServiceAccountResourceId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOrg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOrg
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOrg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ServiceAccountResourceId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOrg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthOrg
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthOrg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipOrg(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowOrg
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowOrg
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowOrg
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthOrg
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthOrg
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowOrg
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipOrg(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthOrg
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthOrg = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowOrg   = fmt.Errorf("proto: integer overflow")
)
