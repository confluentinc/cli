// Copyright 2021 Confluent Inc. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*
Kafka Connect APIs

REST API for managing connectors

API version: 1.0
Contact: connect@confluent.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1

import (
	"encoding/json"
)

import (
	"reflect"
)

// ConnectV1ConnectorExpansionInfo Metadata of the connector.
type ConnectV1ConnectorExpansionInfo struct {
	// Name of the connector.
	Name *string `json:"name,omitempty"`
	// Configuration parameters for the connector. These configurations are the minimum set of key-value pairs (KVP) which are used to define how the connector connects Kafka to the external system. Some of these KVPs are common to all the connectors, such as connection parameters to Kafka, connector metadata, etc. The list of common connector configurations is as follows    - cloud.environment   - cloud.provider   - connector.class   - kafka.api.key   - kafka.api.secret   - kafka.endpoint   - kafka.region   - name  For example, a connector like `GcsSink` would have additional parameters such as `gcs.bucket.name`, `flush.size`, etc.
	Config *map[string]string `json:"config,omitempty"`
}

// NewConnectV1ConnectorExpansionInfo instantiates a new ConnectV1ConnectorExpansionInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewConnectV1ConnectorExpansionInfo() *ConnectV1ConnectorExpansionInfo {
	this := ConnectV1ConnectorExpansionInfo{}
	return &this
}

// NewConnectV1ConnectorExpansionInfoWithDefaults instantiates a new ConnectV1ConnectorExpansionInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewConnectV1ConnectorExpansionInfoWithDefaults() *ConnectV1ConnectorExpansionInfo {
	this := ConnectV1ConnectorExpansionInfo{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *ConnectV1ConnectorExpansionInfo) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectV1ConnectorExpansionInfo) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *ConnectV1ConnectorExpansionInfo) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *ConnectV1ConnectorExpansionInfo) SetName(v string) {
	o.Name = &v
}

// GetConfig returns the Config field value if set, zero value otherwise.
func (o *ConnectV1ConnectorExpansionInfo) GetConfig() map[string]string {
	if o == nil || o.Config == nil {
		var ret map[string]string
		return ret
	}
	return *o.Config
}

// GetConfigOk returns a tuple with the Config field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectV1ConnectorExpansionInfo) GetConfigOk() (*map[string]string, bool) {
	if o == nil || o.Config == nil {
		return nil, false
	}
	return o.Config, true
}

// HasConfig returns a boolean if a field has been set.
func (o *ConnectV1ConnectorExpansionInfo) HasConfig() bool {
	if o != nil && o.Config != nil {
		return true
	}

	return false
}

// SetConfig gets a reference to the given map[string]string and assigns it to the Config field.
func (o *ConnectV1ConnectorExpansionInfo) SetConfig(v map[string]string) {
	o.Config = &v
}

// Redact resets all sensitive fields to their zero value.
func (o *ConnectV1ConnectorExpansionInfo) Redact() {
    o.recurseRedact(o.Name)
    o.recurseRedact(o.Config)
}

func (o *ConnectV1ConnectorExpansionInfo) recurseRedact(v interface{}) {
    type redactor interface {
        Redact()
    }
    if r, ok := v.(redactor); ok {
        r.Redact()
    } else {
        val := reflect.ValueOf(v)
        if val.Kind() == reflect.Ptr {
            val = val.Elem()
        }
        switch val.Kind() {
        case reflect.Slice, reflect.Array:
            for i := 0; i < val.Len(); i++ {
                // support data types declared without pointers
                o.recurseRedact(val.Index(i).Interface())
                // ... and data types that were declared without but need pointers (for Redact)
                if val.Index(i).CanAddr() {
                    o.recurseRedact(val.Index(i).Addr().Interface())
                }
            }
        }
    }
}

func (o ConnectV1ConnectorExpansionInfo) zeroField(v interface{}) {
    p := reflect.ValueOf(v).Elem()
    p.Set(reflect.Zero(p.Type()))
}

func (o ConnectV1ConnectorExpansionInfo) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.Config != nil {
		toSerialize["config"] = o.Config
	}
	return json.Marshal(toSerialize)
}

type NullableConnectV1ConnectorExpansionInfo struct {
	value *ConnectV1ConnectorExpansionInfo
	isSet bool
}

func (v NullableConnectV1ConnectorExpansionInfo) Get() *ConnectV1ConnectorExpansionInfo {
	return v.value
}

func (v *NullableConnectV1ConnectorExpansionInfo) Set(val *ConnectV1ConnectorExpansionInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableConnectV1ConnectorExpansionInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableConnectV1ConnectorExpansionInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConnectV1ConnectorExpansionInfo(val *ConnectV1ConnectorExpansionInfo) *NullableConnectV1ConnectorExpansionInfo {
	return &NullableConnectV1ConnectorExpansionInfo{value: val, isSet: true}
}

func (v NullableConnectV1ConnectorExpansionInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConnectV1ConnectorExpansionInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


