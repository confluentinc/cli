// Copyright 2021 Confluent Inc. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*
Kafka Connect APIs

REST API for managing connectors

API version: 1.0
Contact: connect@confluent.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1

import (
	"bytes"
	_context "context"
	_ioutil "io/ioutil"
	_nethttp "net/http"
	_neturl "net/url"
	"strings"
)

// Linger please
var (
	_ _context.Context
)

type PluginsV1Api interface {

	/*
	ListConnectv1ConnectorPlugins List of Connector Plugins

	[![General Availability](https://img.shields.io/badge/Lifecycle%20Stage-General%20Availability-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

Return a list of connector plugins installed in the Kafka Connect cluster.

	 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	 @param environmentId The unique identifier of the environment this resource belongs to.
	 @param kafkaClusterId The unique identifier for the Kafka cluster.
	 @return ApiListConnectv1ConnectorPluginsRequest
	*/
	ListConnectv1ConnectorPlugins(ctx _context.Context, environmentId string, kafkaClusterId string) ApiListConnectv1ConnectorPluginsRequest

	// ListConnectv1ConnectorPluginsExecute executes the request
	//  @return []InlineResponse2002
	ListConnectv1ConnectorPluginsExecute(r ApiListConnectv1ConnectorPluginsRequest) ([]InlineResponse2002, *_nethttp.Response, error)

	/*
	ValidateConnectv1ConnectorPlugin Validate a Connector Plugin

	[![General Availability](https://img.shields.io/badge/Lifecycle%20Stage-General%20Availability-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

Validate the provided configuration values against the configuration definition. This API performs per config validation and returns suggested values and validation error messages.

	 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	 @param pluginName The unique name of the connector plugin.
	 @param environmentId The unique identifier of the environment this resource belongs to.
	 @param kafkaClusterId The unique identifier for the Kafka cluster.
	 @return ApiValidateConnectv1ConnectorPluginRequest
	*/
	ValidateConnectv1ConnectorPlugin(ctx _context.Context, pluginName string, environmentId string, kafkaClusterId string) ApiValidateConnectv1ConnectorPluginRequest

	// ValidateConnectv1ConnectorPluginExecute executes the request
	//  @return InlineResponse2003
	ValidateConnectv1ConnectorPluginExecute(r ApiValidateConnectv1ConnectorPluginRequest) (InlineResponse2003, *_nethttp.Response, error)
}

// PluginsV1ApiService PluginsV1Api service
type PluginsV1ApiService service

type ApiListConnectv1ConnectorPluginsRequest struct {
	ctx _context.Context
	ApiService PluginsV1Api
	environmentId string
	kafkaClusterId string
}


func (r ApiListConnectv1ConnectorPluginsRequest) Execute() ([]InlineResponse2002, *_nethttp.Response, error) {
	return r.ApiService.ListConnectv1ConnectorPluginsExecute(r)
}

/*
ListConnectv1ConnectorPlugins List of Connector Plugins

[![General Availability](https://img.shields.io/badge/Lifecycle%20Stage-General%20Availability-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

Return a list of connector plugins installed in the Kafka Connect cluster.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param environmentId The unique identifier of the environment this resource belongs to.
 @param kafkaClusterId The unique identifier for the Kafka cluster.
 @return ApiListConnectv1ConnectorPluginsRequest
*/
func (a *PluginsV1ApiService) ListConnectv1ConnectorPlugins(ctx _context.Context, environmentId string, kafkaClusterId string) ApiListConnectv1ConnectorPluginsRequest {
	return ApiListConnectv1ConnectorPluginsRequest{
		ApiService: a,
		ctx: ctx,
		environmentId: environmentId,
		kafkaClusterId: kafkaClusterId,
	}
}

// Execute executes the request
//  @return []InlineResponse2002
func (a *PluginsV1ApiService) ListConnectv1ConnectorPluginsExecute(r ApiListConnectv1ConnectorPluginsRequest) ([]InlineResponse2002, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  []InlineResponse2002
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PluginsV1ApiService.ListConnectv1ConnectorPlugins")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/connect/v1/environments/{environment_id}/clusters/{kafka_cluster_id}/connector-plugins"
	localVarPath = strings.Replace(localVarPath, "{"+"environment_id"+"}", _neturl.PathEscape(parameterToString(r.environmentId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"kafka_cluster_id"+"}", _neturl.PathEscape(parameterToString(r.kafkaClusterId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ConnectV1ConnectorError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ConnectV1ConnectorError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ConnectV1ConnectorError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiValidateConnectv1ConnectorPluginRequest struct {
	ctx _context.Context
	ApiService PluginsV1Api
	pluginName string
	environmentId string
	kafkaClusterId string
	requestBody *map[string]string
}

// Configuration parameters for the connector. All values should be strings.
func (r ApiValidateConnectv1ConnectorPluginRequest) RequestBody(requestBody map[string]string) ApiValidateConnectv1ConnectorPluginRequest {
	r.requestBody = &requestBody
	return r
}

func (r ApiValidateConnectv1ConnectorPluginRequest) Execute() (InlineResponse2003, *_nethttp.Response, error) {
	return r.ApiService.ValidateConnectv1ConnectorPluginExecute(r)
}

/*
ValidateConnectv1ConnectorPlugin Validate a Connector Plugin

[![General Availability](https://img.shields.io/badge/Lifecycle%20Stage-General%20Availability-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

Validate the provided configuration values against the configuration definition. This API performs per config validation and returns suggested values and validation error messages.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param pluginName The unique name of the connector plugin.
 @param environmentId The unique identifier of the environment this resource belongs to.
 @param kafkaClusterId The unique identifier for the Kafka cluster.
 @return ApiValidateConnectv1ConnectorPluginRequest
*/
func (a *PluginsV1ApiService) ValidateConnectv1ConnectorPlugin(ctx _context.Context, pluginName string, environmentId string, kafkaClusterId string) ApiValidateConnectv1ConnectorPluginRequest {
	return ApiValidateConnectv1ConnectorPluginRequest{
		ApiService: a,
		ctx: ctx,
		pluginName: pluginName,
		environmentId: environmentId,
		kafkaClusterId: kafkaClusterId,
	}
}

// Execute executes the request
//  @return InlineResponse2003
func (a *PluginsV1ApiService) ValidateConnectv1ConnectorPluginExecute(r ApiValidateConnectv1ConnectorPluginRequest) (InlineResponse2003, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPut
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  InlineResponse2003
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PluginsV1ApiService.ValidateConnectv1ConnectorPlugin")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/connect/v1/environments/{environment_id}/clusters/{kafka_cluster_id}/connector-plugins/{plugin_name}/config/validate"
	localVarPath = strings.Replace(localVarPath, "{"+"plugin_name"+"}", _neturl.PathEscape(parameterToString(r.pluginName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"environment_id"+"}", _neturl.PathEscape(parameterToString(r.environmentId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"kafka_cluster_id"+"}", _neturl.PathEscape(parameterToString(r.kafkaClusterId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.requestBody
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ConnectV1ConnectorError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ConnectV1ConnectorError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ConnectV1ConnectorError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
