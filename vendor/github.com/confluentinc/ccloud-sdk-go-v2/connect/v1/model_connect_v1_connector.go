// Copyright 2021 Confluent Inc. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*
Kafka Connect APIs

REST API for managing connectors

API version: 1.0
Contact: connect@confluent.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1

import (
	"encoding/json"
)

import (
	"reflect"
)

// ConnectV1Connector struct for ConnectV1Connector
type ConnectV1Connector struct {
	// Name of the connector
	Name string `json:"name"`
	// Configuration parameters for the connector. These configurations are the minimum set of key-value pairs (KVP) which can be used to define how the connector connects Kafka to the external system. Some of these KVPs are common to all the connectors, such as connection parameters to Kafka, connector metadata, etc. The list of common connector configurations is as follows  - cloud.environment - cloud.provider - connector.class - kafka.api.key - kafka.api.secret - kafka.endpoint - kafka.region - name  A specific connector such as `GcsSink` would have additional parameters such as `gcs.bucket.name`, `flush.size`, etc.
	Config map[string]string `json:"config"`
	// List of active tasks generated by the connector
	Tasks *[]ConnectV1ConnectorTasks `json:"tasks,omitempty"`
	// Type of connector, sink or source
	Type *string `json:"type,omitempty"`
}

// NewConnectV1Connector instantiates a new ConnectV1Connector object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewConnectV1Connector(name string, config map[string]string) *ConnectV1Connector {
	this := ConnectV1Connector{}
	this.Name = name
	this.Config = config
	return &this
}

// NewConnectV1ConnectorWithDefaults instantiates a new ConnectV1Connector object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewConnectV1ConnectorWithDefaults() *ConnectV1Connector {
	this := ConnectV1Connector{}
	return &this
}

// GetName returns the Name field value
func (o *ConnectV1Connector) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *ConnectV1Connector) GetNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *ConnectV1Connector) SetName(v string) {
	o.Name = v
}

// GetConfig returns the Config field value
func (o *ConnectV1Connector) GetConfig() map[string]string {
	if o == nil {
		var ret map[string]string
		return ret
	}

	return o.Config
}

// GetConfigOk returns a tuple with the Config field value
// and a boolean to check if the value has been set.
func (o *ConnectV1Connector) GetConfigOk() (*map[string]string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Config, true
}

// SetConfig sets field value
func (o *ConnectV1Connector) SetConfig(v map[string]string) {
	o.Config = v
}

// GetTasks returns the Tasks field value if set, zero value otherwise.
func (o *ConnectV1Connector) GetTasks() []ConnectV1ConnectorTasks {
	if o == nil || o.Tasks == nil {
		var ret []ConnectV1ConnectorTasks
		return ret
	}
	return *o.Tasks
}

// GetTasksOk returns a tuple with the Tasks field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectV1Connector) GetTasksOk() (*[]ConnectV1ConnectorTasks, bool) {
	if o == nil || o.Tasks == nil {
		return nil, false
	}
	return o.Tasks, true
}

// HasTasks returns a boolean if a field has been set.
func (o *ConnectV1Connector) HasTasks() bool {
	if o != nil && o.Tasks != nil {
		return true
	}

	return false
}

// SetTasks gets a reference to the given []ConnectV1ConnectorTasks and assigns it to the Tasks field.
func (o *ConnectV1Connector) SetTasks(v []ConnectV1ConnectorTasks) {
	o.Tasks = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *ConnectV1Connector) GetType() string {
	if o == nil || o.Type == nil {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectV1Connector) GetTypeOk() (*string, bool) {
	if o == nil || o.Type == nil {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *ConnectV1Connector) HasType() bool {
	if o != nil && o.Type != nil {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *ConnectV1Connector) SetType(v string) {
	o.Type = &v
}

// Redact resets all sensitive fields to their zero value.
func (o *ConnectV1Connector) Redact() {
    o.recurseRedact(&o.Name)
    o.recurseRedact(&o.Config)
    o.recurseRedact(o.Tasks)
    o.recurseRedact(o.Type)
}

func (o *ConnectV1Connector) recurseRedact(v interface{}) {
    type redactor interface {
        Redact()
    }
    if r, ok := v.(redactor); ok {
        r.Redact()
    } else {
        val := reflect.ValueOf(v)
        if val.Kind() == reflect.Ptr {
            val = val.Elem()
        }
        switch val.Kind() {
        case reflect.Slice, reflect.Array:
            for i := 0; i < val.Len(); i++ {
                // support data types declared without pointers
                o.recurseRedact(val.Index(i).Interface())
                // ... and data types that were declared without but need pointers (for Redact)
                if val.Index(i).CanAddr() {
                    o.recurseRedact(val.Index(i).Addr().Interface())
                }
            }
        }
    }
}

func (o ConnectV1Connector) zeroField(v interface{}) {
    p := reflect.ValueOf(v).Elem()
    p.Set(reflect.Zero(p.Type()))
}

func (o ConnectV1Connector) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["name"] = o.Name
	}
	if true {
		toSerialize["config"] = o.Config
	}
	if o.Tasks != nil {
		toSerialize["tasks"] = o.Tasks
	}
	if o.Type != nil {
		toSerialize["type"] = o.Type
	}
	return json.Marshal(toSerialize)
}

type NullableConnectV1Connector struct {
	value *ConnectV1Connector
	isSet bool
}

func (v NullableConnectV1Connector) Get() *ConnectV1Connector {
	return v.value
}

func (v *NullableConnectV1Connector) Set(val *ConnectV1Connector) {
	v.value = val
	v.isSet = true
}

func (v NullableConnectV1Connector) IsSet() bool {
	return v.isSet
}

func (v *NullableConnectV1Connector) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConnectV1Connector(val *ConnectV1Connector) *NullableConnectV1Connector {
	return &NullableConnectV1Connector{value: val, isSet: true}
}

func (v NullableConnectV1Connector) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConnectV1Connector) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


