// Copyright 2021 Confluent Inc. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*
Kafka Connect APIs

REST API for managing connectors

API version: 1.0
Contact: connect@confluent.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1

import (
	"encoding/json"
)

import (
	"reflect"
)

// ConnectV1ConnectorExpansionStatusConnector A map containing connector status.
type ConnectV1ConnectorExpansionStatusConnector struct {
	// The state of the connector.
	State string `json:"state"`
	// The worker ID of the connector.
	WorkerId string `json:"worker_id"`
	// Exception message in case of an error.
	Trace *string `json:"trace,omitempty"`
}

// NewConnectV1ConnectorExpansionStatusConnector instantiates a new ConnectV1ConnectorExpansionStatusConnector object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewConnectV1ConnectorExpansionStatusConnector(state string, workerId string) *ConnectV1ConnectorExpansionStatusConnector {
	this := ConnectV1ConnectorExpansionStatusConnector{}
	this.State = state
	this.WorkerId = workerId
	return &this
}

// NewConnectV1ConnectorExpansionStatusConnectorWithDefaults instantiates a new ConnectV1ConnectorExpansionStatusConnector object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewConnectV1ConnectorExpansionStatusConnectorWithDefaults() *ConnectV1ConnectorExpansionStatusConnector {
	this := ConnectV1ConnectorExpansionStatusConnector{}
	return &this
}

// GetState returns the State field value
func (o *ConnectV1ConnectorExpansionStatusConnector) GetState() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.State
}

// GetStateOk returns a tuple with the State field value
// and a boolean to check if the value has been set.
func (o *ConnectV1ConnectorExpansionStatusConnector) GetStateOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.State, true
}

// SetState sets field value
func (o *ConnectV1ConnectorExpansionStatusConnector) SetState(v string) {
	o.State = v
}

// GetWorkerId returns the WorkerId field value
func (o *ConnectV1ConnectorExpansionStatusConnector) GetWorkerId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.WorkerId
}

// GetWorkerIdOk returns a tuple with the WorkerId field value
// and a boolean to check if the value has been set.
func (o *ConnectV1ConnectorExpansionStatusConnector) GetWorkerIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.WorkerId, true
}

// SetWorkerId sets field value
func (o *ConnectV1ConnectorExpansionStatusConnector) SetWorkerId(v string) {
	o.WorkerId = v
}

// GetTrace returns the Trace field value if set, zero value otherwise.
func (o *ConnectV1ConnectorExpansionStatusConnector) GetTrace() string {
	if o == nil || o.Trace == nil {
		var ret string
		return ret
	}
	return *o.Trace
}

// GetTraceOk returns a tuple with the Trace field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectV1ConnectorExpansionStatusConnector) GetTraceOk() (*string, bool) {
	if o == nil || o.Trace == nil {
		return nil, false
	}
	return o.Trace, true
}

// HasTrace returns a boolean if a field has been set.
func (o *ConnectV1ConnectorExpansionStatusConnector) HasTrace() bool {
	if o != nil && o.Trace != nil {
		return true
	}

	return false
}

// SetTrace gets a reference to the given string and assigns it to the Trace field.
func (o *ConnectV1ConnectorExpansionStatusConnector) SetTrace(v string) {
	o.Trace = &v
}

// Redact resets all sensitive fields to their zero value.
func (o *ConnectV1ConnectorExpansionStatusConnector) Redact() {
    o.recurseRedact(&o.State)
    o.recurseRedact(&o.WorkerId)
    o.recurseRedact(o.Trace)
}

func (o *ConnectV1ConnectorExpansionStatusConnector) recurseRedact(v interface{}) {
    type redactor interface {
        Redact()
    }
    if r, ok := v.(redactor); ok {
        r.Redact()
    } else {
        val := reflect.ValueOf(v)
        if val.Kind() == reflect.Ptr {
            val = val.Elem()
        }
        switch val.Kind() {
        case reflect.Slice, reflect.Array:
            for i := 0; i < val.Len(); i++ {
                // support data types declared without pointers
                o.recurseRedact(val.Index(i).Interface())
                // ... and data types that were declared without but need pointers (for Redact)
                if val.Index(i).CanAddr() {
                    o.recurseRedact(val.Index(i).Addr().Interface())
                }
            }
        }
    }
}

func (o ConnectV1ConnectorExpansionStatusConnector) zeroField(v interface{}) {
    p := reflect.ValueOf(v).Elem()
    p.Set(reflect.Zero(p.Type()))
}

func (o ConnectV1ConnectorExpansionStatusConnector) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["state"] = o.State
	}
	if true {
		toSerialize["worker_id"] = o.WorkerId
	}
	if o.Trace != nil {
		toSerialize["trace"] = o.Trace
	}
	return json.Marshal(toSerialize)
}

type NullableConnectV1ConnectorExpansionStatusConnector struct {
	value *ConnectV1ConnectorExpansionStatusConnector
	isSet bool
}

func (v NullableConnectV1ConnectorExpansionStatusConnector) Get() *ConnectV1ConnectorExpansionStatusConnector {
	return v.value
}

func (v *NullableConnectV1ConnectorExpansionStatusConnector) Set(val *ConnectV1ConnectorExpansionStatusConnector) {
	v.value = val
	v.isSet = true
}

func (v NullableConnectV1ConnectorExpansionStatusConnector) IsSet() bool {
	return v.isSet
}

func (v *NullableConnectV1ConnectorExpansionStatusConnector) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConnectV1ConnectorExpansionStatusConnector(val *ConnectV1ConnectorExpansionStatusConnector) *NullableConnectV1ConnectorExpansionStatusConnector {
	return &NullableConnectV1ConnectorExpansionStatusConnector{value: val, isSet: true}
}

func (v NullableConnectV1ConnectorExpansionStatusConnector) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConnectV1ConnectorExpansionStatusConnector) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


