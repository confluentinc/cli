// Copyright 2021 Confluent Inc. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*
Kafka Connect APIs

REST API for managing connectors

API version: 1.0
Contact: connect@confluent.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1

import (
	"encoding/json"
)

import (
	"reflect"
)

// ConnectV1ConnectorExpansion List of active connectors with the expansions requested.
type ConnectV1ConnectorExpansion struct {
	Id *ConnectV1ConnectorExpansionId `json:"id,omitempty"`
	Info *ConnectV1ConnectorExpansionInfo `json:"info,omitempty"`
	Status *ConnectV1ConnectorExpansionStatus `json:"status,omitempty"`
}

// NewConnectV1ConnectorExpansion instantiates a new ConnectV1ConnectorExpansion object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewConnectV1ConnectorExpansion() *ConnectV1ConnectorExpansion {
	this := ConnectV1ConnectorExpansion{}
	return &this
}

// NewConnectV1ConnectorExpansionWithDefaults instantiates a new ConnectV1ConnectorExpansion object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewConnectV1ConnectorExpansionWithDefaults() *ConnectV1ConnectorExpansion {
	this := ConnectV1ConnectorExpansion{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *ConnectV1ConnectorExpansion) GetId() ConnectV1ConnectorExpansionId {
	if o == nil || o.Id == nil {
		var ret ConnectV1ConnectorExpansionId
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectV1ConnectorExpansion) GetIdOk() (*ConnectV1ConnectorExpansionId, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *ConnectV1ConnectorExpansion) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given ConnectV1ConnectorExpansionId and assigns it to the Id field.
func (o *ConnectV1ConnectorExpansion) SetId(v ConnectV1ConnectorExpansionId) {
	o.Id = &v
}

// GetInfo returns the Info field value if set, zero value otherwise.
func (o *ConnectV1ConnectorExpansion) GetInfo() ConnectV1ConnectorExpansionInfo {
	if o == nil || o.Info == nil {
		var ret ConnectV1ConnectorExpansionInfo
		return ret
	}
	return *o.Info
}

// GetInfoOk returns a tuple with the Info field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectV1ConnectorExpansion) GetInfoOk() (*ConnectV1ConnectorExpansionInfo, bool) {
	if o == nil || o.Info == nil {
		return nil, false
	}
	return o.Info, true
}

// HasInfo returns a boolean if a field has been set.
func (o *ConnectV1ConnectorExpansion) HasInfo() bool {
	if o != nil && o.Info != nil {
		return true
	}

	return false
}

// SetInfo gets a reference to the given ConnectV1ConnectorExpansionInfo and assigns it to the Info field.
func (o *ConnectV1ConnectorExpansion) SetInfo(v ConnectV1ConnectorExpansionInfo) {
	o.Info = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *ConnectV1ConnectorExpansion) GetStatus() ConnectV1ConnectorExpansionStatus {
	if o == nil || o.Status == nil {
		var ret ConnectV1ConnectorExpansionStatus
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectV1ConnectorExpansion) GetStatusOk() (*ConnectV1ConnectorExpansionStatus, bool) {
	if o == nil || o.Status == nil {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *ConnectV1ConnectorExpansion) HasStatus() bool {
	if o != nil && o.Status != nil {
		return true
	}

	return false
}

// SetStatus gets a reference to the given ConnectV1ConnectorExpansionStatus and assigns it to the Status field.
func (o *ConnectV1ConnectorExpansion) SetStatus(v ConnectV1ConnectorExpansionStatus) {
	o.Status = &v
}

// Redact resets all sensitive fields to their zero value.
func (o *ConnectV1ConnectorExpansion) Redact() {
    o.recurseRedact(o.Id)
    o.recurseRedact(o.Info)
    o.recurseRedact(o.Status)
}

func (o *ConnectV1ConnectorExpansion) recurseRedact(v interface{}) {
    type redactor interface {
        Redact()
    }
    if r, ok := v.(redactor); ok {
        r.Redact()
    } else {
        val := reflect.ValueOf(v)
        if val.Kind() == reflect.Ptr {
            val = val.Elem()
        }
        switch val.Kind() {
        case reflect.Slice, reflect.Array:
            for i := 0; i < val.Len(); i++ {
                // support data types declared without pointers
                o.recurseRedact(val.Index(i).Interface())
                // ... and data types that were declared without but need pointers (for Redact)
                if val.Index(i).CanAddr() {
                    o.recurseRedact(val.Index(i).Addr().Interface())
                }
            }
        }
    }
}

func (o ConnectV1ConnectorExpansion) zeroField(v interface{}) {
    p := reflect.ValueOf(v).Elem()
    p.Set(reflect.Zero(p.Type()))
}

func (o ConnectV1ConnectorExpansion) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.Info != nil {
		toSerialize["info"] = o.Info
	}
	if o.Status != nil {
		toSerialize["status"] = o.Status
	}
	return json.Marshal(toSerialize)
}

type NullableConnectV1ConnectorExpansion struct {
	value *ConnectV1ConnectorExpansion
	isSet bool
}

func (v NullableConnectV1ConnectorExpansion) Get() *ConnectV1ConnectorExpansion {
	return v.value
}

func (v *NullableConnectV1ConnectorExpansion) Set(val *ConnectV1ConnectorExpansion) {
	v.value = val
	v.isSet = true
}

func (v NullableConnectV1ConnectorExpansion) IsSet() bool {
	return v.isSet
}

func (v *NullableConnectV1ConnectorExpansion) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConnectV1ConnectorExpansion(val *ConnectV1ConnectorExpansion) *NullableConnectV1ConnectorExpansion {
	return &NullableConnectV1ConnectorExpansion{value: val, isSet: true}
}

func (v NullableConnectV1ConnectorExpansion) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConnectV1ConnectorExpansion) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


