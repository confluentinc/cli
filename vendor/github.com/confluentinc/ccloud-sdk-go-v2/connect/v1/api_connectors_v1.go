// Copyright 2021 Confluent Inc. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*
Kafka Connect APIs

REST API for managing connectors

API version: 1.0
Contact: connect@confluent.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1

import (
	"bytes"
	_context "context"
	_ioutil "io/ioutil"
	_nethttp "net/http"
	_neturl "net/url"
	"strings"
)

// Linger please
var (
	_ _context.Context
)

type ConnectorsV1Api interface {

	/*
	CreateConnectv1Connector Create a Connector

	[![General Availability](https://img.shields.io/badge/Lifecycle%20Stage-General%20Availability-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

Create a new connector. Returns the new connector information if successful.

	 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	 @param environmentId The unique identifier of the environment this resource belongs to.
	 @param kafkaClusterId The unique identifier for the Kafka cluster.
	 @return ApiCreateConnectv1ConnectorRequest
	*/
	CreateConnectv1Connector(ctx _context.Context, environmentId string, kafkaClusterId string) ApiCreateConnectv1ConnectorRequest

	// CreateConnectv1ConnectorExecute executes the request
	//  @return ConnectV1Connector
	CreateConnectv1ConnectorExecute(r ApiCreateConnectv1ConnectorRequest) (ConnectV1Connector, *_nethttp.Response, error)

	/*
	CreateOrUpdateConnectv1ConnectorConfig Create or Update a Connector Configuration

	Create a new connector using the given configuration, or update the configuration for an existing connector. Returns information about the connector after the change has been made.

	 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	 @param connectorName The unique name of the connector.
	 @param environmentId The unique identifier of the environment this resource belongs to.
	 @param kafkaClusterId The unique identifier for the Kafka cluster.
	 @return ApiCreateOrUpdateConnectv1ConnectorConfigRequest
	*/
	CreateOrUpdateConnectv1ConnectorConfig(ctx _context.Context, connectorName string, environmentId string, kafkaClusterId string) ApiCreateOrUpdateConnectv1ConnectorConfigRequest

	// CreateOrUpdateConnectv1ConnectorConfigExecute executes the request
	//  @return ConnectV1Connector
	CreateOrUpdateConnectv1ConnectorConfigExecute(r ApiCreateOrUpdateConnectv1ConnectorConfigRequest) (ConnectV1Connector, *_nethttp.Response, error)

	/*
	DeleteConnectv1Connector Delete a Connector

	[![General Availability](https://img.shields.io/badge/Lifecycle%20Stage-General%20Availability-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

Delete a connector. Halts all tasks and deletes the connector configuration.

	 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	 @param connectorName The unique name of the connector.
	 @param environmentId The unique identifier of the environment this resource belongs to.
	 @param kafkaClusterId The unique identifier for the Kafka cluster.
	 @return ApiDeleteConnectv1ConnectorRequest
	*/
	DeleteConnectv1Connector(ctx _context.Context, connectorName string, environmentId string, kafkaClusterId string) ApiDeleteConnectv1ConnectorRequest

	// DeleteConnectv1ConnectorExecute executes the request
	//  @return InlineResponse200
	DeleteConnectv1ConnectorExecute(r ApiDeleteConnectv1ConnectorRequest) (InlineResponse200, *_nethttp.Response, error)

	/*
	GetConnectv1ConnectorConfig Read a Connector Configuration

	[![General Availability](https://img.shields.io/badge/Lifecycle%20Stage-General%20Availability-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

Get the configuration for the connector.

	 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	 @param connectorName The unique name of the connector.
	 @param environmentId The unique identifier of the environment this resource belongs to.
	 @param kafkaClusterId The unique identifier for the Kafka cluster.
	 @return ApiGetConnectv1ConnectorConfigRequest
	*/
	GetConnectv1ConnectorConfig(ctx _context.Context, connectorName string, environmentId string, kafkaClusterId string) ApiGetConnectv1ConnectorConfigRequest

	// GetConnectv1ConnectorConfigExecute executes the request
	//  @return map[string]string
	GetConnectv1ConnectorConfigExecute(r ApiGetConnectv1ConnectorConfigRequest) (map[string]string, *_nethttp.Response, error)

	/*
	ListConnectv1Connectors List of Connectors

	[![General Availability](https://img.shields.io/badge/Lifecycle%20Stage-General%20Availability-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

Retrieve a list of "names" of the active connectors. You can then make a [read request](#operation/readConnectv1Connector) for a specific connector by name.

	 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	 @param environmentId The unique identifier of the environment this resource belongs to.
	 @param kafkaClusterId The unique identifier for the Kafka cluster.
	 @return ApiListConnectv1ConnectorsRequest
	*/
	ListConnectv1Connectors(ctx _context.Context, environmentId string, kafkaClusterId string) ApiListConnectv1ConnectorsRequest

	// ListConnectv1ConnectorsExecute executes the request
	//  @return []string
	ListConnectv1ConnectorsExecute(r ApiListConnectv1ConnectorsRequest) ([]string, *_nethttp.Response, error)

	/*
	ListConnectv1ConnectorsWithExpansions List of Connectors with Expansions

	[![General Availability](https://img.shields.io/badge/Lifecycle%20Stage-General%20Availability-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

Retrieve an object with the queried expansions of all connectors. Without `expand` query parameter, this list connectorâ€™s endpoint will return a [list of only the connector names](#operation/listConnectv1Connectors).

	 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	 @param environmentId The unique identifier of the environment this resource belongs to.
	 @param kafkaClusterId The unique identifier for the Kafka cluster.
	 @return ApiListConnectv1ConnectorsWithExpansionsRequest
	*/
	ListConnectv1ConnectorsWithExpansions(ctx _context.Context, environmentId string, kafkaClusterId string) ApiListConnectv1ConnectorsWithExpansionsRequest

	// ListConnectv1ConnectorsWithExpansionsExecute executes the request
	//  @return map[string]ConnectV1ConnectorExpansion
	ListConnectv1ConnectorsWithExpansionsExecute(r ApiListConnectv1ConnectorsWithExpansionsRequest) (map[string]ConnectV1ConnectorExpansion, *_nethttp.Response, error)

	/*
	ReadConnectv1Connector Read a Connector

	[![General Availability](https://img.shields.io/badge/Lifecycle%20Stage-General%20Availability-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

Get information about the connector.

	 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	 @param connectorName The unique name of the connector.
	 @param environmentId The unique identifier of the environment this resource belongs to.
	 @param kafkaClusterId The unique identifier for the Kafka cluster.
	 @return ApiReadConnectv1ConnectorRequest
	*/
	ReadConnectv1Connector(ctx _context.Context, connectorName string, environmentId string, kafkaClusterId string) ApiReadConnectv1ConnectorRequest

	// ReadConnectv1ConnectorExecute executes the request
	//  @return ConnectV1Connector
	ReadConnectv1ConnectorExecute(r ApiReadConnectv1ConnectorRequest) (ConnectV1Connector, *_nethttp.Response, error)
}

// ConnectorsV1ApiService ConnectorsV1Api service
type ConnectorsV1ApiService service

type ApiCreateConnectv1ConnectorRequest struct {
	ctx _context.Context
	ApiService ConnectorsV1Api
	environmentId string
	kafkaClusterId string
	inlineObject *InlineObject
}

func (r ApiCreateConnectv1ConnectorRequest) InlineObject(inlineObject InlineObject) ApiCreateConnectv1ConnectorRequest {
	r.inlineObject = &inlineObject
	return r
}

func (r ApiCreateConnectv1ConnectorRequest) Execute() (ConnectV1Connector, *_nethttp.Response, error) {
	return r.ApiService.CreateConnectv1ConnectorExecute(r)
}

/*
CreateConnectv1Connector Create a Connector

[![General Availability](https://img.shields.io/badge/Lifecycle%20Stage-General%20Availability-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

Create a new connector. Returns the new connector information if successful.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param environmentId The unique identifier of the environment this resource belongs to.
 @param kafkaClusterId The unique identifier for the Kafka cluster.
 @return ApiCreateConnectv1ConnectorRequest
*/
func (a *ConnectorsV1ApiService) CreateConnectv1Connector(ctx _context.Context, environmentId string, kafkaClusterId string) ApiCreateConnectv1ConnectorRequest {
	return ApiCreateConnectv1ConnectorRequest{
		ApiService: a,
		ctx: ctx,
		environmentId: environmentId,
		kafkaClusterId: kafkaClusterId,
	}
}

// Execute executes the request
//  @return ConnectV1Connector
func (a *ConnectorsV1ApiService) CreateConnectv1ConnectorExecute(r ApiCreateConnectv1ConnectorRequest) (ConnectV1Connector, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ConnectV1Connector
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConnectorsV1ApiService.CreateConnectv1Connector")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/connect/v1/environments/{environment_id}/clusters/{kafka_cluster_id}/connectors"
	localVarPath = strings.Replace(localVarPath, "{"+"environment_id"+"}", _neturl.PathEscape(parameterToString(r.environmentId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"kafka_cluster_id"+"}", _neturl.PathEscape(parameterToString(r.kafkaClusterId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v InlineResponse400
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ConnectV1ConnectorError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v InlineResponse500
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCreateOrUpdateConnectv1ConnectorConfigRequest struct {
	ctx _context.Context
	ApiService ConnectorsV1Api
	connectorName string
	environmentId string
	kafkaClusterId string
	requestBody *map[string]string
}

// Configuration parameters for the connector. All values should be strings.
func (r ApiCreateOrUpdateConnectv1ConnectorConfigRequest) RequestBody(requestBody map[string]string) ApiCreateOrUpdateConnectv1ConnectorConfigRequest {
	r.requestBody = &requestBody
	return r
}

func (r ApiCreateOrUpdateConnectv1ConnectorConfigRequest) Execute() (ConnectV1Connector, *_nethttp.Response, error) {
	return r.ApiService.CreateOrUpdateConnectv1ConnectorConfigExecute(r)
}

/*
CreateOrUpdateConnectv1ConnectorConfig Create or Update a Connector Configuration

Create a new connector using the given configuration, or update the configuration for an existing connector. Returns information about the connector after the change has been made.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param connectorName The unique name of the connector.
 @param environmentId The unique identifier of the environment this resource belongs to.
 @param kafkaClusterId The unique identifier for the Kafka cluster.
 @return ApiCreateOrUpdateConnectv1ConnectorConfigRequest
*/
func (a *ConnectorsV1ApiService) CreateOrUpdateConnectv1ConnectorConfig(ctx _context.Context, connectorName string, environmentId string, kafkaClusterId string) ApiCreateOrUpdateConnectv1ConnectorConfigRequest {
	return ApiCreateOrUpdateConnectv1ConnectorConfigRequest{
		ApiService: a,
		ctx: ctx,
		connectorName: connectorName,
		environmentId: environmentId,
		kafkaClusterId: kafkaClusterId,
	}
}

// Execute executes the request
//  @return ConnectV1Connector
func (a *ConnectorsV1ApiService) CreateOrUpdateConnectv1ConnectorConfigExecute(r ApiCreateOrUpdateConnectv1ConnectorConfigRequest) (ConnectV1Connector, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPut
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ConnectV1Connector
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConnectorsV1ApiService.CreateOrUpdateConnectv1ConnectorConfig")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/connect/v1/environments/{environment_id}/clusters/{kafka_cluster_id}/connectors/{connector_name}/config"
	localVarPath = strings.Replace(localVarPath, "{"+"connector_name"+"}", _neturl.PathEscape(parameterToString(r.connectorName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"environment_id"+"}", _neturl.PathEscape(parameterToString(r.environmentId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"kafka_cluster_id"+"}", _neturl.PathEscape(parameterToString(r.kafkaClusterId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.requestBody
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ConnectV1ConnectorError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ConnectV1ConnectorError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ConnectV1ConnectorError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v InlineResponse500
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeleteConnectv1ConnectorRequest struct {
	ctx _context.Context
	ApiService ConnectorsV1Api
	connectorName string
	environmentId string
	kafkaClusterId string
}


func (r ApiDeleteConnectv1ConnectorRequest) Execute() (InlineResponse200, *_nethttp.Response, error) {
	return r.ApiService.DeleteConnectv1ConnectorExecute(r)
}

/*
DeleteConnectv1Connector Delete a Connector

[![General Availability](https://img.shields.io/badge/Lifecycle%20Stage-General%20Availability-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

Delete a connector. Halts all tasks and deletes the connector configuration.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param connectorName The unique name of the connector.
 @param environmentId The unique identifier of the environment this resource belongs to.
 @param kafkaClusterId The unique identifier for the Kafka cluster.
 @return ApiDeleteConnectv1ConnectorRequest
*/
func (a *ConnectorsV1ApiService) DeleteConnectv1Connector(ctx _context.Context, connectorName string, environmentId string, kafkaClusterId string) ApiDeleteConnectv1ConnectorRequest {
	return ApiDeleteConnectv1ConnectorRequest{
		ApiService: a,
		ctx: ctx,
		connectorName: connectorName,
		environmentId: environmentId,
		kafkaClusterId: kafkaClusterId,
	}
}

// Execute executes the request
//  @return InlineResponse200
func (a *ConnectorsV1ApiService) DeleteConnectv1ConnectorExecute(r ApiDeleteConnectv1ConnectorRequest) (InlineResponse200, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  InlineResponse200
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConnectorsV1ApiService.DeleteConnectv1Connector")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/connect/v1/environments/{environment_id}/clusters/{kafka_cluster_id}/connectors/{connector_name}"
	localVarPath = strings.Replace(localVarPath, "{"+"connector_name"+"}", _neturl.PathEscape(parameterToString(r.connectorName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"environment_id"+"}", _neturl.PathEscape(parameterToString(r.environmentId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"kafka_cluster_id"+"}", _neturl.PathEscape(parameterToString(r.kafkaClusterId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ConnectV1ConnectorError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ConnectV1ConnectorError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ConnectV1ConnectorError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetConnectv1ConnectorConfigRequest struct {
	ctx _context.Context
	ApiService ConnectorsV1Api
	connectorName string
	environmentId string
	kafkaClusterId string
}


func (r ApiGetConnectv1ConnectorConfigRequest) Execute() (map[string]string, *_nethttp.Response, error) {
	return r.ApiService.GetConnectv1ConnectorConfigExecute(r)
}

/*
GetConnectv1ConnectorConfig Read a Connector Configuration

[![General Availability](https://img.shields.io/badge/Lifecycle%20Stage-General%20Availability-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

Get the configuration for the connector.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param connectorName The unique name of the connector.
 @param environmentId The unique identifier of the environment this resource belongs to.
 @param kafkaClusterId The unique identifier for the Kafka cluster.
 @return ApiGetConnectv1ConnectorConfigRequest
*/
func (a *ConnectorsV1ApiService) GetConnectv1ConnectorConfig(ctx _context.Context, connectorName string, environmentId string, kafkaClusterId string) ApiGetConnectv1ConnectorConfigRequest {
	return ApiGetConnectv1ConnectorConfigRequest{
		ApiService: a,
		ctx: ctx,
		connectorName: connectorName,
		environmentId: environmentId,
		kafkaClusterId: kafkaClusterId,
	}
}

// Execute executes the request
//  @return map[string]string
func (a *ConnectorsV1ApiService) GetConnectv1ConnectorConfigExecute(r ApiGetConnectv1ConnectorConfigRequest) (map[string]string, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  map[string]string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConnectorsV1ApiService.GetConnectv1ConnectorConfig")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/connect/v1/environments/{environment_id}/clusters/{kafka_cluster_id}/connectors/{connector_name}/config"
	localVarPath = strings.Replace(localVarPath, "{"+"connector_name"+"}", _neturl.PathEscape(parameterToString(r.connectorName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"environment_id"+"}", _neturl.PathEscape(parameterToString(r.environmentId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"kafka_cluster_id"+"}", _neturl.PathEscape(parameterToString(r.kafkaClusterId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ConnectV1ConnectorError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ConnectV1ConnectorError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ConnectV1ConnectorError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiListConnectv1ConnectorsRequest struct {
	ctx _context.Context
	ApiService ConnectorsV1Api
	environmentId string
	kafkaClusterId string
}


func (r ApiListConnectv1ConnectorsRequest) Execute() ([]string, *_nethttp.Response, error) {
	return r.ApiService.ListConnectv1ConnectorsExecute(r)
}

/*
ListConnectv1Connectors List of Connectors

[![General Availability](https://img.shields.io/badge/Lifecycle%20Stage-General%20Availability-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

Retrieve a list of "names" of the active connectors. You can then make a [read request](#operation/readConnectv1Connector) for a specific connector by name.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param environmentId The unique identifier of the environment this resource belongs to.
 @param kafkaClusterId The unique identifier for the Kafka cluster.
 @return ApiListConnectv1ConnectorsRequest
*/
func (a *ConnectorsV1ApiService) ListConnectv1Connectors(ctx _context.Context, environmentId string, kafkaClusterId string) ApiListConnectv1ConnectorsRequest {
	return ApiListConnectv1ConnectorsRequest{
		ApiService: a,
		ctx: ctx,
		environmentId: environmentId,
		kafkaClusterId: kafkaClusterId,
	}
}

// Execute executes the request
//  @return []string
func (a *ConnectorsV1ApiService) ListConnectv1ConnectorsExecute(r ApiListConnectv1ConnectorsRequest) ([]string, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  []string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConnectorsV1ApiService.ListConnectv1Connectors")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/connect/v1/environments/{environment_id}/clusters/{kafka_cluster_id}/connectors"
	localVarPath = strings.Replace(localVarPath, "{"+"environment_id"+"}", _neturl.PathEscape(parameterToString(r.environmentId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"kafka_cluster_id"+"}", _neturl.PathEscape(parameterToString(r.kafkaClusterId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ConnectV1ConnectorError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ConnectV1ConnectorError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ConnectV1ConnectorError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiListConnectv1ConnectorsWithExpansionsRequest struct {
	ctx _context.Context
	ApiService ConnectorsV1Api
	environmentId string
	kafkaClusterId string
	expand *string
}

// - id : Returns metadata of each connector such as id and id type. - info : Returns metadata of each connector such as the configuration, task information, and type of connector. - status : Returns additional state information of each connector including their status and tasks.
func (r ApiListConnectv1ConnectorsWithExpansionsRequest) Expand(expand string) ApiListConnectv1ConnectorsWithExpansionsRequest {
	r.expand = &expand
	return r
}

func (r ApiListConnectv1ConnectorsWithExpansionsRequest) Execute() (map[string]ConnectV1ConnectorExpansion, *_nethttp.Response, error) {
	return r.ApiService.ListConnectv1ConnectorsWithExpansionsExecute(r)
}

/*
ListConnectv1ConnectorsWithExpansions List of Connectors with Expansions

[![General Availability](https://img.shields.io/badge/Lifecycle%20Stage-General%20Availability-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

Retrieve an object with the queried expansions of all connectors. Without `expand` query parameter, this list connectorâ€™s endpoint will return a [list of only the connector names](#operation/listConnectv1Connectors).

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param environmentId The unique identifier of the environment this resource belongs to.
 @param kafkaClusterId The unique identifier for the Kafka cluster.
 @return ApiListConnectv1ConnectorsWithExpansionsRequest
*/
func (a *ConnectorsV1ApiService) ListConnectv1ConnectorsWithExpansions(ctx _context.Context, environmentId string, kafkaClusterId string) ApiListConnectv1ConnectorsWithExpansionsRequest {
	return ApiListConnectv1ConnectorsWithExpansionsRequest{
		ApiService: a,
		ctx: ctx,
		environmentId: environmentId,
		kafkaClusterId: kafkaClusterId,
	}
}

// Execute executes the request
//  @return map[string]ConnectV1ConnectorExpansion
func (a *ConnectorsV1ApiService) ListConnectv1ConnectorsWithExpansionsExecute(r ApiListConnectv1ConnectorsWithExpansionsRequest) (map[string]ConnectV1ConnectorExpansion, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  map[string]ConnectV1ConnectorExpansion
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConnectorsV1ApiService.ListConnectv1ConnectorsWithExpansions")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/connect/v1/environments/{environment_id}/clusters/{kafka_cluster_id}/connectors?expand=info,status,id"
	localVarPath = strings.Replace(localVarPath, "{"+"environment_id"+"}", _neturl.PathEscape(parameterToString(r.environmentId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"kafka_cluster_id"+"}", _neturl.PathEscape(parameterToString(r.kafkaClusterId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.expand != nil {
		localVarQueryParams.Add("expand", parameterToString(*r.expand, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ConnectV1ConnectorError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ConnectV1ConnectorError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ConnectV1ConnectorError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiReadConnectv1ConnectorRequest struct {
	ctx _context.Context
	ApiService ConnectorsV1Api
	connectorName string
	environmentId string
	kafkaClusterId string
}


func (r ApiReadConnectv1ConnectorRequest) Execute() (ConnectV1Connector, *_nethttp.Response, error) {
	return r.ApiService.ReadConnectv1ConnectorExecute(r)
}

/*
ReadConnectv1Connector Read a Connector

[![General Availability](https://img.shields.io/badge/Lifecycle%20Stage-General%20Availability-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

Get information about the connector.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param connectorName The unique name of the connector.
 @param environmentId The unique identifier of the environment this resource belongs to.
 @param kafkaClusterId The unique identifier for the Kafka cluster.
 @return ApiReadConnectv1ConnectorRequest
*/
func (a *ConnectorsV1ApiService) ReadConnectv1Connector(ctx _context.Context, connectorName string, environmentId string, kafkaClusterId string) ApiReadConnectv1ConnectorRequest {
	return ApiReadConnectv1ConnectorRequest{
		ApiService: a,
		ctx: ctx,
		connectorName: connectorName,
		environmentId: environmentId,
		kafkaClusterId: kafkaClusterId,
	}
}

// Execute executes the request
//  @return ConnectV1Connector
func (a *ConnectorsV1ApiService) ReadConnectv1ConnectorExecute(r ApiReadConnectv1ConnectorRequest) (ConnectV1Connector, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ConnectV1Connector
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConnectorsV1ApiService.ReadConnectv1Connector")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/connect/v1/environments/{environment_id}/clusters/{kafka_cluster_id}/connectors/{connector_name}"
	localVarPath = strings.Replace(localVarPath, "{"+"connector_name"+"}", _neturl.PathEscape(parameterToString(r.connectorName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"environment_id"+"}", _neturl.PathEscape(parameterToString(r.environmentId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"kafka_cluster_id"+"}", _neturl.PathEscape(parameterToString(r.kafkaClusterId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ConnectV1ConnectorError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ConnectV1ConnectorError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ConnectV1ConnectorError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
