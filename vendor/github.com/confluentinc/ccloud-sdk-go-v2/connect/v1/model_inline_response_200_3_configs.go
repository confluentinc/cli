// Copyright 2021 Confluent Inc. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*
Kafka Connect APIs

REST API for managing connectors

API version: 1.0
Contact: connect@confluent.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1

import (
	"encoding/json"
)

import (
	"reflect"
)

// InlineResponse2003Configs struct for InlineResponse2003Configs
type InlineResponse2003Configs struct {
	Definition *InlineResponse2003Definition `json:"definition,omitempty"`
	Value *InlineResponse2003Value `json:"value,omitempty"`
	// Map of metadata details about the connector configuration, such as type of input, etc.
	Metadata *map[string]interface{} `json:"metadata,omitempty"`
}

// NewInlineResponse2003Configs instantiates a new InlineResponse2003Configs object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInlineResponse2003Configs() *InlineResponse2003Configs {
	this := InlineResponse2003Configs{}
	return &this
}

// NewInlineResponse2003ConfigsWithDefaults instantiates a new InlineResponse2003Configs object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInlineResponse2003ConfigsWithDefaults() *InlineResponse2003Configs {
	this := InlineResponse2003Configs{}
	return &this
}

// GetDefinition returns the Definition field value if set, zero value otherwise.
func (o *InlineResponse2003Configs) GetDefinition() InlineResponse2003Definition {
	if o == nil || o.Definition == nil {
		var ret InlineResponse2003Definition
		return ret
	}
	return *o.Definition
}

// GetDefinitionOk returns a tuple with the Definition field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineResponse2003Configs) GetDefinitionOk() (*InlineResponse2003Definition, bool) {
	if o == nil || o.Definition == nil {
		return nil, false
	}
	return o.Definition, true
}

// HasDefinition returns a boolean if a field has been set.
func (o *InlineResponse2003Configs) HasDefinition() bool {
	if o != nil && o.Definition != nil {
		return true
	}

	return false
}

// SetDefinition gets a reference to the given InlineResponse2003Definition and assigns it to the Definition field.
func (o *InlineResponse2003Configs) SetDefinition(v InlineResponse2003Definition) {
	o.Definition = &v
}

// GetValue returns the Value field value if set, zero value otherwise.
func (o *InlineResponse2003Configs) GetValue() InlineResponse2003Value {
	if o == nil || o.Value == nil {
		var ret InlineResponse2003Value
		return ret
	}
	return *o.Value
}

// GetValueOk returns a tuple with the Value field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineResponse2003Configs) GetValueOk() (*InlineResponse2003Value, bool) {
	if o == nil || o.Value == nil {
		return nil, false
	}
	return o.Value, true
}

// HasValue returns a boolean if a field has been set.
func (o *InlineResponse2003Configs) HasValue() bool {
	if o != nil && o.Value != nil {
		return true
	}

	return false
}

// SetValue gets a reference to the given InlineResponse2003Value and assigns it to the Value field.
func (o *InlineResponse2003Configs) SetValue(v InlineResponse2003Value) {
	o.Value = &v
}

// GetMetadata returns the Metadata field value if set, zero value otherwise.
func (o *InlineResponse2003Configs) GetMetadata() map[string]interface{} {
	if o == nil || o.Metadata == nil {
		var ret map[string]interface{}
		return ret
	}
	return *o.Metadata
}

// GetMetadataOk returns a tuple with the Metadata field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineResponse2003Configs) GetMetadataOk() (*map[string]interface{}, bool) {
	if o == nil || o.Metadata == nil {
		return nil, false
	}
	return o.Metadata, true
}

// HasMetadata returns a boolean if a field has been set.
func (o *InlineResponse2003Configs) HasMetadata() bool {
	if o != nil && o.Metadata != nil {
		return true
	}

	return false
}

// SetMetadata gets a reference to the given map[string]interface{} and assigns it to the Metadata field.
func (o *InlineResponse2003Configs) SetMetadata(v map[string]interface{}) {
	o.Metadata = &v
}

// Redact resets all sensitive fields to their zero value.
func (o *InlineResponse2003Configs) Redact() {
    o.recurseRedact(o.Definition)
    o.recurseRedact(o.Value)
    o.recurseRedact(o.Metadata)
}

func (o *InlineResponse2003Configs) recurseRedact(v interface{}) {
    type redactor interface {
        Redact()
    }
    if r, ok := v.(redactor); ok {
        r.Redact()
    } else {
        val := reflect.ValueOf(v)
        if val.Kind() == reflect.Ptr {
            val = val.Elem()
        }
        switch val.Kind() {
        case reflect.Slice, reflect.Array:
            for i := 0; i < val.Len(); i++ {
                // support data types declared without pointers
                o.recurseRedact(val.Index(i).Interface())
                // ... and data types that were declared without but need pointers (for Redact)
                if val.Index(i).CanAddr() {
                    o.recurseRedact(val.Index(i).Addr().Interface())
                }
            }
        }
    }
}

func (o InlineResponse2003Configs) zeroField(v interface{}) {
    p := reflect.ValueOf(v).Elem()
    p.Set(reflect.Zero(p.Type()))
}

func (o InlineResponse2003Configs) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Definition != nil {
		toSerialize["definition"] = o.Definition
	}
	if o.Value != nil {
		toSerialize["value"] = o.Value
	}
	if o.Metadata != nil {
		toSerialize["metadata"] = o.Metadata
	}
	return json.Marshal(toSerialize)
}

type NullableInlineResponse2003Configs struct {
	value *InlineResponse2003Configs
	isSet bool
}

func (v NullableInlineResponse2003Configs) Get() *InlineResponse2003Configs {
	return v.value
}

func (v *NullableInlineResponse2003Configs) Set(val *InlineResponse2003Configs) {
	v.value = val
	v.isSet = true
}

func (v NullableInlineResponse2003Configs) IsSet() bool {
	return v.isSet
}

func (v *NullableInlineResponse2003Configs) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInlineResponse2003Configs(val *InlineResponse2003Configs) *NullableInlineResponse2003Configs {
	return &NullableInlineResponse2003Configs{value: val, isSet: true}
}

func (v NullableInlineResponse2003Configs) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInlineResponse2003Configs) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


