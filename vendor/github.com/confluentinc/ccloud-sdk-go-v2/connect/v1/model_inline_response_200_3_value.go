// Copyright 2021 Confluent Inc. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*
Kafka Connect APIs

REST API for managing connectors

API version: 1.0
Contact: connect@confluent.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1

import (
	"encoding/json"
)

import (
	"reflect"
)

// InlineResponse2003Value The current value for a config, which includes the name, value, recommended values, etc.
type InlineResponse2003Value struct {
	// The name of the configuration
	Name *string `json:"name,omitempty"`
	// The value for the configuration
	Value *string `json:"value,omitempty"`
	// The list of valid values for the configuration
	RecommendedValues *[]string `json:"recommended_values,omitempty"`
	// Errors, if any, in the configuration value
	Errors *[]string `json:"errors,omitempty"`
	// The visibility of the configuration. Based on the values of other configuration fields, this visibility boolean value points out if the current field should be visible or not.
	Visible *bool `json:"visible,omitempty"`
}

// NewInlineResponse2003Value instantiates a new InlineResponse2003Value object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInlineResponse2003Value() *InlineResponse2003Value {
	this := InlineResponse2003Value{}
	return &this
}

// NewInlineResponse2003ValueWithDefaults instantiates a new InlineResponse2003Value object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInlineResponse2003ValueWithDefaults() *InlineResponse2003Value {
	this := InlineResponse2003Value{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *InlineResponse2003Value) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineResponse2003Value) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *InlineResponse2003Value) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *InlineResponse2003Value) SetName(v string) {
	o.Name = &v
}

// GetValue returns the Value field value if set, zero value otherwise.
func (o *InlineResponse2003Value) GetValue() string {
	if o == nil || o.Value == nil {
		var ret string
		return ret
	}
	return *o.Value
}

// GetValueOk returns a tuple with the Value field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineResponse2003Value) GetValueOk() (*string, bool) {
	if o == nil || o.Value == nil {
		return nil, false
	}
	return o.Value, true
}

// HasValue returns a boolean if a field has been set.
func (o *InlineResponse2003Value) HasValue() bool {
	if o != nil && o.Value != nil {
		return true
	}

	return false
}

// SetValue gets a reference to the given string and assigns it to the Value field.
func (o *InlineResponse2003Value) SetValue(v string) {
	o.Value = &v
}

// GetRecommendedValues returns the RecommendedValues field value if set, zero value otherwise.
func (o *InlineResponse2003Value) GetRecommendedValues() []string {
	if o == nil || o.RecommendedValues == nil {
		var ret []string
		return ret
	}
	return *o.RecommendedValues
}

// GetRecommendedValuesOk returns a tuple with the RecommendedValues field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineResponse2003Value) GetRecommendedValuesOk() (*[]string, bool) {
	if o == nil || o.RecommendedValues == nil {
		return nil, false
	}
	return o.RecommendedValues, true
}

// HasRecommendedValues returns a boolean if a field has been set.
func (o *InlineResponse2003Value) HasRecommendedValues() bool {
	if o != nil && o.RecommendedValues != nil {
		return true
	}

	return false
}

// SetRecommendedValues gets a reference to the given []string and assigns it to the RecommendedValues field.
func (o *InlineResponse2003Value) SetRecommendedValues(v []string) {
	o.RecommendedValues = &v
}

// GetErrors returns the Errors field value if set, zero value otherwise.
func (o *InlineResponse2003Value) GetErrors() []string {
	if o == nil || o.Errors == nil {
		var ret []string
		return ret
	}
	return *o.Errors
}

// GetErrorsOk returns a tuple with the Errors field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineResponse2003Value) GetErrorsOk() (*[]string, bool) {
	if o == nil || o.Errors == nil {
		return nil, false
	}
	return o.Errors, true
}

// HasErrors returns a boolean if a field has been set.
func (o *InlineResponse2003Value) HasErrors() bool {
	if o != nil && o.Errors != nil {
		return true
	}

	return false
}

// SetErrors gets a reference to the given []string and assigns it to the Errors field.
func (o *InlineResponse2003Value) SetErrors(v []string) {
	o.Errors = &v
}

// GetVisible returns the Visible field value if set, zero value otherwise.
func (o *InlineResponse2003Value) GetVisible() bool {
	if o == nil || o.Visible == nil {
		var ret bool
		return ret
	}
	return *o.Visible
}

// GetVisibleOk returns a tuple with the Visible field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineResponse2003Value) GetVisibleOk() (*bool, bool) {
	if o == nil || o.Visible == nil {
		return nil, false
	}
	return o.Visible, true
}

// HasVisible returns a boolean if a field has been set.
func (o *InlineResponse2003Value) HasVisible() bool {
	if o != nil && o.Visible != nil {
		return true
	}

	return false
}

// SetVisible gets a reference to the given bool and assigns it to the Visible field.
func (o *InlineResponse2003Value) SetVisible(v bool) {
	o.Visible = &v
}

// Redact resets all sensitive fields to their zero value.
func (o *InlineResponse2003Value) Redact() {
    o.recurseRedact(o.Name)
    o.recurseRedact(o.Value)
    o.recurseRedact(o.RecommendedValues)
    o.recurseRedact(o.Errors)
    o.recurseRedact(o.Visible)
}

func (o *InlineResponse2003Value) recurseRedact(v interface{}) {
    type redactor interface {
        Redact()
    }
    if r, ok := v.(redactor); ok {
        r.Redact()
    } else {
        val := reflect.ValueOf(v)
        if val.Kind() == reflect.Ptr {
            val = val.Elem()
        }
        switch val.Kind() {
        case reflect.Slice, reflect.Array:
            for i := 0; i < val.Len(); i++ {
                // support data types declared without pointers
                o.recurseRedact(val.Index(i).Interface())
                // ... and data types that were declared without but need pointers (for Redact)
                if val.Index(i).CanAddr() {
                    o.recurseRedact(val.Index(i).Addr().Interface())
                }
            }
        }
    }
}

func (o InlineResponse2003Value) zeroField(v interface{}) {
    p := reflect.ValueOf(v).Elem()
    p.Set(reflect.Zero(p.Type()))
}

func (o InlineResponse2003Value) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.Value != nil {
		toSerialize["value"] = o.Value
	}
	if o.RecommendedValues != nil {
		toSerialize["recommended_values"] = o.RecommendedValues
	}
	if o.Errors != nil {
		toSerialize["errors"] = o.Errors
	}
	if o.Visible != nil {
		toSerialize["visible"] = o.Visible
	}
	return json.Marshal(toSerialize)
}

type NullableInlineResponse2003Value struct {
	value *InlineResponse2003Value
	isSet bool
}

func (v NullableInlineResponse2003Value) Get() *InlineResponse2003Value {
	return v.value
}

func (v *NullableInlineResponse2003Value) Set(val *InlineResponse2003Value) {
	v.value = val
	v.isSet = true
}

func (v NullableInlineResponse2003Value) IsSet() bool {
	return v.isSet
}

func (v *NullableInlineResponse2003Value) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInlineResponse2003Value(val *InlineResponse2003Value) *NullableInlineResponse2003Value {
	return &NullableInlineResponse2003Value{value: val, isSet: true}
}

func (v NullableInlineResponse2003Value) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInlineResponse2003Value) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


