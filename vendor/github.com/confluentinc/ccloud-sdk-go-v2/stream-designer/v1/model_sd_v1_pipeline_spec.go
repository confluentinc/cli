// Copyright 2021 Confluent Inc. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*
Stream Designer API

# Introduction  Stream Designer API provides resources/API for defining stream processing pipelines. Each pipeline describes a set of stream processing components, including connectors, topics, streams, tables, queries and schemas. The components in a pipeline need not exist as Confluent Cloud resources until the pipeline is activated.  This API defines operations to create, list, modify, manage and delete pipelines. 

API version: 0.0.1-alpha0
Contact: stream-designer@confluent.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1

import (
	"encoding/json"
)

import (
	"reflect"
)

// SdV1PipelineSpec The desired state of the Pipeline
type SdV1PipelineSpec struct {
	// The name of the pipeline.
	DisplayName *string `json:"display_name,omitempty"`
	// The description of the pipeline.
	Description *string `json:"description,omitempty"`
	// A list of Kafka topic names from the activated pipeline to be retained when this pipeline is deactivated. 
	RetainedTopicNames *[]string `json:"retained_topic_names,omitempty"`
	// The desired state of the pipeline.
	Activated *bool `json:"activated,omitempty"`
	// Whether the pipeline has privileges to be activated.
	ActivationPrivilege *bool `json:"activation_privilege,omitempty"`
	// A map of source code format and statements that define this pipeline.
	SourceCode *SdV1SourceCodeObject `json:"source_code,omitempty"`
	// A map of secrets used in the pipeline source code.
	Secrets *map[string]string `json:"secrets,omitempty"`
	// The environment to which this belongs.
	Environment *ObjectReference `json:"environment,omitempty"`
	// The kafka_cluster to which this belongs.
	KafkaCluster *ObjectReference `json:"kafka_cluster,omitempty"`
	// The ksql_cluster associated with this object.
	KsqlCluster *ObjectReference `json:"ksql_cluster,omitempty"`
	// The stream_governance_cluster associated with this object.
	StreamGovernanceCluster *ObjectReference `json:"stream_governance_cluster,omitempty"`
}

// NewSdV1PipelineSpec instantiates a new SdV1PipelineSpec object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSdV1PipelineSpec() *SdV1PipelineSpec {
	this := SdV1PipelineSpec{}
	var activated bool = false
	this.Activated = &activated
	var activationPrivilege bool = false
	this.ActivationPrivilege = &activationPrivilege
	return &this
}

// NewSdV1PipelineSpecWithDefaults instantiates a new SdV1PipelineSpec object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSdV1PipelineSpecWithDefaults() *SdV1PipelineSpec {
	this := SdV1PipelineSpec{}
	var activated bool = false
	this.Activated = &activated
	var activationPrivilege bool = false
	this.ActivationPrivilege = &activationPrivilege
	return &this
}

// GetDisplayName returns the DisplayName field value if set, zero value otherwise.
func (o *SdV1PipelineSpec) GetDisplayName() string {
	if o == nil || o.DisplayName == nil {
		var ret string
		return ret
	}
	return *o.DisplayName
}

// GetDisplayNameOk returns a tuple with the DisplayName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SdV1PipelineSpec) GetDisplayNameOk() (*string, bool) {
	if o == nil || o.DisplayName == nil {
		return nil, false
	}
	return o.DisplayName, true
}

// HasDisplayName returns a boolean if a field has been set.
func (o *SdV1PipelineSpec) HasDisplayName() bool {
	if o != nil && o.DisplayName != nil {
		return true
	}

	return false
}

// SetDisplayName gets a reference to the given string and assigns it to the DisplayName field.
func (o *SdV1PipelineSpec) SetDisplayName(v string) {
	o.DisplayName = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *SdV1PipelineSpec) GetDescription() string {
	if o == nil || o.Description == nil {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SdV1PipelineSpec) GetDescriptionOk() (*string, bool) {
	if o == nil || o.Description == nil {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *SdV1PipelineSpec) HasDescription() bool {
	if o != nil && o.Description != nil {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *SdV1PipelineSpec) SetDescription(v string) {
	o.Description = &v
}

// GetRetainedTopicNames returns the RetainedTopicNames field value if set, zero value otherwise.
func (o *SdV1PipelineSpec) GetRetainedTopicNames() []string {
	if o == nil || o.RetainedTopicNames == nil {
		var ret []string
		return ret
	}
	return *o.RetainedTopicNames
}

// GetRetainedTopicNamesOk returns a tuple with the RetainedTopicNames field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SdV1PipelineSpec) GetRetainedTopicNamesOk() (*[]string, bool) {
	if o == nil || o.RetainedTopicNames == nil {
		return nil, false
	}
	return o.RetainedTopicNames, true
}

// HasRetainedTopicNames returns a boolean if a field has been set.
func (o *SdV1PipelineSpec) HasRetainedTopicNames() bool {
	if o != nil && o.RetainedTopicNames != nil {
		return true
	}

	return false
}

// SetRetainedTopicNames gets a reference to the given []string and assigns it to the RetainedTopicNames field.
func (o *SdV1PipelineSpec) SetRetainedTopicNames(v []string) {
	o.RetainedTopicNames = &v
}

// GetActivated returns the Activated field value if set, zero value otherwise.
func (o *SdV1PipelineSpec) GetActivated() bool {
	if o == nil || o.Activated == nil {
		var ret bool
		return ret
	}
	return *o.Activated
}

// GetActivatedOk returns a tuple with the Activated field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SdV1PipelineSpec) GetActivatedOk() (*bool, bool) {
	if o == nil || o.Activated == nil {
		return nil, false
	}
	return o.Activated, true
}

// HasActivated returns a boolean if a field has been set.
func (o *SdV1PipelineSpec) HasActivated() bool {
	if o != nil && o.Activated != nil {
		return true
	}

	return false
}

// SetActivated gets a reference to the given bool and assigns it to the Activated field.
func (o *SdV1PipelineSpec) SetActivated(v bool) {
	o.Activated = &v
}

// GetActivationPrivilege returns the ActivationPrivilege field value if set, zero value otherwise.
func (o *SdV1PipelineSpec) GetActivationPrivilege() bool {
	if o == nil || o.ActivationPrivilege == nil {
		var ret bool
		return ret
	}
	return *o.ActivationPrivilege
}

// GetActivationPrivilegeOk returns a tuple with the ActivationPrivilege field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SdV1PipelineSpec) GetActivationPrivilegeOk() (*bool, bool) {
	if o == nil || o.ActivationPrivilege == nil {
		return nil, false
	}
	return o.ActivationPrivilege, true
}

// HasActivationPrivilege returns a boolean if a field has been set.
func (o *SdV1PipelineSpec) HasActivationPrivilege() bool {
	if o != nil && o.ActivationPrivilege != nil {
		return true
	}

	return false
}

// SetActivationPrivilege gets a reference to the given bool and assigns it to the ActivationPrivilege field.
func (o *SdV1PipelineSpec) SetActivationPrivilege(v bool) {
	o.ActivationPrivilege = &v
}

// GetSourceCode returns the SourceCode field value if set, zero value otherwise.
func (o *SdV1PipelineSpec) GetSourceCode() SdV1SourceCodeObject {
	if o == nil || o.SourceCode == nil {
		var ret SdV1SourceCodeObject
		return ret
	}
	return *o.SourceCode
}

// GetSourceCodeOk returns a tuple with the SourceCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SdV1PipelineSpec) GetSourceCodeOk() (*SdV1SourceCodeObject, bool) {
	if o == nil || o.SourceCode == nil {
		return nil, false
	}
	return o.SourceCode, true
}

// HasSourceCode returns a boolean if a field has been set.
func (o *SdV1PipelineSpec) HasSourceCode() bool {
	if o != nil && o.SourceCode != nil {
		return true
	}

	return false
}

// SetSourceCode gets a reference to the given SdV1SourceCodeObject and assigns it to the SourceCode field.
func (o *SdV1PipelineSpec) SetSourceCode(v SdV1SourceCodeObject) {
	o.SourceCode = &v
}

// GetSecrets returns the Secrets field value if set, zero value otherwise.
func (o *SdV1PipelineSpec) GetSecrets() map[string]string {
	if o == nil || o.Secrets == nil {
		var ret map[string]string
		return ret
	}
	return *o.Secrets
}

// GetSecretsOk returns a tuple with the Secrets field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SdV1PipelineSpec) GetSecretsOk() (*map[string]string, bool) {
	if o == nil || o.Secrets == nil {
		return nil, false
	}
	return o.Secrets, true
}

// HasSecrets returns a boolean if a field has been set.
func (o *SdV1PipelineSpec) HasSecrets() bool {
	if o != nil && o.Secrets != nil {
		return true
	}

	return false
}

// SetSecrets gets a reference to the given map[string]string and assigns it to the Secrets field.
func (o *SdV1PipelineSpec) SetSecrets(v map[string]string) {
	o.Secrets = &v
}

// GetEnvironment returns the Environment field value if set, zero value otherwise.
func (o *SdV1PipelineSpec) GetEnvironment() ObjectReference {
	if o == nil || o.Environment == nil {
		var ret ObjectReference
		return ret
	}
	return *o.Environment
}

// GetEnvironmentOk returns a tuple with the Environment field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SdV1PipelineSpec) GetEnvironmentOk() (*ObjectReference, bool) {
	if o == nil || o.Environment == nil {
		return nil, false
	}
	return o.Environment, true
}

// HasEnvironment returns a boolean if a field has been set.
func (o *SdV1PipelineSpec) HasEnvironment() bool {
	if o != nil && o.Environment != nil {
		return true
	}

	return false
}

// SetEnvironment gets a reference to the given ObjectReference and assigns it to the Environment field.
func (o *SdV1PipelineSpec) SetEnvironment(v ObjectReference) {
	o.Environment = &v
}

// GetKafkaCluster returns the KafkaCluster field value if set, zero value otherwise.
func (o *SdV1PipelineSpec) GetKafkaCluster() ObjectReference {
	if o == nil || o.KafkaCluster == nil {
		var ret ObjectReference
		return ret
	}
	return *o.KafkaCluster
}

// GetKafkaClusterOk returns a tuple with the KafkaCluster field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SdV1PipelineSpec) GetKafkaClusterOk() (*ObjectReference, bool) {
	if o == nil || o.KafkaCluster == nil {
		return nil, false
	}
	return o.KafkaCluster, true
}

// HasKafkaCluster returns a boolean if a field has been set.
func (o *SdV1PipelineSpec) HasKafkaCluster() bool {
	if o != nil && o.KafkaCluster != nil {
		return true
	}

	return false
}

// SetKafkaCluster gets a reference to the given ObjectReference and assigns it to the KafkaCluster field.
func (o *SdV1PipelineSpec) SetKafkaCluster(v ObjectReference) {
	o.KafkaCluster = &v
}

// GetKsqlCluster returns the KsqlCluster field value if set, zero value otherwise.
func (o *SdV1PipelineSpec) GetKsqlCluster() ObjectReference {
	if o == nil || o.KsqlCluster == nil {
		var ret ObjectReference
		return ret
	}
	return *o.KsqlCluster
}

// GetKsqlClusterOk returns a tuple with the KsqlCluster field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SdV1PipelineSpec) GetKsqlClusterOk() (*ObjectReference, bool) {
	if o == nil || o.KsqlCluster == nil {
		return nil, false
	}
	return o.KsqlCluster, true
}

// HasKsqlCluster returns a boolean if a field has been set.
func (o *SdV1PipelineSpec) HasKsqlCluster() bool {
	if o != nil && o.KsqlCluster != nil {
		return true
	}

	return false
}

// SetKsqlCluster gets a reference to the given ObjectReference and assigns it to the KsqlCluster field.
func (o *SdV1PipelineSpec) SetKsqlCluster(v ObjectReference) {
	o.KsqlCluster = &v
}

// GetStreamGovernanceCluster returns the StreamGovernanceCluster field value if set, zero value otherwise.
func (o *SdV1PipelineSpec) GetStreamGovernanceCluster() ObjectReference {
	if o == nil || o.StreamGovernanceCluster == nil {
		var ret ObjectReference
		return ret
	}
	return *o.StreamGovernanceCluster
}

// GetStreamGovernanceClusterOk returns a tuple with the StreamGovernanceCluster field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SdV1PipelineSpec) GetStreamGovernanceClusterOk() (*ObjectReference, bool) {
	if o == nil || o.StreamGovernanceCluster == nil {
		return nil, false
	}
	return o.StreamGovernanceCluster, true
}

// HasStreamGovernanceCluster returns a boolean if a field has been set.
func (o *SdV1PipelineSpec) HasStreamGovernanceCluster() bool {
	if o != nil && o.StreamGovernanceCluster != nil {
		return true
	}

	return false
}

// SetStreamGovernanceCluster gets a reference to the given ObjectReference and assigns it to the StreamGovernanceCluster field.
func (o *SdV1PipelineSpec) SetStreamGovernanceCluster(v ObjectReference) {
	o.StreamGovernanceCluster = &v
}

// Redact resets all sensitive fields to their zero value.
func (o *SdV1PipelineSpec) Redact() {
    o.recurseRedact(o.DisplayName)
    o.recurseRedact(o.Description)
    o.recurseRedact(o.RetainedTopicNames)
    o.recurseRedact(o.Activated)
    o.recurseRedact(o.ActivationPrivilege)
    o.recurseRedact(o.SourceCode)
    o.recurseRedact(o.Secrets)
    o.recurseRedact(o.Environment)
    o.recurseRedact(o.KafkaCluster)
    o.recurseRedact(o.KsqlCluster)
    o.recurseRedact(o.StreamGovernanceCluster)
}

func (o *SdV1PipelineSpec) recurseRedact(v interface{}) {
    type redactor interface {
        Redact()
    }
    if r, ok := v.(redactor); ok {
        r.Redact()
    } else {
        val := reflect.ValueOf(v)
        if val.Kind() == reflect.Ptr {
            val = val.Elem()
        }
        switch val.Kind() {
        case reflect.Slice, reflect.Array:
            for i := 0; i < val.Len(); i++ {
                // support data types declared without pointers
                o.recurseRedact(val.Index(i).Interface())
                // ... and data types that were declared without but need pointers (for Redact)
                if val.Index(i).CanAddr() {
                    o.recurseRedact(val.Index(i).Addr().Interface())
                }
            }
        }
    }
}

func (o SdV1PipelineSpec) zeroField(v interface{}) {
    p := reflect.ValueOf(v).Elem()
    p.Set(reflect.Zero(p.Type()))
}

func (o SdV1PipelineSpec) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.DisplayName != nil {
		toSerialize["display_name"] = o.DisplayName
	}
	if o.Description != nil {
		toSerialize["description"] = o.Description
	}
	if o.RetainedTopicNames != nil {
		toSerialize["retained_topic_names"] = o.RetainedTopicNames
	}
	if o.Activated != nil {
		toSerialize["activated"] = o.Activated
	}
	if o.ActivationPrivilege != nil {
		toSerialize["activation_privilege"] = o.ActivationPrivilege
	}
	if o.SourceCode != nil {
		toSerialize["source_code"] = o.SourceCode
	}
	if o.Secrets != nil {
		toSerialize["secrets"] = o.Secrets
	}
	if o.Environment != nil {
		toSerialize["environment"] = o.Environment
	}
	if o.KafkaCluster != nil {
		toSerialize["kafka_cluster"] = o.KafkaCluster
	}
	if o.KsqlCluster != nil {
		toSerialize["ksql_cluster"] = o.KsqlCluster
	}
	if o.StreamGovernanceCluster != nil {
		toSerialize["stream_governance_cluster"] = o.StreamGovernanceCluster
	}
	return json.Marshal(toSerialize)
}

type NullableSdV1PipelineSpec struct {
	value *SdV1PipelineSpec
	isSet bool
}

func (v NullableSdV1PipelineSpec) Get() *SdV1PipelineSpec {
	return v.value
}

func (v *NullableSdV1PipelineSpec) Set(val *SdV1PipelineSpec) {
	v.value = val
	v.isSet = true
}

func (v NullableSdV1PipelineSpec) IsSet() bool {
	return v.isSet
}

func (v *NullableSdV1PipelineSpec) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSdV1PipelineSpec(val *SdV1PipelineSpec) *NullableSdV1PipelineSpec {
	return &NullableSdV1PipelineSpec{value: val, isSet: true}
}

func (v NullableSdV1PipelineSpec) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSdV1PipelineSpec) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


