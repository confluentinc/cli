// Copyright 2021 Confluent Inc. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*
Stream Designer API

# Introduction  Stream Designer API provides resources/API for defining stream processing pipelines. Each pipeline describes a set of stream processing components, including connectors, topics, streams, tables, queries and schemas. The components in a pipeline need not exist as Confluent Cloud resources until the pipeline is activated.  This API defines operations to create, list, modify, manage and delete pipelines. 

API version: 0.0.1-alpha0
Contact: stream-designer@confluent.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1

import (
	"encoding/json"
)

import (
	"reflect"
)

// SdV1PipelineStatus The status of the Pipeline
type SdV1PipelineStatus struct {
	// The current state of the pipeline.:   DRAFT:  the pipeline is a draft and not activated yet;   ACTIVATING:  the pipeline activation is in progress;   DEACTIVATING:  the pipeline deactivation is in progress;   ACTIVE:  the pipeline is actived and running;   FAILED:  the pipeline activation or deactivation failed;   DELETED:  the pipeline is deleted 
	State *string `json:"state,omitempty"`
	// The number of Kafka topics defined in the pipeline.
	TopicCount *int32 `json:"topic_count,omitempty"`
	// The number of connectors defined in the pipeline.
	ConnectorCount *int32 `json:"connector_count,omitempty"`
	// The number of KSQL queries defined in the pipeline.
	QueryCount *int32 `json:"query_count,omitempty"`
}

// NewSdV1PipelineStatus instantiates a new SdV1PipelineStatus object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSdV1PipelineStatus() *SdV1PipelineStatus {
	this := SdV1PipelineStatus{}
	return &this
}

// NewSdV1PipelineStatusWithDefaults instantiates a new SdV1PipelineStatus object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSdV1PipelineStatusWithDefaults() *SdV1PipelineStatus {
	this := SdV1PipelineStatus{}
	return &this
}

// GetState returns the State field value if set, zero value otherwise.
func (o *SdV1PipelineStatus) GetState() string {
	if o == nil || o.State == nil {
		var ret string
		return ret
	}
	return *o.State
}

// GetStateOk returns a tuple with the State field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SdV1PipelineStatus) GetStateOk() (*string, bool) {
	if o == nil || o.State == nil {
		return nil, false
	}
	return o.State, true
}

// HasState returns a boolean if a field has been set.
func (o *SdV1PipelineStatus) HasState() bool {
	if o != nil && o.State != nil {
		return true
	}

	return false
}

// SetState gets a reference to the given string and assigns it to the State field.
func (o *SdV1PipelineStatus) SetState(v string) {
	o.State = &v
}

// GetTopicCount returns the TopicCount field value if set, zero value otherwise.
func (o *SdV1PipelineStatus) GetTopicCount() int32 {
	if o == nil || o.TopicCount == nil {
		var ret int32
		return ret
	}
	return *o.TopicCount
}

// GetTopicCountOk returns a tuple with the TopicCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SdV1PipelineStatus) GetTopicCountOk() (*int32, bool) {
	if o == nil || o.TopicCount == nil {
		return nil, false
	}
	return o.TopicCount, true
}

// HasTopicCount returns a boolean if a field has been set.
func (o *SdV1PipelineStatus) HasTopicCount() bool {
	if o != nil && o.TopicCount != nil {
		return true
	}

	return false
}

// SetTopicCount gets a reference to the given int32 and assigns it to the TopicCount field.
func (o *SdV1PipelineStatus) SetTopicCount(v int32) {
	o.TopicCount = &v
}

// GetConnectorCount returns the ConnectorCount field value if set, zero value otherwise.
func (o *SdV1PipelineStatus) GetConnectorCount() int32 {
	if o == nil || o.ConnectorCount == nil {
		var ret int32
		return ret
	}
	return *o.ConnectorCount
}

// GetConnectorCountOk returns a tuple with the ConnectorCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SdV1PipelineStatus) GetConnectorCountOk() (*int32, bool) {
	if o == nil || o.ConnectorCount == nil {
		return nil, false
	}
	return o.ConnectorCount, true
}

// HasConnectorCount returns a boolean if a field has been set.
func (o *SdV1PipelineStatus) HasConnectorCount() bool {
	if o != nil && o.ConnectorCount != nil {
		return true
	}

	return false
}

// SetConnectorCount gets a reference to the given int32 and assigns it to the ConnectorCount field.
func (o *SdV1PipelineStatus) SetConnectorCount(v int32) {
	o.ConnectorCount = &v
}

// GetQueryCount returns the QueryCount field value if set, zero value otherwise.
func (o *SdV1PipelineStatus) GetQueryCount() int32 {
	if o == nil || o.QueryCount == nil {
		var ret int32
		return ret
	}
	return *o.QueryCount
}

// GetQueryCountOk returns a tuple with the QueryCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SdV1PipelineStatus) GetQueryCountOk() (*int32, bool) {
	if o == nil || o.QueryCount == nil {
		return nil, false
	}
	return o.QueryCount, true
}

// HasQueryCount returns a boolean if a field has been set.
func (o *SdV1PipelineStatus) HasQueryCount() bool {
	if o != nil && o.QueryCount != nil {
		return true
	}

	return false
}

// SetQueryCount gets a reference to the given int32 and assigns it to the QueryCount field.
func (o *SdV1PipelineStatus) SetQueryCount(v int32) {
	o.QueryCount = &v
}

// Redact resets all sensitive fields to their zero value.
func (o *SdV1PipelineStatus) Redact() {
    o.recurseRedact(o.State)
    o.recurseRedact(o.TopicCount)
    o.recurseRedact(o.ConnectorCount)
    o.recurseRedact(o.QueryCount)
}

func (o *SdV1PipelineStatus) recurseRedact(v interface{}) {
    type redactor interface {
        Redact()
    }
    if r, ok := v.(redactor); ok {
        r.Redact()
    } else {
        val := reflect.ValueOf(v)
        if val.Kind() == reflect.Ptr {
            val = val.Elem()
        }
        switch val.Kind() {
        case reflect.Slice, reflect.Array:
            for i := 0; i < val.Len(); i++ {
                // support data types declared without pointers
                o.recurseRedact(val.Index(i).Interface())
                // ... and data types that were declared without but need pointers (for Redact)
                if val.Index(i).CanAddr() {
                    o.recurseRedact(val.Index(i).Addr().Interface())
                }
            }
        }
    }
}

func (o SdV1PipelineStatus) zeroField(v interface{}) {
    p := reflect.ValueOf(v).Elem()
    p.Set(reflect.Zero(p.Type()))
}

func (o SdV1PipelineStatus) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.State != nil {
		toSerialize["state"] = o.State
	}
	if o.TopicCount != nil {
		toSerialize["topic_count"] = o.TopicCount
	}
	if o.ConnectorCount != nil {
		toSerialize["connector_count"] = o.ConnectorCount
	}
	if o.QueryCount != nil {
		toSerialize["query_count"] = o.QueryCount
	}
	return json.Marshal(toSerialize)
}

type NullableSdV1PipelineStatus struct {
	value *SdV1PipelineStatus
	isSet bool
}

func (v NullableSdV1PipelineStatus) Get() *SdV1PipelineStatus {
	return v.value
}

func (v *NullableSdV1PipelineStatus) Set(val *SdV1PipelineStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableSdV1PipelineStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableSdV1PipelineStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSdV1PipelineStatus(val *SdV1PipelineStatus) *NullableSdV1PipelineStatus {
	return &NullableSdV1PipelineStatus{value: val, isSet: true}
}

func (v NullableSdV1PipelineStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSdV1PipelineStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


