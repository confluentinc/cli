// Copyright 2021 Confluent Inc. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*
Key Management API for BYOK

Upload and retrieve self-managed keys on dedicated Confluent Cloud clusters.

API version: 0.0.1
Contact: cire-storage@confluent.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// ByokV1KeyKeyOneOf - struct for ByokV1KeyKeyOneOf
type ByokV1KeyKeyOneOf struct {
	ByokV1AwsKey   *ByokV1AwsKey
	ByokV1AzureKey *ByokV1AzureKey
	ByokV1GcpKey   *ByokV1GcpKey
}

// ByokV1AwsKeyAsByokV1KeyKeyOneOf is a convenience function that returns ByokV1AwsKey wrapped in ByokV1KeyKeyOneOf
func ByokV1AwsKeyAsByokV1KeyKeyOneOf(v *ByokV1AwsKey) ByokV1KeyKeyOneOf {
	return ByokV1KeyKeyOneOf{ByokV1AwsKey: v}
}

// ByokV1AzureKeyAsByokV1KeyKeyOneOf is a convenience function that returns ByokV1AzureKey wrapped in ByokV1KeyKeyOneOf
func ByokV1AzureKeyAsByokV1KeyKeyOneOf(v *ByokV1AzureKey) ByokV1KeyKeyOneOf {
	return ByokV1KeyKeyOneOf{ByokV1AzureKey: v}
}

// ByokV1GcpKeyAsByokV1KeyKeyOneOf is a convenience function that returns ByokV1GcpKey wrapped in ByokV1KeyKeyOneOf
func ByokV1GcpKeyAsByokV1KeyKeyOneOf(v *ByokV1GcpKey) ByokV1KeyKeyOneOf {
	return ByokV1KeyKeyOneOf{ByokV1GcpKey: v}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *ByokV1KeyKeyOneOf) UnmarshalJSON(data []byte) error {
	var err error
	// use discriminator value to speed up the lookup
	var jsonDict map[string]interface{}
	err = json.Unmarshal(data, &jsonDict)
	if err != nil {
		return fmt.Errorf("Failed to unmarshal JSON into map for the discriminator lookup.")
	}

	// check if the discriminator value is 'AwsKey'
	if jsonDict["kind"] == "AwsKey" {
		// try to unmarshal JSON data into ByokV1AwsKey
		err = json.Unmarshal(data, &dst.ByokV1AwsKey)
		if err == nil {
			return nil // data stored in dst.ByokV1AwsKey, return on the first match
		} else {
			dst.ByokV1AwsKey = nil
			return fmt.Errorf("Failed to unmarshal ByokV1KeyKeyOneOf as ByokV1AwsKey: %s", err.Error())
		}
	}

	// check if the discriminator value is 'AzureKey'
	if jsonDict["kind"] == "AzureKey" {
		// try to unmarshal JSON data into ByokV1AzureKey
		err = json.Unmarshal(data, &dst.ByokV1AzureKey)
		if err == nil {
			return nil // data stored in dst.ByokV1AzureKey, return on the first match
		} else {
			dst.ByokV1AzureKey = nil
			return fmt.Errorf("Failed to unmarshal ByokV1KeyKeyOneOf as ByokV1AzureKey: %s", err.Error())
		}
	}

	// check if the discriminator value is 'GcpKey'
	if jsonDict["kind"] == "GcpKey" {
		// try to unmarshal JSON data into ByokV1GcpKey
		err = json.Unmarshal(data, &dst.ByokV1GcpKey)
		if err == nil {
			return nil // data stored in dst.ByokV1GcpKey, return on the first match
		} else {
			dst.ByokV1GcpKey = nil
			return fmt.Errorf("Failed to unmarshal ByokV1KeyKeyOneOf as ByokV1GcpKey: %s", err.Error())
		}
	}

	// check if the discriminator value is 'byok.v1.AwsKey'
	if jsonDict["kind"] == "byok.v1.AwsKey" {
		// try to unmarshal JSON data into ByokV1AwsKey
		err = json.Unmarshal(data, &dst.ByokV1AwsKey)
		if err == nil {
			return nil // data stored in dst.ByokV1AwsKey, return on the first match
		} else {
			dst.ByokV1AwsKey = nil
			return fmt.Errorf("Failed to unmarshal ByokV1KeyKeyOneOf as ByokV1AwsKey: %s", err.Error())
		}
	}

	// check if the discriminator value is 'byok.v1.AzureKey'
	if jsonDict["kind"] == "byok.v1.AzureKey" {
		// try to unmarshal JSON data into ByokV1AzureKey
		err = json.Unmarshal(data, &dst.ByokV1AzureKey)
		if err == nil {
			return nil // data stored in dst.ByokV1AzureKey, return on the first match
		} else {
			dst.ByokV1AzureKey = nil
			return fmt.Errorf("Failed to unmarshal ByokV1KeyKeyOneOf as ByokV1AzureKey: %s", err.Error())
		}
	}

	// check if the discriminator value is 'byok.v1.GcpKey'
	if jsonDict["kind"] == "byok.v1.GcpKey" {
		// try to unmarshal JSON data into ByokV1GcpKey
		err = json.Unmarshal(data, &dst.ByokV1GcpKey)
		if err == nil {
			return nil // data stored in dst.ByokV1GcpKey, return on the first match
		} else {
			dst.ByokV1GcpKey = nil
			return fmt.Errorf("Failed to unmarshal ByokV1KeyKeyOneOf as ByokV1GcpKey: %s", err.Error())
		}
	}

	return nil
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src ByokV1KeyKeyOneOf) MarshalJSON() ([]byte, error) {
	if src.ByokV1AwsKey != nil {
		buffer := &bytes.Buffer{}
		encoder := json.NewEncoder(buffer)
		encoder.SetEscapeHTML(false)
		err := encoder.Encode(&src.ByokV1AwsKey)
		return buffer.Bytes(), err
	}

	if src.ByokV1AzureKey != nil {
		buffer := &bytes.Buffer{}
		encoder := json.NewEncoder(buffer)
		encoder.SetEscapeHTML(false)
		err := encoder.Encode(&src.ByokV1AzureKey)
		return buffer.Bytes(), err
	}

	if src.ByokV1GcpKey != nil {
		buffer := &bytes.Buffer{}
		encoder := json.NewEncoder(buffer)
		encoder.SetEscapeHTML(false)
		err := encoder.Encode(&src.ByokV1GcpKey)
		return buffer.Bytes(), err
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *ByokV1KeyKeyOneOf) GetActualInstance() interface{} {
	if obj.ByokV1AwsKey != nil {
		return obj.ByokV1AwsKey
	}

	if obj.ByokV1AzureKey != nil {
		return obj.ByokV1AzureKey
	}

	if obj.ByokV1GcpKey != nil {
		return obj.ByokV1GcpKey
	}

	// all schemas are nil
	return nil
}

type NullableByokV1KeyKeyOneOf struct {
	value *ByokV1KeyKeyOneOf
	isSet bool
}

func (v NullableByokV1KeyKeyOneOf) Get() *ByokV1KeyKeyOneOf {
	return v.value
}

func (v *NullableByokV1KeyKeyOneOf) Set(val *ByokV1KeyKeyOneOf) {
	v.value = val
	v.isSet = true
}

func (v NullableByokV1KeyKeyOneOf) IsSet() bool {
	return v.isSet
}

func (v *NullableByokV1KeyKeyOneOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableByokV1KeyKeyOneOf(val *ByokV1KeyKeyOneOf) *NullableByokV1KeyKeyOneOf {
	return &NullableByokV1KeyKeyOneOf{value: val, isSet: true}
}

func (v NullableByokV1KeyKeyOneOf) MarshalJSON() ([]byte, error) {
	buffer := &bytes.Buffer{}
	encoder := json.NewEncoder(buffer)
	encoder.SetEscapeHTML(false)
	err := encoder.Encode(v.value)
	return buffer.Bytes(), err
}

func (v *NullableByokV1KeyKeyOneOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
