// Copyright 2021 Confluent Inc. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*
CLI API

API to collect data on CLI commands run while logged in to Confluent Cloud

API version: 0.2.0
Contact: cli-team@confluent.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1

import (
	"bytes"
	"encoding/json"
)

import (
	"reflect"
)

// CliV1Usage `Usage` objects represent CLI commands that were run while logged in to Confluent Cloud. The API creates usage objects that are collected for CLI analytics.   ## The Usages Model <SchemaDefinition schemaRef=\"#/components/schemas/cli.v1.Usage\" />
type CliV1Usage struct {
	// APIVersion defines the schema version of this representation of a resource.
	ApiVersion *string `json:"api_version,omitempty"`
	// Kind defines the object this REST resource represents.
	Kind *string `json:"kind,omitempty"`
	// ID is the \"natural identifier\" for an object within its scope/namespace; it is normally unique across time but not space. That is, you can assume that the ID will not be reclaimed and reused after an object is deleted (\"time\"); however, it may collide with IDs for other object `kinds` or objects of the same `kind` within a different scope/namespace (\"space\").
	Id       *string     `json:"id,omitempty"`
	Metadata *ObjectMeta `json:"metadata,omitempty"`
	// Operating system of the CLI binary used to run the command
	Os *string `json:"os,omitempty"`
	// Architecture of the CLI binary used to run the command
	Arch *string `json:"arch,omitempty"`
	// Version of the CLI binary used to run the command
	Version *string `json:"version,omitempty"`
	// CLI command that was run
	Command *string `json:"command,omitempty"`
	// Names of the flags passed with the CLI command
	Flags *[]string `json:"flags,omitempty"`
	// If an error occurred while running the CLI command
	Error *bool `json:"error,omitempty"`
	// Line numbers of the stack trace from a panic
	StackFrames *[]string `json:"stack_frames,omitempty"`
}

// NewCliV1Usage instantiates a new CliV1Usage object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCliV1Usage() *CliV1Usage {
	this := CliV1Usage{}
	return &this
}

// NewCliV1UsageWithDefaults instantiates a new CliV1Usage object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCliV1UsageWithDefaults() *CliV1Usage {
	this := CliV1Usage{}
	return &this
}

// GetApiVersion returns the ApiVersion field value if set, zero value otherwise.
func (o *CliV1Usage) GetApiVersion() string {
	if o == nil || o.ApiVersion == nil {
		var ret string
		return ret
	}
	return *o.ApiVersion
}

// GetApiVersionOk returns a tuple with the ApiVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CliV1Usage) GetApiVersionOk() (*string, bool) {
	if o == nil || o.ApiVersion == nil {
		return nil, false
	}
	return o.ApiVersion, true
}

// HasApiVersion returns a boolean if a field has been set.
func (o *CliV1Usage) HasApiVersion() bool {
	if o != nil && o.ApiVersion != nil {
		return true
	}

	return false
}

// SetApiVersion gets a reference to the given string and assigns it to the ApiVersion field.
func (o *CliV1Usage) SetApiVersion(v string) {
	o.ApiVersion = &v
}

// GetKind returns the Kind field value if set, zero value otherwise.
func (o *CliV1Usage) GetKind() string {
	if o == nil || o.Kind == nil {
		var ret string
		return ret
	}
	return *o.Kind
}

// GetKindOk returns a tuple with the Kind field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CliV1Usage) GetKindOk() (*string, bool) {
	if o == nil || o.Kind == nil {
		return nil, false
	}
	return o.Kind, true
}

// HasKind returns a boolean if a field has been set.
func (o *CliV1Usage) HasKind() bool {
	if o != nil && o.Kind != nil {
		return true
	}

	return false
}

// SetKind gets a reference to the given string and assigns it to the Kind field.
func (o *CliV1Usage) SetKind(v string) {
	o.Kind = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *CliV1Usage) GetId() string {
	if o == nil || o.Id == nil {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CliV1Usage) GetIdOk() (*string, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *CliV1Usage) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *CliV1Usage) SetId(v string) {
	o.Id = &v
}

// GetMetadata returns the Metadata field value if set, zero value otherwise.
func (o *CliV1Usage) GetMetadata() ObjectMeta {
	if o == nil || o.Metadata == nil {
		var ret ObjectMeta
		return ret
	}
	return *o.Metadata
}

// GetMetadataOk returns a tuple with the Metadata field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CliV1Usage) GetMetadataOk() (*ObjectMeta, bool) {
	if o == nil || o.Metadata == nil {
		return nil, false
	}
	return o.Metadata, true
}

// HasMetadata returns a boolean if a field has been set.
func (o *CliV1Usage) HasMetadata() bool {
	if o != nil && o.Metadata != nil {
		return true
	}

	return false
}

// SetMetadata gets a reference to the given ObjectMeta and assigns it to the Metadata field.
func (o *CliV1Usage) SetMetadata(v ObjectMeta) {
	o.Metadata = &v
}

// GetOs returns the Os field value if set, zero value otherwise.
func (o *CliV1Usage) GetOs() string {
	if o == nil || o.Os == nil {
		var ret string
		return ret
	}
	return *o.Os
}

// GetOsOk returns a tuple with the Os field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CliV1Usage) GetOsOk() (*string, bool) {
	if o == nil || o.Os == nil {
		return nil, false
	}
	return o.Os, true
}

// HasOs returns a boolean if a field has been set.
func (o *CliV1Usage) HasOs() bool {
	if o != nil && o.Os != nil {
		return true
	}

	return false
}

// SetOs gets a reference to the given string and assigns it to the Os field.
func (o *CliV1Usage) SetOs(v string) {
	o.Os = &v
}

// GetArch returns the Arch field value if set, zero value otherwise.
func (o *CliV1Usage) GetArch() string {
	if o == nil || o.Arch == nil {
		var ret string
		return ret
	}
	return *o.Arch
}

// GetArchOk returns a tuple with the Arch field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CliV1Usage) GetArchOk() (*string, bool) {
	if o == nil || o.Arch == nil {
		return nil, false
	}
	return o.Arch, true
}

// HasArch returns a boolean if a field has been set.
func (o *CliV1Usage) HasArch() bool {
	if o != nil && o.Arch != nil {
		return true
	}

	return false
}

// SetArch gets a reference to the given string and assigns it to the Arch field.
func (o *CliV1Usage) SetArch(v string) {
	o.Arch = &v
}

// GetVersion returns the Version field value if set, zero value otherwise.
func (o *CliV1Usage) GetVersion() string {
	if o == nil || o.Version == nil {
		var ret string
		return ret
	}
	return *o.Version
}

// GetVersionOk returns a tuple with the Version field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CliV1Usage) GetVersionOk() (*string, bool) {
	if o == nil || o.Version == nil {
		return nil, false
	}
	return o.Version, true
}

// HasVersion returns a boolean if a field has been set.
func (o *CliV1Usage) HasVersion() bool {
	if o != nil && o.Version != nil {
		return true
	}

	return false
}

// SetVersion gets a reference to the given string and assigns it to the Version field.
func (o *CliV1Usage) SetVersion(v string) {
	o.Version = &v
}

// GetCommand returns the Command field value if set, zero value otherwise.
func (o *CliV1Usage) GetCommand() string {
	if o == nil || o.Command == nil {
		var ret string
		return ret
	}
	return *o.Command
}

// GetCommandOk returns a tuple with the Command field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CliV1Usage) GetCommandOk() (*string, bool) {
	if o == nil || o.Command == nil {
		return nil, false
	}
	return o.Command, true
}

// HasCommand returns a boolean if a field has been set.
func (o *CliV1Usage) HasCommand() bool {
	if o != nil && o.Command != nil {
		return true
	}

	return false
}

// SetCommand gets a reference to the given string and assigns it to the Command field.
func (o *CliV1Usage) SetCommand(v string) {
	o.Command = &v
}

// GetFlags returns the Flags field value if set, zero value otherwise.
func (o *CliV1Usage) GetFlags() []string {
	if o == nil || o.Flags == nil {
		var ret []string
		return ret
	}
	return *o.Flags
}

// GetFlagsOk returns a tuple with the Flags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CliV1Usage) GetFlagsOk() (*[]string, bool) {
	if o == nil || o.Flags == nil {
		return nil, false
	}
	return o.Flags, true
}

// HasFlags returns a boolean if a field has been set.
func (o *CliV1Usage) HasFlags() bool {
	if o != nil && o.Flags != nil {
		return true
	}

	return false
}

// SetFlags gets a reference to the given []string and assigns it to the Flags field.
func (o *CliV1Usage) SetFlags(v []string) {
	o.Flags = &v
}

// GetError returns the Error field value if set, zero value otherwise.
func (o *CliV1Usage) GetError() bool {
	if o == nil || o.Error == nil {
		var ret bool
		return ret
	}
	return *o.Error
}

// GetErrorOk returns a tuple with the Error field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CliV1Usage) GetErrorOk() (*bool, bool) {
	if o == nil || o.Error == nil {
		return nil, false
	}
	return o.Error, true
}

// HasError returns a boolean if a field has been set.
func (o *CliV1Usage) HasError() bool {
	if o != nil && o.Error != nil {
		return true
	}

	return false
}

// SetError gets a reference to the given bool and assigns it to the Error field.
func (o *CliV1Usage) SetError(v bool) {
	o.Error = &v
}

// GetStackFrames returns the StackFrames field value if set, zero value otherwise.
func (o *CliV1Usage) GetStackFrames() []string {
	if o == nil || o.StackFrames == nil {
		var ret []string
		return ret
	}
	return *o.StackFrames
}

// GetStackFramesOk returns a tuple with the StackFrames field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CliV1Usage) GetStackFramesOk() (*[]string, bool) {
	if o == nil || o.StackFrames == nil {
		return nil, false
	}
	return o.StackFrames, true
}

// HasStackFrames returns a boolean if a field has been set.
func (o *CliV1Usage) HasStackFrames() bool {
	if o != nil && o.StackFrames != nil {
		return true
	}

	return false
}

// SetStackFrames gets a reference to the given []string and assigns it to the StackFrames field.
func (o *CliV1Usage) SetStackFrames(v []string) {
	o.StackFrames = &v
}

// Redact resets all sensitive fields to their zero value.
func (o *CliV1Usage) Redact() {
	o.recurseRedact(o.ApiVersion)
	o.recurseRedact(o.Kind)
	o.recurseRedact(o.Id)
	o.recurseRedact(o.Metadata)
	o.recurseRedact(o.Os)
	o.recurseRedact(o.Arch)
	o.recurseRedact(o.Version)
	o.recurseRedact(o.Command)
	o.recurseRedact(o.Flags)
	o.recurseRedact(o.Error)
	o.recurseRedact(o.StackFrames)
}

func (o *CliV1Usage) recurseRedact(v interface{}) {
	type redactor interface {
		Redact()
	}
	if r, ok := v.(redactor); ok {
		r.Redact()
	} else {
		val := reflect.ValueOf(v)
		if val.Kind() == reflect.Ptr {
			val = val.Elem()
		}
		switch val.Kind() {
		case reflect.Slice, reflect.Array:
			for i := 0; i < val.Len(); i++ {
				// support data types declared without pointers
				o.recurseRedact(val.Index(i).Interface())
				// ... and data types that were declared without but need pointers (for Redact)
				if val.Index(i).CanAddr() {
					o.recurseRedact(val.Index(i).Addr().Interface())
				}
			}
		}
	}
}

func (o CliV1Usage) zeroField(v interface{}) {
	p := reflect.ValueOf(v).Elem()
	p.Set(reflect.Zero(p.Type()))
}

func (o CliV1Usage) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.ApiVersion != nil {
		toSerialize["api_version"] = o.ApiVersion
	}
	if o.Kind != nil {
		toSerialize["kind"] = o.Kind
	}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.Metadata != nil {
		toSerialize["metadata"] = o.Metadata
	}
	if o.Os != nil {
		toSerialize["os"] = o.Os
	}
	if o.Arch != nil {
		toSerialize["arch"] = o.Arch
	}
	if o.Version != nil {
		toSerialize["version"] = o.Version
	}
	if o.Command != nil {
		toSerialize["command"] = o.Command
	}
	if o.Flags != nil {
		toSerialize["flags"] = o.Flags
	}
	if o.Error != nil {
		toSerialize["error"] = o.Error
	}
	if o.StackFrames != nil {
		toSerialize["stack_frames"] = o.StackFrames
	}
	buffer := &bytes.Buffer{}
	encoder := json.NewEncoder(buffer)
	encoder.SetEscapeHTML(false)
	err := encoder.Encode(toSerialize)
	return buffer.Bytes(), err
}

type NullableCliV1Usage struct {
	value *CliV1Usage
	isSet bool
}

func (v NullableCliV1Usage) Get() *CliV1Usage {
	return v.value
}

func (v *NullableCliV1Usage) Set(val *CliV1Usage) {
	v.value = val
	v.isSet = true
}

func (v NullableCliV1Usage) IsSet() bool {
	return v.isSet
}

func (v *NullableCliV1Usage) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCliV1Usage(val *CliV1Usage) *NullableCliV1Usage {
	return &NullableCliV1Usage{value: val, isSet: true}
}

func (v NullableCliV1Usage) MarshalJSON() ([]byte, error) {
	buffer := &bytes.Buffer{}
	encoder := json.NewEncoder(buffer)
	encoder.SetEscapeHTML(false)
	err := encoder.Encode(v.value)
	return buffer.Bytes(), err
}

func (v *NullableCliV1Usage) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
