// Copyright 2021 Confluent Inc. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*
Flink Compute Pool Management API

This is the Flink Compute Pool management API.

API version: 0.0.1
Contact: ksql-team@confluent.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"bytes"
	"encoding/json"
)

import (
	"reflect"
)

// FcpmV2ComputePoolSpecUpdate The desired state of the Compute Pool
type FcpmV2ComputePoolSpecUpdate struct {
	// The name of the Flink compute pool.
	DisplayName *string `json:"display_name,omitempty"`
	// Maximum number of Confluent Flink Units (CFUs) that the Flink compute pool should auto-scale to.
	MaxCfu *int32 `json:"max_cfu,omitempty"`
	// The environment to which this belongs.
	Environment *GlobalObjectReference `json:"environment,omitempty"`
}

// NewFcpmV2ComputePoolSpecUpdate instantiates a new FcpmV2ComputePoolSpecUpdate object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFcpmV2ComputePoolSpecUpdate() *FcpmV2ComputePoolSpecUpdate {
	this := FcpmV2ComputePoolSpecUpdate{}
	return &this
}

// NewFcpmV2ComputePoolSpecUpdateWithDefaults instantiates a new FcpmV2ComputePoolSpecUpdate object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFcpmV2ComputePoolSpecUpdateWithDefaults() *FcpmV2ComputePoolSpecUpdate {
	this := FcpmV2ComputePoolSpecUpdate{}
	return &this
}

// GetDisplayName returns the DisplayName field value if set, zero value otherwise.
func (o *FcpmV2ComputePoolSpecUpdate) GetDisplayName() string {
	if o == nil || o.DisplayName == nil {
		var ret string
		return ret
	}
	return *o.DisplayName
}

// GetDisplayNameOk returns a tuple with the DisplayName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FcpmV2ComputePoolSpecUpdate) GetDisplayNameOk() (*string, bool) {
	if o == nil || o.DisplayName == nil {
		return nil, false
	}
	return o.DisplayName, true
}

// HasDisplayName returns a boolean if a field has been set.
func (o *FcpmV2ComputePoolSpecUpdate) HasDisplayName() bool {
	if o != nil && o.DisplayName != nil {
		return true
	}

	return false
}

// SetDisplayName gets a reference to the given string and assigns it to the DisplayName field.
func (o *FcpmV2ComputePoolSpecUpdate) SetDisplayName(v string) {
	o.DisplayName = &v
}

// GetMaxCfu returns the MaxCfu field value if set, zero value otherwise.
func (o *FcpmV2ComputePoolSpecUpdate) GetMaxCfu() int32 {
	if o == nil || o.MaxCfu == nil {
		var ret int32
		return ret
	}
	return *o.MaxCfu
}

// GetMaxCfuOk returns a tuple with the MaxCfu field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FcpmV2ComputePoolSpecUpdate) GetMaxCfuOk() (*int32, bool) {
	if o == nil || o.MaxCfu == nil {
		return nil, false
	}
	return o.MaxCfu, true
}

// HasMaxCfu returns a boolean if a field has been set.
func (o *FcpmV2ComputePoolSpecUpdate) HasMaxCfu() bool {
	if o != nil && o.MaxCfu != nil {
		return true
	}

	return false
}

// SetMaxCfu gets a reference to the given int32 and assigns it to the MaxCfu field.
func (o *FcpmV2ComputePoolSpecUpdate) SetMaxCfu(v int32) {
	o.MaxCfu = &v
}

// GetEnvironment returns the Environment field value if set, zero value otherwise.
func (o *FcpmV2ComputePoolSpecUpdate) GetEnvironment() GlobalObjectReference {
	if o == nil || o.Environment == nil {
		var ret GlobalObjectReference
		return ret
	}
	return *o.Environment
}

// GetEnvironmentOk returns a tuple with the Environment field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FcpmV2ComputePoolSpecUpdate) GetEnvironmentOk() (*GlobalObjectReference, bool) {
	if o == nil || o.Environment == nil {
		return nil, false
	}
	return o.Environment, true
}

// HasEnvironment returns a boolean if a field has been set.
func (o *FcpmV2ComputePoolSpecUpdate) HasEnvironment() bool {
	if o != nil && o.Environment != nil {
		return true
	}

	return false
}

// SetEnvironment gets a reference to the given GlobalObjectReference and assigns it to the Environment field.
func (o *FcpmV2ComputePoolSpecUpdate) SetEnvironment(v GlobalObjectReference) {
	o.Environment = &v
}

// Redact resets all sensitive fields to their zero value.
func (o *FcpmV2ComputePoolSpecUpdate) Redact() {
	o.recurseRedact(o.DisplayName)
	o.recurseRedact(o.MaxCfu)
	o.recurseRedact(o.Environment)
}

func (o *FcpmV2ComputePoolSpecUpdate) recurseRedact(v interface{}) {
	type redactor interface {
		Redact()
	}
	if r, ok := v.(redactor); ok {
		r.Redact()
	} else {
		val := reflect.ValueOf(v)
		if val.Kind() == reflect.Ptr {
			val = val.Elem()
		}
		switch val.Kind() {
		case reflect.Slice, reflect.Array:
			for i := 0; i < val.Len(); i++ {
				// support data types declared without pointers
				o.recurseRedact(val.Index(i).Interface())
				// ... and data types that were declared without but need pointers (for Redact)
				if val.Index(i).CanAddr() {
					o.recurseRedact(val.Index(i).Addr().Interface())
				}
			}
		}
	}
}

func (o FcpmV2ComputePoolSpecUpdate) zeroField(v interface{}) {
	p := reflect.ValueOf(v).Elem()
	p.Set(reflect.Zero(p.Type()))
}

func (o FcpmV2ComputePoolSpecUpdate) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.DisplayName != nil {
		toSerialize["display_name"] = o.DisplayName
	}
	if o.MaxCfu != nil {
		toSerialize["max_cfu"] = o.MaxCfu
	}
	if o.Environment != nil {
		toSerialize["environment"] = o.Environment
	}
	buffer := &bytes.Buffer{}
	encoder := json.NewEncoder(buffer)
	encoder.SetEscapeHTML(false)
	err := encoder.Encode(toSerialize)
	return buffer.Bytes(), err
}

type NullableFcpmV2ComputePoolSpecUpdate struct {
	value *FcpmV2ComputePoolSpecUpdate
	isSet bool
}

func (v NullableFcpmV2ComputePoolSpecUpdate) Get() *FcpmV2ComputePoolSpecUpdate {
	return v.value
}

func (v *NullableFcpmV2ComputePoolSpecUpdate) Set(val *FcpmV2ComputePoolSpecUpdate) {
	v.value = val
	v.isSet = true
}

func (v NullableFcpmV2ComputePoolSpecUpdate) IsSet() bool {
	return v.isSet
}

func (v *NullableFcpmV2ComputePoolSpecUpdate) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFcpmV2ComputePoolSpecUpdate(val *FcpmV2ComputePoolSpecUpdate) *NullableFcpmV2ComputePoolSpecUpdate {
	return &NullableFcpmV2ComputePoolSpecUpdate{value: val, isSet: true}
}

func (v NullableFcpmV2ComputePoolSpecUpdate) MarshalJSON() ([]byte, error) {
	buffer := &bytes.Buffer{}
	encoder := json.NewEncoder(buffer)
	encoder.SetEscapeHTML(false)
	err := encoder.Encode(v.value)
	return buffer.Bytes(), err
}

func (v *NullableFcpmV2ComputePoolSpecUpdate) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
