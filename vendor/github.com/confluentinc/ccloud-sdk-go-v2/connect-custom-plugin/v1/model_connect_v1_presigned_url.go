// Copyright 2021 Confluent Inc. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*
Custom Connector Plugin Management API

This is Custom Connector Plugin Management API.

API version: 1.0.0
Contact: compute-platform-team@confluent.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1

import (
	"bytes"
	"encoding/json"
)

import (
	"reflect"
)

// ConnectV1PresignedUrl Request a presigned upload url for new Custom Connector Plugin.   ## The Presigned Urls Model <SchemaDefinition schemaRef=\"#/components/schemas/connect.v1.PresignedUrl\" />
type ConnectV1PresignedUrl struct {
	// APIVersion defines the schema version of this representation of a resource.
	ApiVersion *string `json:"api_version,omitempty"`
	// Kind defines the object this REST resource represents.
	Kind *string `json:"kind,omitempty"`
	// Content format of Custom Connector Plugin archive.
	ContentFormat *string `json:"content_format,omitempty"`
	// Unique identifier of this upload.
	UploadId *string `json:"upload_id,omitempty"`
	// Upload url for Custom Connector Plugin archive.
	UploadUrl *string `json:"upload_url,omitempty"`
	// Upload form data of Custom Connector Plugin. All values should be strings.
	UploadFormData *map[string]interface{} `json:"upload_form_data,omitempty"`
}

// NewConnectV1PresignedUrl instantiates a new ConnectV1PresignedUrl object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewConnectV1PresignedUrl() *ConnectV1PresignedUrl {
	this := ConnectV1PresignedUrl{}
	return &this
}

// NewConnectV1PresignedUrlWithDefaults instantiates a new ConnectV1PresignedUrl object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewConnectV1PresignedUrlWithDefaults() *ConnectV1PresignedUrl {
	this := ConnectV1PresignedUrl{}
	return &this
}

// GetApiVersion returns the ApiVersion field value if set, zero value otherwise.
func (o *ConnectV1PresignedUrl) GetApiVersion() string {
	if o == nil || o.ApiVersion == nil {
		var ret string
		return ret
	}
	return *o.ApiVersion
}

// GetApiVersionOk returns a tuple with the ApiVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectV1PresignedUrl) GetApiVersionOk() (*string, bool) {
	if o == nil || o.ApiVersion == nil {
		return nil, false
	}
	return o.ApiVersion, true
}

// HasApiVersion returns a boolean if a field has been set.
func (o *ConnectV1PresignedUrl) HasApiVersion() bool {
	if o != nil && o.ApiVersion != nil {
		return true
	}

	return false
}

// SetApiVersion gets a reference to the given string and assigns it to the ApiVersion field.
func (o *ConnectV1PresignedUrl) SetApiVersion(v string) {
	o.ApiVersion = &v
}

// GetKind returns the Kind field value if set, zero value otherwise.
func (o *ConnectV1PresignedUrl) GetKind() string {
	if o == nil || o.Kind == nil {
		var ret string
		return ret
	}
	return *o.Kind
}

// GetKindOk returns a tuple with the Kind field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectV1PresignedUrl) GetKindOk() (*string, bool) {
	if o == nil || o.Kind == nil {
		return nil, false
	}
	return o.Kind, true
}

// HasKind returns a boolean if a field has been set.
func (o *ConnectV1PresignedUrl) HasKind() bool {
	if o != nil && o.Kind != nil {
		return true
	}

	return false
}

// SetKind gets a reference to the given string and assigns it to the Kind field.
func (o *ConnectV1PresignedUrl) SetKind(v string) {
	o.Kind = &v
}

// GetContentFormat returns the ContentFormat field value if set, zero value otherwise.
func (o *ConnectV1PresignedUrl) GetContentFormat() string {
	if o == nil || o.ContentFormat == nil {
		var ret string
		return ret
	}
	return *o.ContentFormat
}

// GetContentFormatOk returns a tuple with the ContentFormat field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectV1PresignedUrl) GetContentFormatOk() (*string, bool) {
	if o == nil || o.ContentFormat == nil {
		return nil, false
	}
	return o.ContentFormat, true
}

// HasContentFormat returns a boolean if a field has been set.
func (o *ConnectV1PresignedUrl) HasContentFormat() bool {
	if o != nil && o.ContentFormat != nil {
		return true
	}

	return false
}

// SetContentFormat gets a reference to the given string and assigns it to the ContentFormat field.
func (o *ConnectV1PresignedUrl) SetContentFormat(v string) {
	o.ContentFormat = &v
}

// GetUploadId returns the UploadId field value if set, zero value otherwise.
func (o *ConnectV1PresignedUrl) GetUploadId() string {
	if o == nil || o.UploadId == nil {
		var ret string
		return ret
	}
	return *o.UploadId
}

// GetUploadIdOk returns a tuple with the UploadId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectV1PresignedUrl) GetUploadIdOk() (*string, bool) {
	if o == nil || o.UploadId == nil {
		return nil, false
	}
	return o.UploadId, true
}

// HasUploadId returns a boolean if a field has been set.
func (o *ConnectV1PresignedUrl) HasUploadId() bool {
	if o != nil && o.UploadId != nil {
		return true
	}

	return false
}

// SetUploadId gets a reference to the given string and assigns it to the UploadId field.
func (o *ConnectV1PresignedUrl) SetUploadId(v string) {
	o.UploadId = &v
}

// GetUploadUrl returns the UploadUrl field value if set, zero value otherwise.
func (o *ConnectV1PresignedUrl) GetUploadUrl() string {
	if o == nil || o.UploadUrl == nil {
		var ret string
		return ret
	}
	return *o.UploadUrl
}

// GetUploadUrlOk returns a tuple with the UploadUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectV1PresignedUrl) GetUploadUrlOk() (*string, bool) {
	if o == nil || o.UploadUrl == nil {
		return nil, false
	}
	return o.UploadUrl, true
}

// HasUploadUrl returns a boolean if a field has been set.
func (o *ConnectV1PresignedUrl) HasUploadUrl() bool {
	if o != nil && o.UploadUrl != nil {
		return true
	}

	return false
}

// SetUploadUrl gets a reference to the given string and assigns it to the UploadUrl field.
func (o *ConnectV1PresignedUrl) SetUploadUrl(v string) {
	o.UploadUrl = &v
}

// GetUploadFormData returns the UploadFormData field value if set, zero value otherwise.
func (o *ConnectV1PresignedUrl) GetUploadFormData() map[string]interface{} {
	if o == nil || o.UploadFormData == nil {
		var ret map[string]interface{}
		return ret
	}
	return *o.UploadFormData
}

// GetUploadFormDataOk returns a tuple with the UploadFormData field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectV1PresignedUrl) GetUploadFormDataOk() (*map[string]interface{}, bool) {
	if o == nil || o.UploadFormData == nil {
		return nil, false
	}
	return o.UploadFormData, true
}

// HasUploadFormData returns a boolean if a field has been set.
func (o *ConnectV1PresignedUrl) HasUploadFormData() bool {
	if o != nil && o.UploadFormData != nil {
		return true
	}

	return false
}

// SetUploadFormData gets a reference to the given map[string]interface{} and assigns it to the UploadFormData field.
func (o *ConnectV1PresignedUrl) SetUploadFormData(v map[string]interface{}) {
	o.UploadFormData = &v
}

// Redact resets all sensitive fields to their zero value.
func (o *ConnectV1PresignedUrl) Redact() {
    o.recurseRedact(o.ApiVersion)
    o.recurseRedact(o.Kind)
    o.recurseRedact(o.ContentFormat)
    o.recurseRedact(o.UploadId)
    o.recurseRedact(o.UploadUrl)
    o.recurseRedact(o.UploadFormData)
}

func (o *ConnectV1PresignedUrl) recurseRedact(v interface{}) {
    type redactor interface {
        Redact()
    }
    if r, ok := v.(redactor); ok {
        r.Redact()
    } else {
        val := reflect.ValueOf(v)
        if val.Kind() == reflect.Ptr {
            val = val.Elem()
        }
        switch val.Kind() {
        case reflect.Slice, reflect.Array:
            for i := 0; i < val.Len(); i++ {
                // support data types declared without pointers
                o.recurseRedact(val.Index(i).Interface())
                // ... and data types that were declared without but need pointers (for Redact)
                if val.Index(i).CanAddr() {
                    o.recurseRedact(val.Index(i).Addr().Interface())
                }
            }
        }
    }
}

func (o ConnectV1PresignedUrl) zeroField(v interface{}) {
    p := reflect.ValueOf(v).Elem()
    p.Set(reflect.Zero(p.Type()))
}

func (o ConnectV1PresignedUrl) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.ApiVersion != nil {
		toSerialize["api_version"] = o.ApiVersion
	}
	if o.Kind != nil {
		toSerialize["kind"] = o.Kind
	}
	if o.ContentFormat != nil {
		toSerialize["content_format"] = o.ContentFormat
	}
	if o.UploadId != nil {
		toSerialize["upload_id"] = o.UploadId
	}
	if o.UploadUrl != nil {
		toSerialize["upload_url"] = o.UploadUrl
	}
	if o.UploadFormData != nil {
		toSerialize["upload_form_data"] = o.UploadFormData
	}
	buffer := &bytes.Buffer{}
	encoder := json.NewEncoder(buffer)
	encoder.SetEscapeHTML(false)
	err := encoder.Encode(toSerialize)
	return buffer.Bytes(), err
}

type NullableConnectV1PresignedUrl struct {
	value *ConnectV1PresignedUrl
	isSet bool
}

func (v NullableConnectV1PresignedUrl) Get() *ConnectV1PresignedUrl {
	return v.value
}

func (v *NullableConnectV1PresignedUrl) Set(val *ConnectV1PresignedUrl) {
	v.value = val
	v.isSet = true
}

func (v NullableConnectV1PresignedUrl) IsSet() bool {
	return v.isSet
}

func (v *NullableConnectV1PresignedUrl) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConnectV1PresignedUrl(val *ConnectV1PresignedUrl) *NullableConnectV1PresignedUrl {
	return &NullableConnectV1PresignedUrl{value: val, isSet: true}
}

func (v NullableConnectV1PresignedUrl) MarshalJSON() ([]byte, error) {
	buffer := &bytes.Buffer{}
	encoder := json.NewEncoder(buffer)
	encoder.SetEscapeHTML(false)
	err := encoder.Encode(v.value)
	return buffer.Bytes(), err
}

func (v *NullableConnectV1PresignedUrl) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


