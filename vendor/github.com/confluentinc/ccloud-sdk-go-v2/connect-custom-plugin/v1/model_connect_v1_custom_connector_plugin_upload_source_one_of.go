// Copyright 2021 Confluent Inc. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*
Custom Connector Plugin Management API

This is Custom Connector Plugin Management API.

API version: 1.0.0
Contact: compute-platform-team@confluent.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// ConnectV1CustomConnectorPluginUploadSourceOneOf - struct for ConnectV1CustomConnectorPluginUploadSourceOneOf
type ConnectV1CustomConnectorPluginUploadSourceOneOf struct {
	ConnectV1UploadSourcePresignedUrl *ConnectV1UploadSourcePresignedUrl
}

// ConnectV1UploadSourcePresignedUrlAsConnectV1CustomConnectorPluginUploadSourceOneOf is a convenience function that returns ConnectV1UploadSourcePresignedUrl wrapped in ConnectV1CustomConnectorPluginUploadSourceOneOf
func ConnectV1UploadSourcePresignedUrlAsConnectV1CustomConnectorPluginUploadSourceOneOf(v *ConnectV1UploadSourcePresignedUrl) ConnectV1CustomConnectorPluginUploadSourceOneOf {
	return ConnectV1CustomConnectorPluginUploadSourceOneOf{ ConnectV1UploadSourcePresignedUrl: v}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *ConnectV1CustomConnectorPluginUploadSourceOneOf) UnmarshalJSON(data []byte) error {
	var err error
	// use discriminator value to speed up the lookup
	var jsonDict map[string]interface{}
	err = json.Unmarshal(data, &jsonDict)
	if err != nil {
		return fmt.Errorf("Failed to unmarshal JSON into map for the discriminator lookup.")
	}

	// check if the discriminator value is 'PRESIGNED_URL_LOCATION'
	if jsonDict["location"] == "PRESIGNED_URL_LOCATION" {
		// try to unmarshal JSON data into ConnectV1UploadSourcePresignedUrl
		err = json.Unmarshal(data, &dst.ConnectV1UploadSourcePresignedUrl)
		if err == nil {
			return nil // data stored in dst.ConnectV1UploadSourcePresignedUrl, return on the first match
		} else {
			dst.ConnectV1UploadSourcePresignedUrl = nil
			return fmt.Errorf("Failed to unmarshal ConnectV1CustomConnectorPluginUploadSourceOneOf as ConnectV1UploadSourcePresignedUrl: %s", err.Error())
		}
	}

	// check if the discriminator value is 'connect.v1.UploadSource.PresignedUrl'
	if jsonDict["location"] == "connect.v1.UploadSource.PresignedUrl" {
		// try to unmarshal JSON data into ConnectV1UploadSourcePresignedUrl
		err = json.Unmarshal(data, &dst.ConnectV1UploadSourcePresignedUrl)
		if err == nil {
			return nil // data stored in dst.ConnectV1UploadSourcePresignedUrl, return on the first match
		} else {
			dst.ConnectV1UploadSourcePresignedUrl = nil
			return fmt.Errorf("Failed to unmarshal ConnectV1CustomConnectorPluginUploadSourceOneOf as ConnectV1UploadSourcePresignedUrl: %s", err.Error())
		}
	}

	return nil
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src ConnectV1CustomConnectorPluginUploadSourceOneOf) MarshalJSON() ([]byte, error) {
	if src.ConnectV1UploadSourcePresignedUrl != nil {
		buffer := &bytes.Buffer{}
		encoder := json.NewEncoder(buffer)
		encoder.SetEscapeHTML(false)
		err := encoder.Encode(&src.ConnectV1UploadSourcePresignedUrl)
		return buffer.Bytes(), err
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *ConnectV1CustomConnectorPluginUploadSourceOneOf) GetActualInstance() (interface{}) {
	if obj.ConnectV1UploadSourcePresignedUrl != nil {
		return obj.ConnectV1UploadSourcePresignedUrl
	}

	// all schemas are nil
	return nil
}

type NullableConnectV1CustomConnectorPluginUploadSourceOneOf struct {
	value *ConnectV1CustomConnectorPluginUploadSourceOneOf
	isSet bool
}

func (v NullableConnectV1CustomConnectorPluginUploadSourceOneOf) Get() *ConnectV1CustomConnectorPluginUploadSourceOneOf {
	return v.value
}

func (v *NullableConnectV1CustomConnectorPluginUploadSourceOneOf) Set(val *ConnectV1CustomConnectorPluginUploadSourceOneOf) {
	v.value = val
	v.isSet = true
}

func (v NullableConnectV1CustomConnectorPluginUploadSourceOneOf) IsSet() bool {
	return v.isSet
}

func (v *NullableConnectV1CustomConnectorPluginUploadSourceOneOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConnectV1CustomConnectorPluginUploadSourceOneOf(val *ConnectV1CustomConnectorPluginUploadSourceOneOf) *NullableConnectV1CustomConnectorPluginUploadSourceOneOf {
	return &NullableConnectV1CustomConnectorPluginUploadSourceOneOf{value: val, isSet: true}
}

func (v NullableConnectV1CustomConnectorPluginUploadSourceOneOf) MarshalJSON() ([]byte, error) {
	buffer := &bytes.Buffer{}
	encoder := json.NewEncoder(buffer)
	encoder.SetEscapeHTML(false)
	err := encoder.Encode(v.value)
	return buffer.Bytes(), err
}

func (v *NullableConnectV1CustomConnectorPluginUploadSourceOneOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


