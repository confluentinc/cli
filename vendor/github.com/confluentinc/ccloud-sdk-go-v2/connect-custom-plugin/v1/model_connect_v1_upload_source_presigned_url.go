// Copyright 2021 Confluent Inc. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*
Custom Connector Plugin Management API

This is Custom Connector Plugin Management API.

API version: 1.0.0
Contact: compute-platform-team@confluent.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1

import (
	"bytes"
	"encoding/json"
)

import (
	"reflect"
)

// ConnectV1UploadSourcePresignedUrl Presigned url of uploaded Custom Connector Plugin archive.
type ConnectV1UploadSourcePresignedUrl struct {
	// Location of Custom Connector Plugin source. 
	Location string `json:"location,omitempty"`
	// Upload id returned by `/presigned-upload-url` API. This field returns empty string in all responses.
	UploadId string `json:"upload_id,omitempty"`
}

// NewConnectV1UploadSourcePresignedUrl instantiates a new ConnectV1UploadSourcePresignedUrl object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewConnectV1UploadSourcePresignedUrl(location string, uploadId string) *ConnectV1UploadSourcePresignedUrl {
	this := ConnectV1UploadSourcePresignedUrl{}
	this.Location = location
	this.UploadId = uploadId
	return &this
}

// NewConnectV1UploadSourcePresignedUrlWithDefaults instantiates a new ConnectV1UploadSourcePresignedUrl object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewConnectV1UploadSourcePresignedUrlWithDefaults() *ConnectV1UploadSourcePresignedUrl {
	this := ConnectV1UploadSourcePresignedUrl{}
	return &this
}

// GetLocation returns the Location field value
func (o *ConnectV1UploadSourcePresignedUrl) GetLocation() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Location
}

// GetLocationOk returns a tuple with the Location field value
// and a boolean to check if the value has been set.
func (o *ConnectV1UploadSourcePresignedUrl) GetLocationOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Location, true
}

// SetLocation sets field value
func (o *ConnectV1UploadSourcePresignedUrl) SetLocation(v string) {
	o.Location = v
}

// GetUploadId returns the UploadId field value
func (o *ConnectV1UploadSourcePresignedUrl) GetUploadId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.UploadId
}

// GetUploadIdOk returns a tuple with the UploadId field value
// and a boolean to check if the value has been set.
func (o *ConnectV1UploadSourcePresignedUrl) GetUploadIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.UploadId, true
}

// SetUploadId sets field value
func (o *ConnectV1UploadSourcePresignedUrl) SetUploadId(v string) {
	o.UploadId = v
}

// Redact resets all sensitive fields to their zero value.
func (o *ConnectV1UploadSourcePresignedUrl) Redact() {
    o.recurseRedact(&o.Location)
    o.recurseRedact(&o.UploadId)
}

func (o *ConnectV1UploadSourcePresignedUrl) recurseRedact(v interface{}) {
    type redactor interface {
        Redact()
    }
    if r, ok := v.(redactor); ok {
        r.Redact()
    } else {
        val := reflect.ValueOf(v)
        if val.Kind() == reflect.Ptr {
            val = val.Elem()
        }
        switch val.Kind() {
        case reflect.Slice, reflect.Array:
            for i := 0; i < val.Len(); i++ {
                // support data types declared without pointers
                o.recurseRedact(val.Index(i).Interface())
                // ... and data types that were declared without but need pointers (for Redact)
                if val.Index(i).CanAddr() {
                    o.recurseRedact(val.Index(i).Addr().Interface())
                }
            }
        }
    }
}

func (o ConnectV1UploadSourcePresignedUrl) zeroField(v interface{}) {
    p := reflect.ValueOf(v).Elem()
    p.Set(reflect.Zero(p.Type()))
}

func (o ConnectV1UploadSourcePresignedUrl) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["location"] = o.Location
	}
	if true {
		toSerialize["upload_id"] = o.UploadId
	}
	buffer := &bytes.Buffer{}
	encoder := json.NewEncoder(buffer)
	encoder.SetEscapeHTML(false)
	err := encoder.Encode(toSerialize)
	return buffer.Bytes(), err
}

type NullableConnectV1UploadSourcePresignedUrl struct {
	value *ConnectV1UploadSourcePresignedUrl
	isSet bool
}

func (v NullableConnectV1UploadSourcePresignedUrl) Get() *ConnectV1UploadSourcePresignedUrl {
	return v.value
}

func (v *NullableConnectV1UploadSourcePresignedUrl) Set(val *ConnectV1UploadSourcePresignedUrl) {
	v.value = val
	v.isSet = true
}

func (v NullableConnectV1UploadSourcePresignedUrl) IsSet() bool {
	return v.isSet
}

func (v *NullableConnectV1UploadSourcePresignedUrl) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConnectV1UploadSourcePresignedUrl(val *ConnectV1UploadSourcePresignedUrl) *NullableConnectV1UploadSourcePresignedUrl {
	return &NullableConnectV1UploadSourcePresignedUrl{value: val, isSet: true}
}

func (v NullableConnectV1UploadSourcePresignedUrl) MarshalJSON() ([]byte, error) {
	buffer := &bytes.Buffer{}
	encoder := json.NewEncoder(buffer)
	encoder.SetEscapeHTML(false)
	err := encoder.Encode(v.value)
	return buffer.Bytes(), err
}

func (v *NullableConnectV1UploadSourcePresignedUrl) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


