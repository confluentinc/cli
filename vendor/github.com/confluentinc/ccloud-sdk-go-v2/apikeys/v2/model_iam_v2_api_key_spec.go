// Copyright 2021 Confluent Inc. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*
API Keys Management API

API Keys Management API

API version: 0.0.1-alpha0
Contact: paas-team@confluent.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
)

import (
	"reflect"
)

// IamV2ApiKeySpec The desired state of the Api Key
type IamV2ApiKeySpec struct {
	// The API key secret. Only provided in `create` responses, not in `get` or `list`.
	Secret *string `json:"secret,omitempty"`
	// A human readable name for the API key
	DisplayName *string `json:"display_name,omitempty"`
	// A human readable description for the API key
	Description *string `json:"description,omitempty"`
	// The owner to which this belongs. The owner can be one of iam.v2.User, iam.v2.ServiceAccount.
	Owner *ObjectReference `json:"owner,omitempty"`
	// The resource associated with this object. The resource can be one of cmk.v2.Cluster. May be `null` if not associated with a resource.
	Resource *ObjectReference `json:"resource,omitempty"`
	// The list of resources associated with this object. Each resource can be one of Cmk.v2.cluster.
	Resources *[]ObjectReference `json:"resources,omitempty"`
}

// NewIamV2ApiKeySpec instantiates a new IamV2ApiKeySpec object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIamV2ApiKeySpec() *IamV2ApiKeySpec {
	this := IamV2ApiKeySpec{}
	return &this
}

// NewIamV2ApiKeySpecWithDefaults instantiates a new IamV2ApiKeySpec object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIamV2ApiKeySpecWithDefaults() *IamV2ApiKeySpec {
	this := IamV2ApiKeySpec{}
	return &this
}

// GetSecret returns the Secret field value if set, zero value otherwise.
func (o *IamV2ApiKeySpec) GetSecret() string {
	if o == nil || o.Secret == nil {
		var ret string
		return ret
	}
	return *o.Secret
}

// GetSecretOk returns a tuple with the Secret field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IamV2ApiKeySpec) GetSecretOk() (*string, bool) {
	if o == nil || o.Secret == nil {
		return nil, false
	}
	return o.Secret, true
}

// HasSecret returns a boolean if a field has been set.
func (o *IamV2ApiKeySpec) HasSecret() bool {
	if o != nil && o.Secret != nil {
		return true
	}

	return false
}

// SetSecret gets a reference to the given string and assigns it to the Secret field.
func (o *IamV2ApiKeySpec) SetSecret(v string) {
	o.Secret = &v
}

// GetDisplayName returns the DisplayName field value if set, zero value otherwise.
func (o *IamV2ApiKeySpec) GetDisplayName() string {
	if o == nil || o.DisplayName == nil {
		var ret string
		return ret
	}
	return *o.DisplayName
}

// GetDisplayNameOk returns a tuple with the DisplayName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IamV2ApiKeySpec) GetDisplayNameOk() (*string, bool) {
	if o == nil || o.DisplayName == nil {
		return nil, false
	}
	return o.DisplayName, true
}

// HasDisplayName returns a boolean if a field has been set.
func (o *IamV2ApiKeySpec) HasDisplayName() bool {
	if o != nil && o.DisplayName != nil {
		return true
	}

	return false
}

// SetDisplayName gets a reference to the given string and assigns it to the DisplayName field.
func (o *IamV2ApiKeySpec) SetDisplayName(v string) {
	o.DisplayName = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *IamV2ApiKeySpec) GetDescription() string {
	if o == nil || o.Description == nil {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IamV2ApiKeySpec) GetDescriptionOk() (*string, bool) {
	if o == nil || o.Description == nil {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *IamV2ApiKeySpec) HasDescription() bool {
	if o != nil && o.Description != nil {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *IamV2ApiKeySpec) SetDescription(v string) {
	o.Description = &v
}

// GetOwner returns the Owner field value if set, zero value otherwise.
func (o *IamV2ApiKeySpec) GetOwner() ObjectReference {
	if o == nil || o.Owner == nil {
		var ret ObjectReference
		return ret
	}
	return *o.Owner
}

// GetOwnerOk returns a tuple with the Owner field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IamV2ApiKeySpec) GetOwnerOk() (*ObjectReference, bool) {
	if o == nil || o.Owner == nil {
		return nil, false
	}
	return o.Owner, true
}

// HasOwner returns a boolean if a field has been set.
func (o *IamV2ApiKeySpec) HasOwner() bool {
	if o != nil && o.Owner != nil {
		return true
	}

	return false
}

// SetOwner gets a reference to the given ObjectReference and assigns it to the Owner field.
func (o *IamV2ApiKeySpec) SetOwner(v ObjectReference) {
	o.Owner = &v
}

// GetResource returns the Resource field value if set, zero value otherwise.
func (o *IamV2ApiKeySpec) GetResource() ObjectReference {
	if o == nil || o.Resource == nil {
		var ret ObjectReference
		return ret
	}
	return *o.Resource
}

// GetResourceOk returns a tuple with the Resource field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IamV2ApiKeySpec) GetResourceOk() (*ObjectReference, bool) {
	if o == nil || o.Resource == nil {
		return nil, false
	}
	return o.Resource, true
}

// HasResource returns a boolean if a field has been set.
func (o *IamV2ApiKeySpec) HasResource() bool {
	if o != nil && o.Resource != nil {
		return true
	}

	return false
}

// SetResource gets a reference to the given ObjectReference and assigns it to the Resource field.
func (o *IamV2ApiKeySpec) SetResource(v ObjectReference) {
	o.Resource = &v
}

// GetResources returns the Resources field value if set, zero value otherwise.
func (o *IamV2ApiKeySpec) GetResources() []ObjectReference {
	if o == nil || o.Resources == nil {
		var ret []ObjectReference
		return ret
	}
	return *o.Resources
}

// GetResourcesOk returns a tuple with the Resources field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IamV2ApiKeySpec) GetResourcesOk() (*[]ObjectReference, bool) {
	if o == nil || o.Resources == nil {
		return nil, false
	}
	return o.Resources, true
}

// HasResources returns a boolean if a field has been set.
func (o *IamV2ApiKeySpec) HasResources() bool {
	if o != nil && o.Resources != nil {
		return true
	}

	return false
}

// SetResources gets a reference to the given []ObjectReference and assigns it to the Resources field.
func (o *IamV2ApiKeySpec) SetResources(v []ObjectReference) {
	o.Resources = &v
}

// Redact resets all sensitive fields to their zero value.
func (o *IamV2ApiKeySpec) Redact() {
    o.Secret = nil
    o.recurseRedact(o.DisplayName)
    o.recurseRedact(o.Description)
    o.recurseRedact(o.Owner)
    o.recurseRedact(o.Resource)
    o.recurseRedact(o.Resources)
}

func (o *IamV2ApiKeySpec) recurseRedact(v interface{}) {
    type redactor interface {
        Redact()
    }
    if r, ok := v.(redactor); ok {
        r.Redact()
    } else {
        val := reflect.ValueOf(v)
        if val.Kind() == reflect.Ptr {
            val = val.Elem()
        }
        switch val.Kind() {
        case reflect.Slice, reflect.Array:
            for i := 0; i < val.Len(); i++ {
                // support data types declared without pointers
                o.recurseRedact(val.Index(i).Interface())
                // ... and data types that were declared without but need pointers (for Redact)
                if val.Index(i).CanAddr() {
                    o.recurseRedact(val.Index(i).Addr().Interface())
                }
            }
        }
    }
}

func (o IamV2ApiKeySpec) zeroField(v interface{}) {
    p := reflect.ValueOf(v).Elem()
    p.Set(reflect.Zero(p.Type()))
}

func (o IamV2ApiKeySpec) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Secret != nil {
		toSerialize["secret"] = o.Secret
	}
	if o.DisplayName != nil {
		toSerialize["display_name"] = o.DisplayName
	}
	if o.Description != nil {
		toSerialize["description"] = o.Description
	}
	if o.Owner != nil {
		toSerialize["owner"] = o.Owner
	}
	if o.Resource != nil {
		toSerialize["resource"] = o.Resource
	}
	if o.Resources != nil {
		toSerialize["resources"] = o.Resources
	}
	return json.Marshal(toSerialize)
}

type NullableIamV2ApiKeySpec struct {
	value *IamV2ApiKeySpec
	isSet bool
}

func (v NullableIamV2ApiKeySpec) Get() *IamV2ApiKeySpec {
	return v.value
}

func (v *NullableIamV2ApiKeySpec) Set(val *IamV2ApiKeySpec) {
	v.value = val
	v.isSet = true
}

func (v NullableIamV2ApiKeySpec) IsSet() bool {
	return v.isSet
}

func (v *NullableIamV2ApiKeySpec) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIamV2ApiKeySpec(val *IamV2ApiKeySpec) *NullableIamV2ApiKeySpec {
	return &NullableIamV2ApiKeySpec{value: val, isSet: true}
}

func (v NullableIamV2ApiKeySpec) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIamV2ApiKeySpec) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


