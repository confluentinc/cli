// Copyright 2021 Confluent Inc. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*
REST Admin API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 3.0.0
Contact: kafka-clients-proxy-team@confluent.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v3

import (
	"bytes"
	"encoding/json"
)

import (
	"reflect"
)

// ConsumerLagData struct for ConsumerLagData
type ConsumerLagData struct {
	Kind            string           `json:"kind,omitempty"`
	Metadata        ResourceMetadata `json:"metadata,omitempty"`
	ClusterId       string           `json:"cluster_id,omitempty"`
	ConsumerGroupId string           `json:"consumer_group_id,omitempty"`
	TopicName       string           `json:"topic_name,omitempty"`
	PartitionId     int32            `json:"partition_id,omitempty"`
	CurrentOffset   int64            `json:"current_offset,omitempty"`
	LogEndOffset    int64            `json:"log_end_offset,omitempty"`
	Lag             int64            `json:"lag,omitempty"`
	ConsumerId      string           `json:"consumer_id,omitempty"`
	InstanceId      NullableString   `json:"instance_id,omitempty"`
	ClientId        string           `json:"client_id,omitempty"`
}

// NewConsumerLagData instantiates a new ConsumerLagData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewConsumerLagData(kind string, metadata ResourceMetadata, clusterId string, consumerGroupId string, topicName string, partitionId int32, currentOffset int64, logEndOffset int64, lag int64, consumerId string, clientId string) *ConsumerLagData {
	this := ConsumerLagData{}
	this.Kind = kind
	this.Metadata = metadata
	this.ClusterId = clusterId
	this.ConsumerGroupId = consumerGroupId
	this.TopicName = topicName
	this.PartitionId = partitionId
	this.CurrentOffset = currentOffset
	this.LogEndOffset = logEndOffset
	this.Lag = lag
	this.ConsumerId = consumerId
	this.ClientId = clientId
	return &this
}

// NewConsumerLagDataWithDefaults instantiates a new ConsumerLagData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewConsumerLagDataWithDefaults() *ConsumerLagData {
	this := ConsumerLagData{}
	return &this
}

// GetKind returns the Kind field value
func (o *ConsumerLagData) GetKind() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Kind
}

// GetKindOk returns a tuple with the Kind field value
// and a boolean to check if the value has been set.
func (o *ConsumerLagData) GetKindOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Kind, true
}

// SetKind sets field value
func (o *ConsumerLagData) SetKind(v string) {
	o.Kind = v
}

// GetMetadata returns the Metadata field value
func (o *ConsumerLagData) GetMetadata() ResourceMetadata {
	if o == nil {
		var ret ResourceMetadata
		return ret
	}

	return o.Metadata
}

// GetMetadataOk returns a tuple with the Metadata field value
// and a boolean to check if the value has been set.
func (o *ConsumerLagData) GetMetadataOk() (*ResourceMetadata, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Metadata, true
}

// SetMetadata sets field value
func (o *ConsumerLagData) SetMetadata(v ResourceMetadata) {
	o.Metadata = v
}

// GetClusterId returns the ClusterId field value
func (o *ConsumerLagData) GetClusterId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ClusterId
}

// GetClusterIdOk returns a tuple with the ClusterId field value
// and a boolean to check if the value has been set.
func (o *ConsumerLagData) GetClusterIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ClusterId, true
}

// SetClusterId sets field value
func (o *ConsumerLagData) SetClusterId(v string) {
	o.ClusterId = v
}

// GetConsumerGroupId returns the ConsumerGroupId field value
func (o *ConsumerLagData) GetConsumerGroupId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ConsumerGroupId
}

// GetConsumerGroupIdOk returns a tuple with the ConsumerGroupId field value
// and a boolean to check if the value has been set.
func (o *ConsumerLagData) GetConsumerGroupIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ConsumerGroupId, true
}

// SetConsumerGroupId sets field value
func (o *ConsumerLagData) SetConsumerGroupId(v string) {
	o.ConsumerGroupId = v
}

// GetTopicName returns the TopicName field value
func (o *ConsumerLagData) GetTopicName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TopicName
}

// GetTopicNameOk returns a tuple with the TopicName field value
// and a boolean to check if the value has been set.
func (o *ConsumerLagData) GetTopicNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TopicName, true
}

// SetTopicName sets field value
func (o *ConsumerLagData) SetTopicName(v string) {
	o.TopicName = v
}

// GetPartitionId returns the PartitionId field value
func (o *ConsumerLagData) GetPartitionId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.PartitionId
}

// GetPartitionIdOk returns a tuple with the PartitionId field value
// and a boolean to check if the value has been set.
func (o *ConsumerLagData) GetPartitionIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PartitionId, true
}

// SetPartitionId sets field value
func (o *ConsumerLagData) SetPartitionId(v int32) {
	o.PartitionId = v
}

// GetCurrentOffset returns the CurrentOffset field value
func (o *ConsumerLagData) GetCurrentOffset() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.CurrentOffset
}

// GetCurrentOffsetOk returns a tuple with the CurrentOffset field value
// and a boolean to check if the value has been set.
func (o *ConsumerLagData) GetCurrentOffsetOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CurrentOffset, true
}

// SetCurrentOffset sets field value
func (o *ConsumerLagData) SetCurrentOffset(v int64) {
	o.CurrentOffset = v
}

// GetLogEndOffset returns the LogEndOffset field value
func (o *ConsumerLagData) GetLogEndOffset() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.LogEndOffset
}

// GetLogEndOffsetOk returns a tuple with the LogEndOffset field value
// and a boolean to check if the value has been set.
func (o *ConsumerLagData) GetLogEndOffsetOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.LogEndOffset, true
}

// SetLogEndOffset sets field value
func (o *ConsumerLagData) SetLogEndOffset(v int64) {
	o.LogEndOffset = v
}

// GetLag returns the Lag field value
func (o *ConsumerLagData) GetLag() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.Lag
}

// GetLagOk returns a tuple with the Lag field value
// and a boolean to check if the value has been set.
func (o *ConsumerLagData) GetLagOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Lag, true
}

// SetLag sets field value
func (o *ConsumerLagData) SetLag(v int64) {
	o.Lag = v
}

// GetConsumerId returns the ConsumerId field value
func (o *ConsumerLagData) GetConsumerId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ConsumerId
}

// GetConsumerIdOk returns a tuple with the ConsumerId field value
// and a boolean to check if the value has been set.
func (o *ConsumerLagData) GetConsumerIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ConsumerId, true
}

// SetConsumerId sets field value
func (o *ConsumerLagData) SetConsumerId(v string) {
	o.ConsumerId = v
}

// GetInstanceId returns the InstanceId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ConsumerLagData) GetInstanceId() string {
	if o == nil || o.InstanceId.Get() == nil {
		var ret string
		return ret
	}
	return *o.InstanceId.Get()
}

// GetInstanceIdOk returns a tuple with the InstanceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ConsumerLagData) GetInstanceIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.InstanceId.Get(), o.InstanceId.IsSet()
}

// HasInstanceId returns a boolean if a field has been set.
func (o *ConsumerLagData) HasInstanceId() bool {
	if o != nil && o.InstanceId.IsSet() {
		return true
	}

	return false
}

// SetInstanceId gets a reference to the given NullableString and assigns it to the InstanceId field.
func (o *ConsumerLagData) SetInstanceId(v string) {
	o.InstanceId.Set(&v)
}

// SetInstanceIdNil sets the value for InstanceId to be an explicit nil
func (o *ConsumerLagData) SetInstanceIdNil() {
	o.InstanceId.Set(nil)
}

// UnsetInstanceId ensures that no value is present for InstanceId, not even an explicit nil
func (o *ConsumerLagData) UnsetInstanceId() {
	o.InstanceId.Unset()
}

// GetClientId returns the ClientId field value
func (o *ConsumerLagData) GetClientId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ClientId
}

// GetClientIdOk returns a tuple with the ClientId field value
// and a boolean to check if the value has been set.
func (o *ConsumerLagData) GetClientIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ClientId, true
}

// SetClientId sets field value
func (o *ConsumerLagData) SetClientId(v string) {
	o.ClientId = v
}

// Redact resets all sensitive fields to their zero value.
func (o *ConsumerLagData) Redact() {
	o.recurseRedact(&o.Kind)
	o.recurseRedact(&o.Metadata)
	o.recurseRedact(&o.ClusterId)
	o.recurseRedact(&o.ConsumerGroupId)
	o.recurseRedact(&o.TopicName)
	o.recurseRedact(&o.PartitionId)
	o.recurseRedact(&o.CurrentOffset)
	o.recurseRedact(&o.LogEndOffset)
	o.recurseRedact(&o.Lag)
	o.recurseRedact(&o.ConsumerId)
	o.recurseRedact(o.InstanceId)
	o.recurseRedact(&o.ClientId)
}

func (o *ConsumerLagData) recurseRedact(v interface{}) {
	type redactor interface {
		Redact()
	}
	if r, ok := v.(redactor); ok {
		r.Redact()
	} else {
		val := reflect.ValueOf(v)
		if val.Kind() == reflect.Ptr {
			val = val.Elem()
		}
		switch val.Kind() {
		case reflect.Slice, reflect.Array:
			for i := 0; i < val.Len(); i++ {
				// support data types declared without pointers
				o.recurseRedact(val.Index(i).Interface())
				// ... and data types that were declared without but need pointers (for Redact)
				if val.Index(i).CanAddr() {
					o.recurseRedact(val.Index(i).Addr().Interface())
				}
			}
		}
	}
}

func (o ConsumerLagData) zeroField(v interface{}) {
	p := reflect.ValueOf(v).Elem()
	p.Set(reflect.Zero(p.Type()))
}

func (o ConsumerLagData) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["kind"] = o.Kind
	}
	if true {
		toSerialize["metadata"] = o.Metadata
	}
	if true {
		toSerialize["cluster_id"] = o.ClusterId
	}
	if true {
		toSerialize["consumer_group_id"] = o.ConsumerGroupId
	}
	if true {
		toSerialize["topic_name"] = o.TopicName
	}
	if true {
		toSerialize["partition_id"] = o.PartitionId
	}
	if true {
		toSerialize["current_offset"] = o.CurrentOffset
	}
	if true {
		toSerialize["log_end_offset"] = o.LogEndOffset
	}
	if true {
		toSerialize["lag"] = o.Lag
	}
	if true {
		toSerialize["consumer_id"] = o.ConsumerId
	}
	if o.InstanceId.IsSet() {
		toSerialize["instance_id"] = o.InstanceId.Get()
	}
	if true {
		toSerialize["client_id"] = o.ClientId
	}
	buffer := &bytes.Buffer{}
	encoder := json.NewEncoder(buffer)
	encoder.SetEscapeHTML(false)
	err := encoder.Encode(toSerialize)
	return buffer.Bytes(), err
}

type NullableConsumerLagData struct {
	value *ConsumerLagData
	isSet bool
}

func (v NullableConsumerLagData) Get() *ConsumerLagData {
	return v.value
}

func (v *NullableConsumerLagData) Set(val *ConsumerLagData) {
	v.value = val
	v.isSet = true
}

func (v NullableConsumerLagData) IsSet() bool {
	return v.isSet
}

func (v *NullableConsumerLagData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConsumerLagData(val *ConsumerLagData) *NullableConsumerLagData {
	return &NullableConsumerLagData{value: val, isSet: true}
}

func (v NullableConsumerLagData) MarshalJSON() ([]byte, error) {
	buffer := &bytes.Buffer{}
	encoder := json.NewEncoder(buffer)
	encoder.SetEscapeHTML(false)
	err := encoder.Encode(v.value)
	return buffer.Bytes(), err
}

func (v *NullableConsumerLagData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
