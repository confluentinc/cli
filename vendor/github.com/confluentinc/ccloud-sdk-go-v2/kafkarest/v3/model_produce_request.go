// Copyright 2021 Confluent Inc. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*
REST Admin API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 3.0.0
Contact: kafka-clients-proxy-team@confluent.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v3

import (
	"bytes"
	"encoding/json"
	"time"
)

import (
	"reflect"
)

// ProduceRequest struct for ProduceRequest
type ProduceRequest struct {
	PartitionId NullableInt32              `json:"partition_id,omitempty"`
	Headers     *[]ProduceRequestHeader    `json:"headers,omitempty"`
	Key         NullableProduceRequestData `json:"key,omitempty"`
	Value       NullableProduceRequestData `json:"value,omitempty"`
	Timestamp   NullableTime               `json:"timestamp,omitempty"`
}

// NewProduceRequest instantiates a new ProduceRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewProduceRequest() *ProduceRequest {
	this := ProduceRequest{}
	return &this
}

// NewProduceRequestWithDefaults instantiates a new ProduceRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewProduceRequestWithDefaults() *ProduceRequest {
	this := ProduceRequest{}
	return &this
}

// GetPartitionId returns the PartitionId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ProduceRequest) GetPartitionId() int32 {
	if o == nil || o.PartitionId.Get() == nil {
		var ret int32
		return ret
	}
	return *o.PartitionId.Get()
}

// GetPartitionIdOk returns a tuple with the PartitionId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ProduceRequest) GetPartitionIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.PartitionId.Get(), o.PartitionId.IsSet()
}

// HasPartitionId returns a boolean if a field has been set.
func (o *ProduceRequest) HasPartitionId() bool {
	if o != nil && o.PartitionId.IsSet() {
		return true
	}

	return false
}

// SetPartitionId gets a reference to the given NullableInt32 and assigns it to the PartitionId field.
func (o *ProduceRequest) SetPartitionId(v int32) {
	o.PartitionId.Set(&v)
}

// SetPartitionIdNil sets the value for PartitionId to be an explicit nil
func (o *ProduceRequest) SetPartitionIdNil() {
	o.PartitionId.Set(nil)
}

// UnsetPartitionId ensures that no value is present for PartitionId, not even an explicit nil
func (o *ProduceRequest) UnsetPartitionId() {
	o.PartitionId.Unset()
}

// GetHeaders returns the Headers field value if set, zero value otherwise.
func (o *ProduceRequest) GetHeaders() []ProduceRequestHeader {
	if o == nil || o.Headers == nil {
		var ret []ProduceRequestHeader
		return ret
	}
	return *o.Headers
}

// GetHeadersOk returns a tuple with the Headers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProduceRequest) GetHeadersOk() (*[]ProduceRequestHeader, bool) {
	if o == nil || o.Headers == nil {
		return nil, false
	}
	return o.Headers, true
}

// HasHeaders returns a boolean if a field has been set.
func (o *ProduceRequest) HasHeaders() bool {
	if o != nil && o.Headers != nil {
		return true
	}

	return false
}

// SetHeaders gets a reference to the given []ProduceRequestHeader and assigns it to the Headers field.
func (o *ProduceRequest) SetHeaders(v []ProduceRequestHeader) {
	o.Headers = &v
}

// GetKey returns the Key field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ProduceRequest) GetKey() ProduceRequestData {
	if o == nil || o.Key.Get() == nil {
		var ret ProduceRequestData
		return ret
	}
	return *o.Key.Get()
}

// GetKeyOk returns a tuple with the Key field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ProduceRequest) GetKeyOk() (*ProduceRequestData, bool) {
	if o == nil {
		return nil, false
	}
	return o.Key.Get(), o.Key.IsSet()
}

// HasKey returns a boolean if a field has been set.
func (o *ProduceRequest) HasKey() bool {
	if o != nil && o.Key.IsSet() {
		return true
	}

	return false
}

// SetKey gets a reference to the given NullableProduceRequestData and assigns it to the Key field.
func (o *ProduceRequest) SetKey(v ProduceRequestData) {
	o.Key.Set(&v)
}

// SetKeyNil sets the value for Key to be an explicit nil
func (o *ProduceRequest) SetKeyNil() {
	o.Key.Set(nil)
}

// UnsetKey ensures that no value is present for Key, not even an explicit nil
func (o *ProduceRequest) UnsetKey() {
	o.Key.Unset()
}

// GetValue returns the Value field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ProduceRequest) GetValue() ProduceRequestData {
	if o == nil || o.Value.Get() == nil {
		var ret ProduceRequestData
		return ret
	}
	return *o.Value.Get()
}

// GetValueOk returns a tuple with the Value field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ProduceRequest) GetValueOk() (*ProduceRequestData, bool) {
	if o == nil {
		return nil, false
	}
	return o.Value.Get(), o.Value.IsSet()
}

// HasValue returns a boolean if a field has been set.
func (o *ProduceRequest) HasValue() bool {
	if o != nil && o.Value.IsSet() {
		return true
	}

	return false
}

// SetValue gets a reference to the given NullableProduceRequestData and assigns it to the Value field.
func (o *ProduceRequest) SetValue(v ProduceRequestData) {
	o.Value.Set(&v)
}

// SetValueNil sets the value for Value to be an explicit nil
func (o *ProduceRequest) SetValueNil() {
	o.Value.Set(nil)
}

// UnsetValue ensures that no value is present for Value, not even an explicit nil
func (o *ProduceRequest) UnsetValue() {
	o.Value.Unset()
}

// GetTimestamp returns the Timestamp field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ProduceRequest) GetTimestamp() time.Time {
	if o == nil || o.Timestamp.Get() == nil {
		var ret time.Time
		return ret
	}
	return *o.Timestamp.Get()
}

// GetTimestampOk returns a tuple with the Timestamp field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ProduceRequest) GetTimestampOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return o.Timestamp.Get(), o.Timestamp.IsSet()
}

// HasTimestamp returns a boolean if a field has been set.
func (o *ProduceRequest) HasTimestamp() bool {
	if o != nil && o.Timestamp.IsSet() {
		return true
	}

	return false
}

// SetTimestamp gets a reference to the given NullableTime and assigns it to the Timestamp field.
func (o *ProduceRequest) SetTimestamp(v time.Time) {
	o.Timestamp.Set(&v)
}

// SetTimestampNil sets the value for Timestamp to be an explicit nil
func (o *ProduceRequest) SetTimestampNil() {
	o.Timestamp.Set(nil)
}

// UnsetTimestamp ensures that no value is present for Timestamp, not even an explicit nil
func (o *ProduceRequest) UnsetTimestamp() {
	o.Timestamp.Unset()
}

// Redact resets all sensitive fields to their zero value.
func (o *ProduceRequest) Redact() {
	o.recurseRedact(o.PartitionId)
	o.recurseRedact(o.Headers)
	o.recurseRedact(o.Key)
	o.recurseRedact(o.Value)
	o.recurseRedact(o.Timestamp)
}

func (o *ProduceRequest) recurseRedact(v interface{}) {
	type redactor interface {
		Redact()
	}
	if r, ok := v.(redactor); ok {
		r.Redact()
	} else {
		val := reflect.ValueOf(v)
		if val.Kind() == reflect.Ptr {
			val = val.Elem()
		}
		switch val.Kind() {
		case reflect.Slice, reflect.Array:
			for i := 0; i < val.Len(); i++ {
				// support data types declared without pointers
				o.recurseRedact(val.Index(i).Interface())
				// ... and data types that were declared without but need pointers (for Redact)
				if val.Index(i).CanAddr() {
					o.recurseRedact(val.Index(i).Addr().Interface())
				}
			}
		}
	}
}

func (o ProduceRequest) zeroField(v interface{}) {
	p := reflect.ValueOf(v).Elem()
	p.Set(reflect.Zero(p.Type()))
}

func (o ProduceRequest) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.PartitionId.IsSet() {
		toSerialize["partition_id"] = o.PartitionId.Get()
	}
	if o.Headers != nil {
		toSerialize["headers"] = o.Headers
	}
	if o.Key.IsSet() {
		toSerialize["key"] = o.Key.Get()
	}
	if o.Value.IsSet() {
		toSerialize["value"] = o.Value.Get()
	}
	if o.Timestamp.IsSet() {
		toSerialize["timestamp"] = o.Timestamp.Get()
	}
	buffer := &bytes.Buffer{}
	encoder := json.NewEncoder(buffer)
	encoder.SetEscapeHTML(false)
	err := encoder.Encode(toSerialize)
	return buffer.Bytes(), err
}

type NullableProduceRequest struct {
	value *ProduceRequest
	isSet bool
}

func (v NullableProduceRequest) Get() *ProduceRequest {
	return v.value
}

func (v *NullableProduceRequest) Set(val *ProduceRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableProduceRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableProduceRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProduceRequest(val *ProduceRequest) *NullableProduceRequest {
	return &NullableProduceRequest{value: val, isSet: true}
}

func (v NullableProduceRequest) MarshalJSON() ([]byte, error) {
	buffer := &bytes.Buffer{}
	encoder := json.NewEncoder(buffer)
	encoder.SetEscapeHTML(false)
	err := encoder.Encode(v.value)
	return buffer.Bytes(), err
}

func (v *NullableProduceRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
