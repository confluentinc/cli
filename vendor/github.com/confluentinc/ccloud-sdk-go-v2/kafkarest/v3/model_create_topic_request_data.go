// Copyright 2021 Confluent Inc. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*
REST Admin API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 3.0.0
Contact: kafka-clients-proxy-team@confluent.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v3

import (
	"bytes"
	"encoding/json"
)

import (
	"reflect"
)

// CreateTopicRequestData struct for CreateTopicRequestData
type CreateTopicRequestData struct {
	TopicName         string                           `json:"topic_name,omitempty"`
	PartitionsCount   *int32                           `json:"partitions_count,omitempty"`
	ReplicationFactor *int32                           `json:"replication_factor,omitempty"`
	Configs           *[]CreateTopicRequestDataConfigs `json:"configs,omitempty"`
	ValidateOnly      *bool                            `json:"validate_only,omitempty"`
}

// NewCreateTopicRequestData instantiates a new CreateTopicRequestData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateTopicRequestData(topicName string) *CreateTopicRequestData {
	this := CreateTopicRequestData{}
	this.TopicName = topicName
	return &this
}

// NewCreateTopicRequestDataWithDefaults instantiates a new CreateTopicRequestData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateTopicRequestDataWithDefaults() *CreateTopicRequestData {
	this := CreateTopicRequestData{}
	return &this
}

// GetTopicName returns the TopicName field value
func (o *CreateTopicRequestData) GetTopicName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TopicName
}

// GetTopicNameOk returns a tuple with the TopicName field value
// and a boolean to check if the value has been set.
func (o *CreateTopicRequestData) GetTopicNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TopicName, true
}

// SetTopicName sets field value
func (o *CreateTopicRequestData) SetTopicName(v string) {
	o.TopicName = v
}

// GetPartitionsCount returns the PartitionsCount field value if set, zero value otherwise.
func (o *CreateTopicRequestData) GetPartitionsCount() int32 {
	if o == nil || o.PartitionsCount == nil {
		var ret int32
		return ret
	}
	return *o.PartitionsCount
}

// GetPartitionsCountOk returns a tuple with the PartitionsCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateTopicRequestData) GetPartitionsCountOk() (*int32, bool) {
	if o == nil || o.PartitionsCount == nil {
		return nil, false
	}
	return o.PartitionsCount, true
}

// HasPartitionsCount returns a boolean if a field has been set.
func (o *CreateTopicRequestData) HasPartitionsCount() bool {
	if o != nil && o.PartitionsCount != nil {
		return true
	}

	return false
}

// SetPartitionsCount gets a reference to the given int32 and assigns it to the PartitionsCount field.
func (o *CreateTopicRequestData) SetPartitionsCount(v int32) {
	o.PartitionsCount = &v
}

// GetReplicationFactor returns the ReplicationFactor field value if set, zero value otherwise.
func (o *CreateTopicRequestData) GetReplicationFactor() int32 {
	if o == nil || o.ReplicationFactor == nil {
		var ret int32
		return ret
	}
	return *o.ReplicationFactor
}

// GetReplicationFactorOk returns a tuple with the ReplicationFactor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateTopicRequestData) GetReplicationFactorOk() (*int32, bool) {
	if o == nil || o.ReplicationFactor == nil {
		return nil, false
	}
	return o.ReplicationFactor, true
}

// HasReplicationFactor returns a boolean if a field has been set.
func (o *CreateTopicRequestData) HasReplicationFactor() bool {
	if o != nil && o.ReplicationFactor != nil {
		return true
	}

	return false
}

// SetReplicationFactor gets a reference to the given int32 and assigns it to the ReplicationFactor field.
func (o *CreateTopicRequestData) SetReplicationFactor(v int32) {
	o.ReplicationFactor = &v
}

// GetConfigs returns the Configs field value if set, zero value otherwise.
func (o *CreateTopicRequestData) GetConfigs() []CreateTopicRequestDataConfigs {
	if o == nil || o.Configs == nil {
		var ret []CreateTopicRequestDataConfigs
		return ret
	}
	return *o.Configs
}

// GetConfigsOk returns a tuple with the Configs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateTopicRequestData) GetConfigsOk() (*[]CreateTopicRequestDataConfigs, bool) {
	if o == nil || o.Configs == nil {
		return nil, false
	}
	return o.Configs, true
}

// HasConfigs returns a boolean if a field has been set.
func (o *CreateTopicRequestData) HasConfigs() bool {
	if o != nil && o.Configs != nil {
		return true
	}

	return false
}

// SetConfigs gets a reference to the given []CreateTopicRequestDataConfigs and assigns it to the Configs field.
func (o *CreateTopicRequestData) SetConfigs(v []CreateTopicRequestDataConfigs) {
	o.Configs = &v
}

// GetValidateOnly returns the ValidateOnly field value if set, zero value otherwise.
func (o *CreateTopicRequestData) GetValidateOnly() bool {
	if o == nil || o.ValidateOnly == nil {
		var ret bool
		return ret
	}
	return *o.ValidateOnly
}

// GetValidateOnlyOk returns a tuple with the ValidateOnly field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateTopicRequestData) GetValidateOnlyOk() (*bool, bool) {
	if o == nil || o.ValidateOnly == nil {
		return nil, false
	}
	return o.ValidateOnly, true
}

// HasValidateOnly returns a boolean if a field has been set.
func (o *CreateTopicRequestData) HasValidateOnly() bool {
	if o != nil && o.ValidateOnly != nil {
		return true
	}

	return false
}

// SetValidateOnly gets a reference to the given bool and assigns it to the ValidateOnly field.
func (o *CreateTopicRequestData) SetValidateOnly(v bool) {
	o.ValidateOnly = &v
}

// Redact resets all sensitive fields to their zero value.
func (o *CreateTopicRequestData) Redact() {
	o.recurseRedact(&o.TopicName)
	o.recurseRedact(o.PartitionsCount)
	o.recurseRedact(o.ReplicationFactor)
	o.recurseRedact(o.Configs)
	o.recurseRedact(o.ValidateOnly)
}

func (o *CreateTopicRequestData) recurseRedact(v interface{}) {
	type redactor interface {
		Redact()
	}
	if r, ok := v.(redactor); ok {
		r.Redact()
	} else {
		val := reflect.ValueOf(v)
		if val.Kind() == reflect.Ptr {
			val = val.Elem()
		}
		switch val.Kind() {
		case reflect.Slice, reflect.Array:
			for i := 0; i < val.Len(); i++ {
				// support data types declared without pointers
				o.recurseRedact(val.Index(i).Interface())
				// ... and data types that were declared without but need pointers (for Redact)
				if val.Index(i).CanAddr() {
					o.recurseRedact(val.Index(i).Addr().Interface())
				}
			}
		}
	}
}

func (o CreateTopicRequestData) zeroField(v interface{}) {
	p := reflect.ValueOf(v).Elem()
	p.Set(reflect.Zero(p.Type()))
}

func (o CreateTopicRequestData) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["topic_name"] = o.TopicName
	}
	if o.PartitionsCount != nil {
		toSerialize["partitions_count"] = o.PartitionsCount
	}
	if o.ReplicationFactor != nil {
		toSerialize["replication_factor"] = o.ReplicationFactor
	}
	if o.Configs != nil {
		toSerialize["configs"] = o.Configs
	}
	if o.ValidateOnly != nil {
		toSerialize["validate_only"] = o.ValidateOnly
	}
	buffer := &bytes.Buffer{}
	encoder := json.NewEncoder(buffer)
	encoder.SetEscapeHTML(false)
	err := encoder.Encode(toSerialize)
	return buffer.Bytes(), err
}

type NullableCreateTopicRequestData struct {
	value *CreateTopicRequestData
	isSet bool
}

func (v NullableCreateTopicRequestData) Get() *CreateTopicRequestData {
	return v.value
}

func (v *NullableCreateTopicRequestData) Set(val *CreateTopicRequestData) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateTopicRequestData) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateTopicRequestData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateTopicRequestData(val *CreateTopicRequestData) *NullableCreateTopicRequestData {
	return &NullableCreateTopicRequestData{value: val, isSet: true}
}

func (v NullableCreateTopicRequestData) MarshalJSON() ([]byte, error) {
	buffer := &bytes.Buffer{}
	encoder := json.NewEncoder(buffer)
	encoder.SetEscapeHTML(false)
	err := encoder.Encode(v.value)
	return buffer.Bytes(), err
}

func (v *NullableCreateTopicRequestData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
