// Copyright 2021 Confluent Inc. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*
REST Admin API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 3.0.0
Contact: kafka-clients-proxy-team@confluent.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v3

import (
	"bytes"
	"encoding/json"
)

import (
	"reflect"
)

// ResourceMetadata struct for ResourceMetadata
type ResourceMetadata struct {
	Self         string         `json:"self,omitempty"`
	ResourceName NullableString `json:"resource_name,omitempty"`
}

// NewResourceMetadata instantiates a new ResourceMetadata object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewResourceMetadata(self string) *ResourceMetadata {
	this := ResourceMetadata{}
	this.Self = self
	return &this
}

// NewResourceMetadataWithDefaults instantiates a new ResourceMetadata object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewResourceMetadataWithDefaults() *ResourceMetadata {
	this := ResourceMetadata{}
	return &this
}

// GetSelf returns the Self field value
func (o *ResourceMetadata) GetSelf() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Self
}

// GetSelfOk returns a tuple with the Self field value
// and a boolean to check if the value has been set.
func (o *ResourceMetadata) GetSelfOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Self, true
}

// SetSelf sets field value
func (o *ResourceMetadata) SetSelf(v string) {
	o.Self = v
}

// GetResourceName returns the ResourceName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ResourceMetadata) GetResourceName() string {
	if o == nil || o.ResourceName.Get() == nil {
		var ret string
		return ret
	}
	return *o.ResourceName.Get()
}

// GetResourceNameOk returns a tuple with the ResourceName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ResourceMetadata) GetResourceNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ResourceName.Get(), o.ResourceName.IsSet()
}

// HasResourceName returns a boolean if a field has been set.
func (o *ResourceMetadata) HasResourceName() bool {
	if o != nil && o.ResourceName.IsSet() {
		return true
	}

	return false
}

// SetResourceName gets a reference to the given NullableString and assigns it to the ResourceName field.
func (o *ResourceMetadata) SetResourceName(v string) {
	o.ResourceName.Set(&v)
}

// SetResourceNameNil sets the value for ResourceName to be an explicit nil
func (o *ResourceMetadata) SetResourceNameNil() {
	o.ResourceName.Set(nil)
}

// UnsetResourceName ensures that no value is present for ResourceName, not even an explicit nil
func (o *ResourceMetadata) UnsetResourceName() {
	o.ResourceName.Unset()
}

// Redact resets all sensitive fields to their zero value.
func (o *ResourceMetadata) Redact() {
	o.recurseRedact(&o.Self)
	o.recurseRedact(o.ResourceName)
}

func (o *ResourceMetadata) recurseRedact(v interface{}) {
	type redactor interface {
		Redact()
	}
	if r, ok := v.(redactor); ok {
		r.Redact()
	} else {
		val := reflect.ValueOf(v)
		if val.Kind() == reflect.Ptr {
			val = val.Elem()
		}
		switch val.Kind() {
		case reflect.Slice, reflect.Array:
			for i := 0; i < val.Len(); i++ {
				// support data types declared without pointers
				o.recurseRedact(val.Index(i).Interface())
				// ... and data types that were declared without but need pointers (for Redact)
				if val.Index(i).CanAddr() {
					o.recurseRedact(val.Index(i).Addr().Interface())
				}
			}
		}
	}
}

func (o ResourceMetadata) zeroField(v interface{}) {
	p := reflect.ValueOf(v).Elem()
	p.Set(reflect.Zero(p.Type()))
}

func (o ResourceMetadata) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["self"] = o.Self
	}
	if o.ResourceName.IsSet() {
		toSerialize["resource_name"] = o.ResourceName.Get()
	}
	buffer := &bytes.Buffer{}
	encoder := json.NewEncoder(buffer)
	encoder.SetEscapeHTML(false)
	err := encoder.Encode(toSerialize)
	return buffer.Bytes(), err
}

type NullableResourceMetadata struct {
	value *ResourceMetadata
	isSet bool
}

func (v NullableResourceMetadata) Get() *ResourceMetadata {
	return v.value
}

func (v *NullableResourceMetadata) Set(val *ResourceMetadata) {
	v.value = val
	v.isSet = true
}

func (v NullableResourceMetadata) IsSet() bool {
	return v.isSet
}

func (v *NullableResourceMetadata) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableResourceMetadata(val *ResourceMetadata) *NullableResourceMetadata {
	return &NullableResourceMetadata{value: val, isSet: true}
}

func (v NullableResourceMetadata) MarshalJSON() ([]byte, error) {
	buffer := &bytes.Buffer{}
	encoder := json.NewEncoder(buffer)
	encoder.SetEscapeHTML(false)
	err := encoder.Encode(v.value)
	return buffer.Bytes(), err
}

func (v *NullableResourceMetadata) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
