// Copyright 2021 Confluent Inc. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*
REST Admin API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 3.0.0
Contact: kafka-clients-proxy-team@confluent.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v3

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// BrokerTaskType the model 'BrokerTaskType'
type BrokerTaskType string

// List of BrokerTaskType
const (
	ADD_BROKER    BrokerTaskType = "add-broker"
	REMOVE_BROKER BrokerTaskType = "remove-broker"
)

var allowedBrokerTaskTypeEnumValues = []BrokerTaskType{
	"add-broker",
	"remove-broker",
}

func (v *BrokerTaskType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := BrokerTaskType(value)
	for _, existing := range allowedBrokerTaskTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid BrokerTaskType", value)
}

// NewBrokerTaskTypeFromValue returns a pointer to a valid BrokerTaskType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewBrokerTaskTypeFromValue(v string) (*BrokerTaskType, error) {
	ev := BrokerTaskType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for BrokerTaskType: valid values are %v", v, allowedBrokerTaskTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v BrokerTaskType) IsValid() bool {
	for _, existing := range allowedBrokerTaskTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to BrokerTaskType value
func (v BrokerTaskType) Ptr() *BrokerTaskType {
	return &v
}

type NullableBrokerTaskType struct {
	value *BrokerTaskType
	isSet bool
}

func (v NullableBrokerTaskType) Get() *BrokerTaskType {
	return v.value
}

func (v *NullableBrokerTaskType) Set(val *BrokerTaskType) {
	v.value = val
	v.isSet = true
}

func (v NullableBrokerTaskType) IsSet() bool {
	return v.isSet
}

func (v *NullableBrokerTaskType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBrokerTaskType(val *BrokerTaskType) *NullableBrokerTaskType {
	return &NullableBrokerTaskType{value: val, isSet: true}
}

func (v NullableBrokerTaskType) MarshalJSON() ([]byte, error) {
	buffer := &bytes.Buffer{}
	encoder := json.NewEncoder(buffer)
	encoder.SetEscapeHTML(false)
	err := encoder.Encode(v.value)
	return buffer.Bytes(), err
}

func (v *NullableBrokerTaskType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
