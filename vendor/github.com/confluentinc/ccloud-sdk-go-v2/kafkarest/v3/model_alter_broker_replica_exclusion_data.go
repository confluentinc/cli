// Copyright 2021 Confluent Inc. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*
REST Admin API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 3.0.0
Contact: kafka-clients-proxy-team@confluent.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v3

import (
	"bytes"
	"encoding/json"
)

import (
	"reflect"
)

// AlterBrokerReplicaExclusionData struct for AlterBrokerReplicaExclusionData
type AlterBrokerReplicaExclusionData struct {
	Kind         string           `json:"kind,omitempty"`
	Metadata     ResourceMetadata `json:"metadata,omitempty"`
	ClusterId    string           `json:"cluster_id,omitempty"`
	BrokerId     int32            `json:"broker_id,omitempty"`
	Exclusion    string           `json:"exclusion,omitempty"`
	Reason       string           `json:"reason,omitempty"`
	ErrorCode    NullableInt32    `json:"error_code,omitempty"`
	ErrorMessage NullableString   `json:"error_message,omitempty"`
	Broker       Relationship     `json:"broker,omitempty"`
}

// NewAlterBrokerReplicaExclusionData instantiates a new AlterBrokerReplicaExclusionData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAlterBrokerReplicaExclusionData(kind string, metadata ResourceMetadata, clusterId string, brokerId int32, exclusion string, reason string, broker Relationship) *AlterBrokerReplicaExclusionData {
	this := AlterBrokerReplicaExclusionData{}
	this.Kind = kind
	this.Metadata = metadata
	this.ClusterId = clusterId
	this.BrokerId = brokerId
	this.Exclusion = exclusion
	this.Reason = reason
	this.Broker = broker
	return &this
}

// NewAlterBrokerReplicaExclusionDataWithDefaults instantiates a new AlterBrokerReplicaExclusionData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAlterBrokerReplicaExclusionDataWithDefaults() *AlterBrokerReplicaExclusionData {
	this := AlterBrokerReplicaExclusionData{}
	return &this
}

// GetKind returns the Kind field value
func (o *AlterBrokerReplicaExclusionData) GetKind() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Kind
}

// GetKindOk returns a tuple with the Kind field value
// and a boolean to check if the value has been set.
func (o *AlterBrokerReplicaExclusionData) GetKindOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Kind, true
}

// SetKind sets field value
func (o *AlterBrokerReplicaExclusionData) SetKind(v string) {
	o.Kind = v
}

// GetMetadata returns the Metadata field value
func (o *AlterBrokerReplicaExclusionData) GetMetadata() ResourceMetadata {
	if o == nil {
		var ret ResourceMetadata
		return ret
	}

	return o.Metadata
}

// GetMetadataOk returns a tuple with the Metadata field value
// and a boolean to check if the value has been set.
func (o *AlterBrokerReplicaExclusionData) GetMetadataOk() (*ResourceMetadata, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Metadata, true
}

// SetMetadata sets field value
func (o *AlterBrokerReplicaExclusionData) SetMetadata(v ResourceMetadata) {
	o.Metadata = v
}

// GetClusterId returns the ClusterId field value
func (o *AlterBrokerReplicaExclusionData) GetClusterId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ClusterId
}

// GetClusterIdOk returns a tuple with the ClusterId field value
// and a boolean to check if the value has been set.
func (o *AlterBrokerReplicaExclusionData) GetClusterIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ClusterId, true
}

// SetClusterId sets field value
func (o *AlterBrokerReplicaExclusionData) SetClusterId(v string) {
	o.ClusterId = v
}

// GetBrokerId returns the BrokerId field value
func (o *AlterBrokerReplicaExclusionData) GetBrokerId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.BrokerId
}

// GetBrokerIdOk returns a tuple with the BrokerId field value
// and a boolean to check if the value has been set.
func (o *AlterBrokerReplicaExclusionData) GetBrokerIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.BrokerId, true
}

// SetBrokerId sets field value
func (o *AlterBrokerReplicaExclusionData) SetBrokerId(v int32) {
	o.BrokerId = v
}

// GetExclusion returns the Exclusion field value
func (o *AlterBrokerReplicaExclusionData) GetExclusion() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Exclusion
}

// GetExclusionOk returns a tuple with the Exclusion field value
// and a boolean to check if the value has been set.
func (o *AlterBrokerReplicaExclusionData) GetExclusionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Exclusion, true
}

// SetExclusion sets field value
func (o *AlterBrokerReplicaExclusionData) SetExclusion(v string) {
	o.Exclusion = v
}

// GetReason returns the Reason field value
func (o *AlterBrokerReplicaExclusionData) GetReason() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Reason
}

// GetReasonOk returns a tuple with the Reason field value
// and a boolean to check if the value has been set.
func (o *AlterBrokerReplicaExclusionData) GetReasonOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Reason, true
}

// SetReason sets field value
func (o *AlterBrokerReplicaExclusionData) SetReason(v string) {
	o.Reason = v
}

// GetErrorCode returns the ErrorCode field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AlterBrokerReplicaExclusionData) GetErrorCode() int32 {
	if o == nil || o.ErrorCode.Get() == nil {
		var ret int32
		return ret
	}
	return *o.ErrorCode.Get()
}

// GetErrorCodeOk returns a tuple with the ErrorCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AlterBrokerReplicaExclusionData) GetErrorCodeOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.ErrorCode.Get(), o.ErrorCode.IsSet()
}

// HasErrorCode returns a boolean if a field has been set.
func (o *AlterBrokerReplicaExclusionData) HasErrorCode() bool {
	if o != nil && o.ErrorCode.IsSet() {
		return true
	}

	return false
}

// SetErrorCode gets a reference to the given NullableInt32 and assigns it to the ErrorCode field.
func (o *AlterBrokerReplicaExclusionData) SetErrorCode(v int32) {
	o.ErrorCode.Set(&v)
}

// SetErrorCodeNil sets the value for ErrorCode to be an explicit nil
func (o *AlterBrokerReplicaExclusionData) SetErrorCodeNil() {
	o.ErrorCode.Set(nil)
}

// UnsetErrorCode ensures that no value is present for ErrorCode, not even an explicit nil
func (o *AlterBrokerReplicaExclusionData) UnsetErrorCode() {
	o.ErrorCode.Unset()
}

// GetErrorMessage returns the ErrorMessage field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AlterBrokerReplicaExclusionData) GetErrorMessage() string {
	if o == nil || o.ErrorMessage.Get() == nil {
		var ret string
		return ret
	}
	return *o.ErrorMessage.Get()
}

// GetErrorMessageOk returns a tuple with the ErrorMessage field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AlterBrokerReplicaExclusionData) GetErrorMessageOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ErrorMessage.Get(), o.ErrorMessage.IsSet()
}

// HasErrorMessage returns a boolean if a field has been set.
func (o *AlterBrokerReplicaExclusionData) HasErrorMessage() bool {
	if o != nil && o.ErrorMessage.IsSet() {
		return true
	}

	return false
}

// SetErrorMessage gets a reference to the given NullableString and assigns it to the ErrorMessage field.
func (o *AlterBrokerReplicaExclusionData) SetErrorMessage(v string) {
	o.ErrorMessage.Set(&v)
}

// SetErrorMessageNil sets the value for ErrorMessage to be an explicit nil
func (o *AlterBrokerReplicaExclusionData) SetErrorMessageNil() {
	o.ErrorMessage.Set(nil)
}

// UnsetErrorMessage ensures that no value is present for ErrorMessage, not even an explicit nil
func (o *AlterBrokerReplicaExclusionData) UnsetErrorMessage() {
	o.ErrorMessage.Unset()
}

// GetBroker returns the Broker field value
func (o *AlterBrokerReplicaExclusionData) GetBroker() Relationship {
	if o == nil {
		var ret Relationship
		return ret
	}

	return o.Broker
}

// GetBrokerOk returns a tuple with the Broker field value
// and a boolean to check if the value has been set.
func (o *AlterBrokerReplicaExclusionData) GetBrokerOk() (*Relationship, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Broker, true
}

// SetBroker sets field value
func (o *AlterBrokerReplicaExclusionData) SetBroker(v Relationship) {
	o.Broker = v
}

// Redact resets all sensitive fields to their zero value.
func (o *AlterBrokerReplicaExclusionData) Redact() {
	o.recurseRedact(&o.Kind)
	o.recurseRedact(&o.Metadata)
	o.recurseRedact(&o.ClusterId)
	o.recurseRedact(&o.BrokerId)
	o.recurseRedact(&o.Exclusion)
	o.recurseRedact(&o.Reason)
	o.recurseRedact(o.ErrorCode)
	o.recurseRedact(o.ErrorMessage)
	o.recurseRedact(&o.Broker)
}

func (o *AlterBrokerReplicaExclusionData) recurseRedact(v interface{}) {
	type redactor interface {
		Redact()
	}
	if r, ok := v.(redactor); ok {
		r.Redact()
	} else {
		val := reflect.ValueOf(v)
		if val.Kind() == reflect.Ptr {
			val = val.Elem()
		}
		switch val.Kind() {
		case reflect.Slice, reflect.Array:
			for i := 0; i < val.Len(); i++ {
				// support data types declared without pointers
				o.recurseRedact(val.Index(i).Interface())
				// ... and data types that were declared without but need pointers (for Redact)
				if val.Index(i).CanAddr() {
					o.recurseRedact(val.Index(i).Addr().Interface())
				}
			}
		}
	}
}

func (o AlterBrokerReplicaExclusionData) zeroField(v interface{}) {
	p := reflect.ValueOf(v).Elem()
	p.Set(reflect.Zero(p.Type()))
}

func (o AlterBrokerReplicaExclusionData) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["kind"] = o.Kind
	}
	if true {
		toSerialize["metadata"] = o.Metadata
	}
	if true {
		toSerialize["cluster_id"] = o.ClusterId
	}
	if true {
		toSerialize["broker_id"] = o.BrokerId
	}
	if true {
		toSerialize["exclusion"] = o.Exclusion
	}
	if true {
		toSerialize["reason"] = o.Reason
	}
	if o.ErrorCode.IsSet() {
		toSerialize["error_code"] = o.ErrorCode.Get()
	}
	if o.ErrorMessage.IsSet() {
		toSerialize["error_message"] = o.ErrorMessage.Get()
	}
	if true {
		toSerialize["broker"] = o.Broker
	}
	buffer := &bytes.Buffer{}
	encoder := json.NewEncoder(buffer)
	encoder.SetEscapeHTML(false)
	err := encoder.Encode(toSerialize)
	return buffer.Bytes(), err
}

type NullableAlterBrokerReplicaExclusionData struct {
	value *AlterBrokerReplicaExclusionData
	isSet bool
}

func (v NullableAlterBrokerReplicaExclusionData) Get() *AlterBrokerReplicaExclusionData {
	return v.value
}

func (v *NullableAlterBrokerReplicaExclusionData) Set(val *AlterBrokerReplicaExclusionData) {
	v.value = val
	v.isSet = true
}

func (v NullableAlterBrokerReplicaExclusionData) IsSet() bool {
	return v.isSet
}

func (v *NullableAlterBrokerReplicaExclusionData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAlterBrokerReplicaExclusionData(val *AlterBrokerReplicaExclusionData) *NullableAlterBrokerReplicaExclusionData {
	return &NullableAlterBrokerReplicaExclusionData{value: val, isSet: true}
}

func (v NullableAlterBrokerReplicaExclusionData) MarshalJSON() ([]byte, error) {
	buffer := &bytes.Buffer{}
	encoder := json.NewEncoder(buffer)
	encoder.SetEscapeHTML(false)
	err := encoder.Encode(v.value)
	return buffer.Bytes(), err
}

func (v *NullableAlterBrokerReplicaExclusionData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
