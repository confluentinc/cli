// Copyright 2021 Confluent Inc. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*
REST Admin API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 3.0.0
Contact: kafka-clients-proxy-team@confluent.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v3

import (
	"bytes"
	"encoding/json"
)

import (
	"reflect"
)

// ListLinkConfigsResponseData struct for ListLinkConfigsResponseData
type ListLinkConfigsResponseData struct {
	Kind      string           `json:"kind,omitempty"`
	Metadata  ResourceMetadata `json:"metadata,omitempty"`
	ClusterId string           `json:"cluster_id,omitempty"`
	Name      string           `json:"name,omitempty"`
	Value     string           `json:"value,omitempty"`
	ReadOnly  bool             `json:"read_only,omitempty"`
	Sensitive bool             `json:"sensitive,omitempty"`
	Source    string           `json:"source,omitempty"`
	Synonyms  []string         `json:"synonyms,omitempty"`
	LinkName  string           `json:"link_name,omitempty"`
}

// NewListLinkConfigsResponseData instantiates a new ListLinkConfigsResponseData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewListLinkConfigsResponseData(kind string, metadata ResourceMetadata, clusterId string, name string, value string, readOnly bool, sensitive bool, source string, synonyms []string, linkName string) *ListLinkConfigsResponseData {
	this := ListLinkConfigsResponseData{}
	this.Kind = kind
	this.Metadata = metadata
	this.ClusterId = clusterId
	this.Name = name
	this.Value = value
	this.ReadOnly = readOnly
	this.Sensitive = sensitive
	this.Source = source
	this.Synonyms = synonyms
	this.LinkName = linkName
	return &this
}

// NewListLinkConfigsResponseDataWithDefaults instantiates a new ListLinkConfigsResponseData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewListLinkConfigsResponseDataWithDefaults() *ListLinkConfigsResponseData {
	this := ListLinkConfigsResponseData{}
	return &this
}

// GetKind returns the Kind field value
func (o *ListLinkConfigsResponseData) GetKind() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Kind
}

// GetKindOk returns a tuple with the Kind field value
// and a boolean to check if the value has been set.
func (o *ListLinkConfigsResponseData) GetKindOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Kind, true
}

// SetKind sets field value
func (o *ListLinkConfigsResponseData) SetKind(v string) {
	o.Kind = v
}

// GetMetadata returns the Metadata field value
func (o *ListLinkConfigsResponseData) GetMetadata() ResourceMetadata {
	if o == nil {
		var ret ResourceMetadata
		return ret
	}

	return o.Metadata
}

// GetMetadataOk returns a tuple with the Metadata field value
// and a boolean to check if the value has been set.
func (o *ListLinkConfigsResponseData) GetMetadataOk() (*ResourceMetadata, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Metadata, true
}

// SetMetadata sets field value
func (o *ListLinkConfigsResponseData) SetMetadata(v ResourceMetadata) {
	o.Metadata = v
}

// GetClusterId returns the ClusterId field value
func (o *ListLinkConfigsResponseData) GetClusterId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ClusterId
}

// GetClusterIdOk returns a tuple with the ClusterId field value
// and a boolean to check if the value has been set.
func (o *ListLinkConfigsResponseData) GetClusterIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ClusterId, true
}

// SetClusterId sets field value
func (o *ListLinkConfigsResponseData) SetClusterId(v string) {
	o.ClusterId = v
}

// GetName returns the Name field value
func (o *ListLinkConfigsResponseData) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *ListLinkConfigsResponseData) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *ListLinkConfigsResponseData) SetName(v string) {
	o.Name = v
}

// GetValue returns the Value field value
func (o *ListLinkConfigsResponseData) GetValue() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Value
}

// GetValueOk returns a tuple with the Value field value
// and a boolean to check if the value has been set.
func (o *ListLinkConfigsResponseData) GetValueOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Value, true
}

// SetValue sets field value
func (o *ListLinkConfigsResponseData) SetValue(v string) {
	o.Value = v
}

// GetReadOnly returns the ReadOnly field value
func (o *ListLinkConfigsResponseData) GetReadOnly() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.ReadOnly
}

// GetReadOnlyOk returns a tuple with the ReadOnly field value
// and a boolean to check if the value has been set.
func (o *ListLinkConfigsResponseData) GetReadOnlyOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ReadOnly, true
}

// SetReadOnly sets field value
func (o *ListLinkConfigsResponseData) SetReadOnly(v bool) {
	o.ReadOnly = v
}

// GetSensitive returns the Sensitive field value
func (o *ListLinkConfigsResponseData) GetSensitive() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Sensitive
}

// GetSensitiveOk returns a tuple with the Sensitive field value
// and a boolean to check if the value has been set.
func (o *ListLinkConfigsResponseData) GetSensitiveOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Sensitive, true
}

// SetSensitive sets field value
func (o *ListLinkConfigsResponseData) SetSensitive(v bool) {
	o.Sensitive = v
}

// GetSource returns the Source field value
func (o *ListLinkConfigsResponseData) GetSource() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Source
}

// GetSourceOk returns a tuple with the Source field value
// and a boolean to check if the value has been set.
func (o *ListLinkConfigsResponseData) GetSourceOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Source, true
}

// SetSource sets field value
func (o *ListLinkConfigsResponseData) SetSource(v string) {
	o.Source = v
}

// GetSynonyms returns the Synonyms field value
func (o *ListLinkConfigsResponseData) GetSynonyms() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Synonyms
}

// GetSynonymsOk returns a tuple with the Synonyms field value
// and a boolean to check if the value has been set.
func (o *ListLinkConfigsResponseData) GetSynonymsOk() (*[]string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Synonyms, true
}

// SetSynonyms sets field value
func (o *ListLinkConfigsResponseData) SetSynonyms(v []string) {
	o.Synonyms = v
}

// GetLinkName returns the LinkName field value
func (o *ListLinkConfigsResponseData) GetLinkName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.LinkName
}

// GetLinkNameOk returns a tuple with the LinkName field value
// and a boolean to check if the value has been set.
func (o *ListLinkConfigsResponseData) GetLinkNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.LinkName, true
}

// SetLinkName sets field value
func (o *ListLinkConfigsResponseData) SetLinkName(v string) {
	o.LinkName = v
}

// Redact resets all sensitive fields to their zero value.
func (o *ListLinkConfigsResponseData) Redact() {
	o.recurseRedact(&o.Kind)
	o.recurseRedact(&o.Metadata)
	o.recurseRedact(&o.ClusterId)
	o.recurseRedact(&o.Name)
	o.recurseRedact(&o.Value)
	o.recurseRedact(&o.ReadOnly)
	o.recurseRedact(&o.Sensitive)
	o.recurseRedact(&o.Source)
	o.recurseRedact(&o.Synonyms)
	o.recurseRedact(&o.LinkName)
}

func (o *ListLinkConfigsResponseData) recurseRedact(v interface{}) {
	type redactor interface {
		Redact()
	}
	if r, ok := v.(redactor); ok {
		r.Redact()
	} else {
		val := reflect.ValueOf(v)
		if val.Kind() == reflect.Ptr {
			val = val.Elem()
		}
		switch val.Kind() {
		case reflect.Slice, reflect.Array:
			for i := 0; i < val.Len(); i++ {
				// support data types declared without pointers
				o.recurseRedact(val.Index(i).Interface())
				// ... and data types that were declared without but need pointers (for Redact)
				if val.Index(i).CanAddr() {
					o.recurseRedact(val.Index(i).Addr().Interface())
				}
			}
		}
	}
}

func (o ListLinkConfigsResponseData) zeroField(v interface{}) {
	p := reflect.ValueOf(v).Elem()
	p.Set(reflect.Zero(p.Type()))
}

func (o ListLinkConfigsResponseData) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["kind"] = o.Kind
	}
	if true {
		toSerialize["metadata"] = o.Metadata
	}
	if true {
		toSerialize["cluster_id"] = o.ClusterId
	}
	if true {
		toSerialize["name"] = o.Name
	}
	if true {
		toSerialize["value"] = o.Value
	}
	if true {
		toSerialize["read_only"] = o.ReadOnly
	}
	if true {
		toSerialize["sensitive"] = o.Sensitive
	}
	if true {
		toSerialize["source"] = o.Source
	}
	if true {
		toSerialize["synonyms"] = o.Synonyms
	}
	if true {
		toSerialize["link_name"] = o.LinkName
	}
	buffer := &bytes.Buffer{}
	encoder := json.NewEncoder(buffer)
	encoder.SetEscapeHTML(false)
	err := encoder.Encode(toSerialize)
	return buffer.Bytes(), err
}

type NullableListLinkConfigsResponseData struct {
	value *ListLinkConfigsResponseData
	isSet bool
}

func (v NullableListLinkConfigsResponseData) Get() *ListLinkConfigsResponseData {
	return v.value
}

func (v *NullableListLinkConfigsResponseData) Set(val *ListLinkConfigsResponseData) {
	v.value = val
	v.isSet = true
}

func (v NullableListLinkConfigsResponseData) IsSet() bool {
	return v.isSet
}

func (v *NullableListLinkConfigsResponseData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableListLinkConfigsResponseData(val *ListLinkConfigsResponseData) *NullableListLinkConfigsResponseData {
	return &NullableListLinkConfigsResponseData{value: val, isSet: true}
}

func (v NullableListLinkConfigsResponseData) MarshalJSON() ([]byte, error) {
	buffer := &bytes.Buffer{}
	encoder := json.NewEncoder(buffer)
	encoder.SetEscapeHTML(false)
	err := encoder.Encode(v.value)
	return buffer.Bytes(), err
}

func (v *NullableListLinkConfigsResponseData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
