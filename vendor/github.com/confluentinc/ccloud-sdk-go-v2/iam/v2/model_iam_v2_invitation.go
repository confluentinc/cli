// Copyright 2021 Confluent Inc. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*
Identity & Access Management API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.0.1-alpha0
Contact: paas-team@confluent.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"bytes"
	"encoding/json"
	"time"
)

import (
	"reflect"
)

// IamV2Invitation `Invitation` objects represent invitations to invite users to join your organizations in Confluent Cloud.  The API allows you to list all your invitations, as well as create, read, and delete a specified invitation.   Related guide: [User invitations in Confluent Cloud](https://docs.confluent.io/cloud/current/access-management/identity/user-accounts.html).  ## The Invitations Model <SchemaDefinition schemaRef=\"#/components/schemas/iam.v2.Invitation\" />  ## Quotas and Limits This resource is subject to the [following quotas](https://docs.confluent.io/cloud/current/quotas/overview.html):  | Quota | Description | | --- | --- | | `invitations_per_org` | Invitations in a Confluent Cloud organization |
type IamV2Invitation struct {
	// APIVersion defines the schema version of this representation of a resource.
	ApiVersion *string `json:"api_version,omitempty"`
	// Kind defines the object this REST resource represents.
	Kind *string `json:"kind,omitempty"`
	// ID is the \"natural identifier\" for an object within its scope/namespace; it is normally unique across time but not space. That is, you can assume that the ID will not be reclaimed and reused after an object is deleted (\"time\"); however, it may collide with IDs for other object `kinds` or objects of the same `kind` within a different scope/namespace (\"space\").
	Id       *string     `json:"id,omitempty"`
	Metadata *ObjectMeta `json:"metadata,omitempty"`
	// The user/invitee's email address
	Email *string `json:"email,omitempty"`
	// The user/invitee's authentication type. Note that only the [OrganizationAdmin role](https://docs.confluent.io/cloud/current/access-management/access-control/cloud-rbac.html#organizationadmin) can invite AUTH_TYPE_LOCAL users to SSO organizations. The user's auth_type is set as AUTH_TYPE_SSO by default if the organization has SSO enabled. Otherwise, the user's auth_type is AUTH_TYPE_LOCAL by default.
	AuthType *string `json:"auth_type,omitempty"`
	// The status of invitations
	Status *string `json:"status,omitempty"`
	// The timestamp that the invitation was accepted
	AcceptedAt NullableTime `json:"accepted_at,omitempty"`
	// The timestamp that the invitation will expire
	ExpiresAt *time.Time `json:"expires_at,omitempty"`
	// The user/invitee
	User *GlobalObjectReference `json:"user,omitempty"`
	// The invitation creator
	Creator *GlobalObjectReference `json:"creator,omitempty"`
}

// NewIamV2Invitation instantiates a new IamV2Invitation object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIamV2Invitation() *IamV2Invitation {
	this := IamV2Invitation{}
	return &this
}

// NewIamV2InvitationWithDefaults instantiates a new IamV2Invitation object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIamV2InvitationWithDefaults() *IamV2Invitation {
	this := IamV2Invitation{}
	return &this
}

// GetApiVersion returns the ApiVersion field value if set, zero value otherwise.
func (o *IamV2Invitation) GetApiVersion() string {
	if o == nil || o.ApiVersion == nil {
		var ret string
		return ret
	}
	return *o.ApiVersion
}

// GetApiVersionOk returns a tuple with the ApiVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IamV2Invitation) GetApiVersionOk() (*string, bool) {
	if o == nil || o.ApiVersion == nil {
		return nil, false
	}
	return o.ApiVersion, true
}

// HasApiVersion returns a boolean if a field has been set.
func (o *IamV2Invitation) HasApiVersion() bool {
	if o != nil && o.ApiVersion != nil {
		return true
	}

	return false
}

// SetApiVersion gets a reference to the given string and assigns it to the ApiVersion field.
func (o *IamV2Invitation) SetApiVersion(v string) {
	o.ApiVersion = &v
}

// GetKind returns the Kind field value if set, zero value otherwise.
func (o *IamV2Invitation) GetKind() string {
	if o == nil || o.Kind == nil {
		var ret string
		return ret
	}
	return *o.Kind
}

// GetKindOk returns a tuple with the Kind field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IamV2Invitation) GetKindOk() (*string, bool) {
	if o == nil || o.Kind == nil {
		return nil, false
	}
	return o.Kind, true
}

// HasKind returns a boolean if a field has been set.
func (o *IamV2Invitation) HasKind() bool {
	if o != nil && o.Kind != nil {
		return true
	}

	return false
}

// SetKind gets a reference to the given string and assigns it to the Kind field.
func (o *IamV2Invitation) SetKind(v string) {
	o.Kind = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *IamV2Invitation) GetId() string {
	if o == nil || o.Id == nil {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IamV2Invitation) GetIdOk() (*string, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *IamV2Invitation) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *IamV2Invitation) SetId(v string) {
	o.Id = &v
}

// GetMetadata returns the Metadata field value if set, zero value otherwise.
func (o *IamV2Invitation) GetMetadata() ObjectMeta {
	if o == nil || o.Metadata == nil {
		var ret ObjectMeta
		return ret
	}
	return *o.Metadata
}

// GetMetadataOk returns a tuple with the Metadata field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IamV2Invitation) GetMetadataOk() (*ObjectMeta, bool) {
	if o == nil || o.Metadata == nil {
		return nil, false
	}
	return o.Metadata, true
}

// HasMetadata returns a boolean if a field has been set.
func (o *IamV2Invitation) HasMetadata() bool {
	if o != nil && o.Metadata != nil {
		return true
	}

	return false
}

// SetMetadata gets a reference to the given ObjectMeta and assigns it to the Metadata field.
func (o *IamV2Invitation) SetMetadata(v ObjectMeta) {
	o.Metadata = &v
}

// GetEmail returns the Email field value if set, zero value otherwise.
func (o *IamV2Invitation) GetEmail() string {
	if o == nil || o.Email == nil {
		var ret string
		return ret
	}
	return *o.Email
}

// GetEmailOk returns a tuple with the Email field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IamV2Invitation) GetEmailOk() (*string, bool) {
	if o == nil || o.Email == nil {
		return nil, false
	}
	return o.Email, true
}

// HasEmail returns a boolean if a field has been set.
func (o *IamV2Invitation) HasEmail() bool {
	if o != nil && o.Email != nil {
		return true
	}

	return false
}

// SetEmail gets a reference to the given string and assigns it to the Email field.
func (o *IamV2Invitation) SetEmail(v string) {
	o.Email = &v
}

// GetAuthType returns the AuthType field value if set, zero value otherwise.
func (o *IamV2Invitation) GetAuthType() string {
	if o == nil || o.AuthType == nil {
		var ret string
		return ret
	}
	return *o.AuthType
}

// GetAuthTypeOk returns a tuple with the AuthType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IamV2Invitation) GetAuthTypeOk() (*string, bool) {
	if o == nil || o.AuthType == nil {
		return nil, false
	}
	return o.AuthType, true
}

// HasAuthType returns a boolean if a field has been set.
func (o *IamV2Invitation) HasAuthType() bool {
	if o != nil && o.AuthType != nil {
		return true
	}

	return false
}

// SetAuthType gets a reference to the given string and assigns it to the AuthType field.
func (o *IamV2Invitation) SetAuthType(v string) {
	o.AuthType = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *IamV2Invitation) GetStatus() string {
	if o == nil || o.Status == nil {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IamV2Invitation) GetStatusOk() (*string, bool) {
	if o == nil || o.Status == nil {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *IamV2Invitation) HasStatus() bool {
	if o != nil && o.Status != nil {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *IamV2Invitation) SetStatus(v string) {
	o.Status = &v
}

// GetAcceptedAt returns the AcceptedAt field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IamV2Invitation) GetAcceptedAt() time.Time {
	if o == nil || o.AcceptedAt.Get() == nil {
		var ret time.Time
		return ret
	}
	return *o.AcceptedAt.Get()
}

// GetAcceptedAtOk returns a tuple with the AcceptedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IamV2Invitation) GetAcceptedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return o.AcceptedAt.Get(), o.AcceptedAt.IsSet()
}

// HasAcceptedAt returns a boolean if a field has been set.
func (o *IamV2Invitation) HasAcceptedAt() bool {
	if o != nil && o.AcceptedAt.IsSet() {
		return true
	}

	return false
}

// SetAcceptedAt gets a reference to the given NullableTime and assigns it to the AcceptedAt field.
func (o *IamV2Invitation) SetAcceptedAt(v time.Time) {
	o.AcceptedAt.Set(&v)
}

// SetAcceptedAtNil sets the value for AcceptedAt to be an explicit nil
func (o *IamV2Invitation) SetAcceptedAtNil() {
	o.AcceptedAt.Set(nil)
}

// UnsetAcceptedAt ensures that no value is present for AcceptedAt, not even an explicit nil
func (o *IamV2Invitation) UnsetAcceptedAt() {
	o.AcceptedAt.Unset()
}

// GetExpiresAt returns the ExpiresAt field value if set, zero value otherwise.
func (o *IamV2Invitation) GetExpiresAt() time.Time {
	if o == nil || o.ExpiresAt == nil {
		var ret time.Time
		return ret
	}
	return *o.ExpiresAt
}

// GetExpiresAtOk returns a tuple with the ExpiresAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IamV2Invitation) GetExpiresAtOk() (*time.Time, bool) {
	if o == nil || o.ExpiresAt == nil {
		return nil, false
	}
	return o.ExpiresAt, true
}

// HasExpiresAt returns a boolean if a field has been set.
func (o *IamV2Invitation) HasExpiresAt() bool {
	if o != nil && o.ExpiresAt != nil {
		return true
	}

	return false
}

// SetExpiresAt gets a reference to the given time.Time and assigns it to the ExpiresAt field.
func (o *IamV2Invitation) SetExpiresAt(v time.Time) {
	o.ExpiresAt = &v
}

// GetUser returns the User field value if set, zero value otherwise.
func (o *IamV2Invitation) GetUser() GlobalObjectReference {
	if o == nil || o.User == nil {
		var ret GlobalObjectReference
		return ret
	}
	return *o.User
}

// GetUserOk returns a tuple with the User field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IamV2Invitation) GetUserOk() (*GlobalObjectReference, bool) {
	if o == nil || o.User == nil {
		return nil, false
	}
	return o.User, true
}

// HasUser returns a boolean if a field has been set.
func (o *IamV2Invitation) HasUser() bool {
	if o != nil && o.User != nil {
		return true
	}

	return false
}

// SetUser gets a reference to the given GlobalObjectReference and assigns it to the User field.
func (o *IamV2Invitation) SetUser(v GlobalObjectReference) {
	o.User = &v
}

// GetCreator returns the Creator field value if set, zero value otherwise.
func (o *IamV2Invitation) GetCreator() GlobalObjectReference {
	if o == nil || o.Creator == nil {
		var ret GlobalObjectReference
		return ret
	}
	return *o.Creator
}

// GetCreatorOk returns a tuple with the Creator field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IamV2Invitation) GetCreatorOk() (*GlobalObjectReference, bool) {
	if o == nil || o.Creator == nil {
		return nil, false
	}
	return o.Creator, true
}

// HasCreator returns a boolean if a field has been set.
func (o *IamV2Invitation) HasCreator() bool {
	if o != nil && o.Creator != nil {
		return true
	}

	return false
}

// SetCreator gets a reference to the given GlobalObjectReference and assigns it to the Creator field.
func (o *IamV2Invitation) SetCreator(v GlobalObjectReference) {
	o.Creator = &v
}

// Redact resets all sensitive fields to their zero value.
func (o *IamV2Invitation) Redact() {
	o.recurseRedact(o.ApiVersion)
	o.recurseRedact(o.Kind)
	o.recurseRedact(o.Id)
	o.recurseRedact(o.Metadata)
	o.recurseRedact(o.Email)
	o.recurseRedact(o.AuthType)
	o.recurseRedact(o.Status)
	o.recurseRedact(o.AcceptedAt)
	o.recurseRedact(o.ExpiresAt)
	o.recurseRedact(o.User)
	o.recurseRedact(o.Creator)
}

func (o *IamV2Invitation) recurseRedact(v interface{}) {
	type redactor interface {
		Redact()
	}
	if r, ok := v.(redactor); ok {
		r.Redact()
	} else {
		val := reflect.ValueOf(v)
		if val.Kind() == reflect.Ptr {
			val = val.Elem()
		}
		switch val.Kind() {
		case reflect.Slice, reflect.Array:
			for i := 0; i < val.Len(); i++ {
				// support data types declared without pointers
				o.recurseRedact(val.Index(i).Interface())
				// ... and data types that were declared without but need pointers (for Redact)
				if val.Index(i).CanAddr() {
					o.recurseRedact(val.Index(i).Addr().Interface())
				}
			}
		}
	}
}

func (o IamV2Invitation) zeroField(v interface{}) {
	p := reflect.ValueOf(v).Elem()
	p.Set(reflect.Zero(p.Type()))
}

func (o IamV2Invitation) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.ApiVersion != nil {
		toSerialize["api_version"] = o.ApiVersion
	}
	if o.Kind != nil {
		toSerialize["kind"] = o.Kind
	}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.Metadata != nil {
		toSerialize["metadata"] = o.Metadata
	}
	if o.Email != nil {
		toSerialize["email"] = o.Email
	}
	if o.AuthType != nil {
		toSerialize["auth_type"] = o.AuthType
	}
	if o.Status != nil {
		toSerialize["status"] = o.Status
	}
	if o.AcceptedAt.IsSet() {
		toSerialize["accepted_at"] = o.AcceptedAt.Get()
	}
	if o.ExpiresAt != nil {
		toSerialize["expires_at"] = o.ExpiresAt
	}
	if o.User != nil {
		toSerialize["user"] = o.User
	}
	if o.Creator != nil {
		toSerialize["creator"] = o.Creator
	}
	buffer := &bytes.Buffer{}
	encoder := json.NewEncoder(buffer)
	encoder.SetEscapeHTML(false)
	err := encoder.Encode(toSerialize)
	return buffer.Bytes(), err
}

type NullableIamV2Invitation struct {
	value *IamV2Invitation
	isSet bool
}

func (v NullableIamV2Invitation) Get() *IamV2Invitation {
	return v.value
}

func (v *NullableIamV2Invitation) Set(val *IamV2Invitation) {
	v.value = val
	v.isSet = true
}

func (v NullableIamV2Invitation) IsSet() bool {
	return v.isSet
}

func (v *NullableIamV2Invitation) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIamV2Invitation(val *IamV2Invitation) *NullableIamV2Invitation {
	return &NullableIamV2Invitation{value: val, isSet: true}
}

func (v NullableIamV2Invitation) MarshalJSON() ([]byte, error) {
	buffer := &bytes.Buffer{}
	encoder := json.NewEncoder(buffer)
	encoder.SetEscapeHTML(false)
	err := encoder.Encode(v.value)
	return buffer.Bytes(), err
}

func (v *NullableIamV2Invitation) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
