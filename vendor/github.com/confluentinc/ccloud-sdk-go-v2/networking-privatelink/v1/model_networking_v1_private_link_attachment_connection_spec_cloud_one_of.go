// Copyright 2021 Confluent Inc. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*
Network API

Network API

API version: 0.0.1-alpha1
Contact: cire-traffic@confluent.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// NetworkingV1PrivateLinkAttachmentConnectionSpecCloudOneOf - struct for NetworkingV1PrivateLinkAttachmentConnectionSpecCloudOneOf
type NetworkingV1PrivateLinkAttachmentConnectionSpecCloudOneOf struct {
	NetworkingV1AwsPrivateLinkAttachmentConnection   *NetworkingV1AwsPrivateLinkAttachmentConnection
	NetworkingV1AzurePrivateLinkAttachmentConnection *NetworkingV1AzurePrivateLinkAttachmentConnection
	NetworkingV1GcpPrivateLinkAttachmentConnection   *NetworkingV1GcpPrivateLinkAttachmentConnection
}

// NetworkingV1AwsPrivateLinkAttachmentConnectionAsNetworkingV1PrivateLinkAttachmentConnectionSpecCloudOneOf is a convenience function that returns NetworkingV1AwsPrivateLinkAttachmentConnection wrapped in NetworkingV1PrivateLinkAttachmentConnectionSpecCloudOneOf
func NetworkingV1AwsPrivateLinkAttachmentConnectionAsNetworkingV1PrivateLinkAttachmentConnectionSpecCloudOneOf(v *NetworkingV1AwsPrivateLinkAttachmentConnection) NetworkingV1PrivateLinkAttachmentConnectionSpecCloudOneOf {
	return NetworkingV1PrivateLinkAttachmentConnectionSpecCloudOneOf{NetworkingV1AwsPrivateLinkAttachmentConnection: v}
}

// NetworkingV1AzurePrivateLinkAttachmentConnectionAsNetworkingV1PrivateLinkAttachmentConnectionSpecCloudOneOf is a convenience function that returns NetworkingV1AzurePrivateLinkAttachmentConnection wrapped in NetworkingV1PrivateLinkAttachmentConnectionSpecCloudOneOf
func NetworkingV1AzurePrivateLinkAttachmentConnectionAsNetworkingV1PrivateLinkAttachmentConnectionSpecCloudOneOf(v *NetworkingV1AzurePrivateLinkAttachmentConnection) NetworkingV1PrivateLinkAttachmentConnectionSpecCloudOneOf {
	return NetworkingV1PrivateLinkAttachmentConnectionSpecCloudOneOf{NetworkingV1AzurePrivateLinkAttachmentConnection: v}
}

// NetworkingV1GcpPrivateLinkAttachmentConnectionAsNetworkingV1PrivateLinkAttachmentConnectionSpecCloudOneOf is a convenience function that returns NetworkingV1GcpPrivateLinkAttachmentConnection wrapped in NetworkingV1PrivateLinkAttachmentConnectionSpecCloudOneOf
func NetworkingV1GcpPrivateLinkAttachmentConnectionAsNetworkingV1PrivateLinkAttachmentConnectionSpecCloudOneOf(v *NetworkingV1GcpPrivateLinkAttachmentConnection) NetworkingV1PrivateLinkAttachmentConnectionSpecCloudOneOf {
	return NetworkingV1PrivateLinkAttachmentConnectionSpecCloudOneOf{NetworkingV1GcpPrivateLinkAttachmentConnection: v}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *NetworkingV1PrivateLinkAttachmentConnectionSpecCloudOneOf) UnmarshalJSON(data []byte) error {
	var err error
	// use discriminator value to speed up the lookup
	var jsonDict map[string]interface{}
	err = json.Unmarshal(data, &jsonDict)
	if err != nil {
		return fmt.Errorf("Failed to unmarshal JSON into map for the discriminator lookup.")
	}

	// check if the discriminator value is 'AwsPrivateLinkAttachmentConnection'
	if jsonDict["kind"] == "AwsPrivateLinkAttachmentConnection" {
		// try to unmarshal JSON data into NetworkingV1AwsPrivateLinkAttachmentConnection
		err = json.Unmarshal(data, &dst.NetworkingV1AwsPrivateLinkAttachmentConnection)
		if err == nil {
			return nil // data stored in dst.NetworkingV1AwsPrivateLinkAttachmentConnection, return on the first match
		} else {
			dst.NetworkingV1AwsPrivateLinkAttachmentConnection = nil
			return fmt.Errorf("Failed to unmarshal NetworkingV1PrivateLinkAttachmentConnectionSpecCloudOneOf as NetworkingV1AwsPrivateLinkAttachmentConnection: %s", err.Error())
		}
	}

	// check if the discriminator value is 'AzurePrivateLinkAttachmentConnection'
	if jsonDict["kind"] == "AzurePrivateLinkAttachmentConnection" {
		// try to unmarshal JSON data into NetworkingV1AzurePrivateLinkAttachmentConnection
		err = json.Unmarshal(data, &dst.NetworkingV1AzurePrivateLinkAttachmentConnection)
		if err == nil {
			return nil // data stored in dst.NetworkingV1AzurePrivateLinkAttachmentConnection, return on the first match
		} else {
			dst.NetworkingV1AzurePrivateLinkAttachmentConnection = nil
			return fmt.Errorf("Failed to unmarshal NetworkingV1PrivateLinkAttachmentConnectionSpecCloudOneOf as NetworkingV1AzurePrivateLinkAttachmentConnection: %s", err.Error())
		}
	}

	// check if the discriminator value is 'GcpPrivateLinkAttachmentConnection'
	if jsonDict["kind"] == "GcpPrivateLinkAttachmentConnection" {
		// try to unmarshal JSON data into NetworkingV1GcpPrivateLinkAttachmentConnection
		err = json.Unmarshal(data, &dst.NetworkingV1GcpPrivateLinkAttachmentConnection)
		if err == nil {
			return nil // data stored in dst.NetworkingV1GcpPrivateLinkAttachmentConnection, return on the first match
		} else {
			dst.NetworkingV1GcpPrivateLinkAttachmentConnection = nil
			return fmt.Errorf("Failed to unmarshal NetworkingV1PrivateLinkAttachmentConnectionSpecCloudOneOf as NetworkingV1GcpPrivateLinkAttachmentConnection: %s", err.Error())
		}
	}

	// check if the discriminator value is 'networking.v1.AwsPrivateLinkAttachmentConnection'
	if jsonDict["kind"] == "networking.v1.AwsPrivateLinkAttachmentConnection" {
		// try to unmarshal JSON data into NetworkingV1AwsPrivateLinkAttachmentConnection
		err = json.Unmarshal(data, &dst.NetworkingV1AwsPrivateLinkAttachmentConnection)
		if err == nil {
			return nil // data stored in dst.NetworkingV1AwsPrivateLinkAttachmentConnection, return on the first match
		} else {
			dst.NetworkingV1AwsPrivateLinkAttachmentConnection = nil
			return fmt.Errorf("Failed to unmarshal NetworkingV1PrivateLinkAttachmentConnectionSpecCloudOneOf as NetworkingV1AwsPrivateLinkAttachmentConnection: %s", err.Error())
		}
	}

	// check if the discriminator value is 'networking.v1.AzurePrivateLinkAttachmentConnection'
	if jsonDict["kind"] == "networking.v1.AzurePrivateLinkAttachmentConnection" {
		// try to unmarshal JSON data into NetworkingV1AzurePrivateLinkAttachmentConnection
		err = json.Unmarshal(data, &dst.NetworkingV1AzurePrivateLinkAttachmentConnection)
		if err == nil {
			return nil // data stored in dst.NetworkingV1AzurePrivateLinkAttachmentConnection, return on the first match
		} else {
			dst.NetworkingV1AzurePrivateLinkAttachmentConnection = nil
			return fmt.Errorf("Failed to unmarshal NetworkingV1PrivateLinkAttachmentConnectionSpecCloudOneOf as NetworkingV1AzurePrivateLinkAttachmentConnection: %s", err.Error())
		}
	}

	// check if the discriminator value is 'networking.v1.GcpPrivateLinkAttachmentConnection'
	if jsonDict["kind"] == "networking.v1.GcpPrivateLinkAttachmentConnection" {
		// try to unmarshal JSON data into NetworkingV1GcpPrivateLinkAttachmentConnection
		err = json.Unmarshal(data, &dst.NetworkingV1GcpPrivateLinkAttachmentConnection)
		if err == nil {
			return nil // data stored in dst.NetworkingV1GcpPrivateLinkAttachmentConnection, return on the first match
		} else {
			dst.NetworkingV1GcpPrivateLinkAttachmentConnection = nil
			return fmt.Errorf("Failed to unmarshal NetworkingV1PrivateLinkAttachmentConnectionSpecCloudOneOf as NetworkingV1GcpPrivateLinkAttachmentConnection: %s", err.Error())
		}
	}

	return nil
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src NetworkingV1PrivateLinkAttachmentConnectionSpecCloudOneOf) MarshalJSON() ([]byte, error) {
	if src.NetworkingV1AwsPrivateLinkAttachmentConnection != nil {
		buffer := &bytes.Buffer{}
		encoder := json.NewEncoder(buffer)
		encoder.SetEscapeHTML(false)
		err := encoder.Encode(&src.NetworkingV1AwsPrivateLinkAttachmentConnection)
		return buffer.Bytes(), err
	}

	if src.NetworkingV1AzurePrivateLinkAttachmentConnection != nil {
		buffer := &bytes.Buffer{}
		encoder := json.NewEncoder(buffer)
		encoder.SetEscapeHTML(false)
		err := encoder.Encode(&src.NetworkingV1AzurePrivateLinkAttachmentConnection)
		return buffer.Bytes(), err
	}

	if src.NetworkingV1GcpPrivateLinkAttachmentConnection != nil {
		buffer := &bytes.Buffer{}
		encoder := json.NewEncoder(buffer)
		encoder.SetEscapeHTML(false)
		err := encoder.Encode(&src.NetworkingV1GcpPrivateLinkAttachmentConnection)
		return buffer.Bytes(), err
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *NetworkingV1PrivateLinkAttachmentConnectionSpecCloudOneOf) GetActualInstance() interface{} {
	if obj.NetworkingV1AwsPrivateLinkAttachmentConnection != nil {
		return obj.NetworkingV1AwsPrivateLinkAttachmentConnection
	}

	if obj.NetworkingV1AzurePrivateLinkAttachmentConnection != nil {
		return obj.NetworkingV1AzurePrivateLinkAttachmentConnection
	}

	if obj.NetworkingV1GcpPrivateLinkAttachmentConnection != nil {
		return obj.NetworkingV1GcpPrivateLinkAttachmentConnection
	}

	// all schemas are nil
	return nil
}

type NullableNetworkingV1PrivateLinkAttachmentConnectionSpecCloudOneOf struct {
	value *NetworkingV1PrivateLinkAttachmentConnectionSpecCloudOneOf
	isSet bool
}

func (v NullableNetworkingV1PrivateLinkAttachmentConnectionSpecCloudOneOf) Get() *NetworkingV1PrivateLinkAttachmentConnectionSpecCloudOneOf {
	return v.value
}

func (v *NullableNetworkingV1PrivateLinkAttachmentConnectionSpecCloudOneOf) Set(val *NetworkingV1PrivateLinkAttachmentConnectionSpecCloudOneOf) {
	v.value = val
	v.isSet = true
}

func (v NullableNetworkingV1PrivateLinkAttachmentConnectionSpecCloudOneOf) IsSet() bool {
	return v.isSet
}

func (v *NullableNetworkingV1PrivateLinkAttachmentConnectionSpecCloudOneOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNetworkingV1PrivateLinkAttachmentConnectionSpecCloudOneOf(val *NetworkingV1PrivateLinkAttachmentConnectionSpecCloudOneOf) *NullableNetworkingV1PrivateLinkAttachmentConnectionSpecCloudOneOf {
	return &NullableNetworkingV1PrivateLinkAttachmentConnectionSpecCloudOneOf{value: val, isSet: true}
}

func (v NullableNetworkingV1PrivateLinkAttachmentConnectionSpecCloudOneOf) MarshalJSON() ([]byte, error) {
	buffer := &bytes.Buffer{}
	encoder := json.NewEncoder(buffer)
	encoder.SetEscapeHTML(false)
	err := encoder.Encode(v.value)
	return buffer.Bytes(), err
}

func (v *NullableNetworkingV1PrivateLinkAttachmentConnectionSpecCloudOneOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
