// Copyright 2021 Confluent Inc. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*
Network API

Network API

API version: 0.0.1-alpha1
Contact: cire-traffic@confluent.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1

import (
	"bytes"
	_context "context"
	_ioutil "io/ioutil"
	_nethttp "net/http"
	_neturl "net/url"
	"strings"
)

// Linger please
var (
	_ _context.Context
)

type PrivateLinkAttachmentConnectionsNetworkingV1Api interface {

	/*
		CreateNetworkingV1PrivateLinkAttachmentConnection Create a Private Link Attachment Connection

		[![Preview](https://img.shields.io/badge/Lifecycle%20Stage-Preview-%2300afba)](#section/Versioning/API-Lifecycle-Policy)

	Make a request to create a private link attachment connection.

		 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		 @return ApiCreateNetworkingV1PrivateLinkAttachmentConnectionRequest
	*/
	CreateNetworkingV1PrivateLinkAttachmentConnection(ctx _context.Context) ApiCreateNetworkingV1PrivateLinkAttachmentConnectionRequest

	// CreateNetworkingV1PrivateLinkAttachmentConnectionExecute executes the request
	//  @return NetworkingV1PrivateLinkAttachmentConnection
	CreateNetworkingV1PrivateLinkAttachmentConnectionExecute(r ApiCreateNetworkingV1PrivateLinkAttachmentConnectionRequest) (NetworkingV1PrivateLinkAttachmentConnection, *_nethttp.Response, error)

	/*
		DeleteNetworkingV1PrivateLinkAttachmentConnection Delete a Private Link Attachment Connection

		[![Preview](https://img.shields.io/badge/Lifecycle%20Stage-Preview-%2300afba)](#section/Versioning/API-Lifecycle-Policy)

	Make a request to delete a private link attachment connection.

		 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		 @param id The unique identifier for the private link attachment connection.
		 @return ApiDeleteNetworkingV1PrivateLinkAttachmentConnectionRequest
	*/
	DeleteNetworkingV1PrivateLinkAttachmentConnection(ctx _context.Context, id string) ApiDeleteNetworkingV1PrivateLinkAttachmentConnectionRequest

	// DeleteNetworkingV1PrivateLinkAttachmentConnectionExecute executes the request
	DeleteNetworkingV1PrivateLinkAttachmentConnectionExecute(r ApiDeleteNetworkingV1PrivateLinkAttachmentConnectionRequest) (*_nethttp.Response, error)

	/*
		GetNetworkingV1PrivateLinkAttachmentConnection Read a Private Link Attachment Connection

		[![Preview](https://img.shields.io/badge/Lifecycle%20Stage-Preview-%2300afba)](#section/Versioning/API-Lifecycle-Policy)

	Make a request to read a private link attachment connection.

		 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		 @param id The unique identifier for the private link attachment connection.
		 @return ApiGetNetworkingV1PrivateLinkAttachmentConnectionRequest
	*/
	GetNetworkingV1PrivateLinkAttachmentConnection(ctx _context.Context, id string) ApiGetNetworkingV1PrivateLinkAttachmentConnectionRequest

	// GetNetworkingV1PrivateLinkAttachmentConnectionExecute executes the request
	//  @return NetworkingV1PrivateLinkAttachmentConnection
	GetNetworkingV1PrivateLinkAttachmentConnectionExecute(r ApiGetNetworkingV1PrivateLinkAttachmentConnectionRequest) (NetworkingV1PrivateLinkAttachmentConnection, *_nethttp.Response, error)

	/*
		ListNetworkingV1PrivateLinkAttachmentConnections List of Private Link Attachment Connections

		[![Preview](https://img.shields.io/badge/Lifecycle%20Stage-Preview-%2300afba)](#section/Versioning/API-Lifecycle-Policy)

	Retrieve a sorted, filtered, paginated list of all private link attachment connections.

		 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		 @return ApiListNetworkingV1PrivateLinkAttachmentConnectionsRequest
	*/
	ListNetworkingV1PrivateLinkAttachmentConnections(ctx _context.Context) ApiListNetworkingV1PrivateLinkAttachmentConnectionsRequest

	// ListNetworkingV1PrivateLinkAttachmentConnectionsExecute executes the request
	//  @return NetworkingV1PrivateLinkAttachmentConnectionList
	ListNetworkingV1PrivateLinkAttachmentConnectionsExecute(r ApiListNetworkingV1PrivateLinkAttachmentConnectionsRequest) (NetworkingV1PrivateLinkAttachmentConnectionList, *_nethttp.Response, error)

	/*
		UpdateNetworkingV1PrivateLinkAttachmentConnection Update a Private Link Attachment Connection

		[![Preview](https://img.shields.io/badge/Lifecycle%20Stage-Preview-%2300afba)](#section/Versioning/API-Lifecycle-Policy)

	Make a request to update a private link attachment connection.



		 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		 @param id The unique identifier for the private link attachment connection.
		 @return ApiUpdateNetworkingV1PrivateLinkAttachmentConnectionRequest
	*/
	UpdateNetworkingV1PrivateLinkAttachmentConnection(ctx _context.Context, id string) ApiUpdateNetworkingV1PrivateLinkAttachmentConnectionRequest

	// UpdateNetworkingV1PrivateLinkAttachmentConnectionExecute executes the request
	//  @return NetworkingV1PrivateLinkAttachmentConnection
	UpdateNetworkingV1PrivateLinkAttachmentConnectionExecute(r ApiUpdateNetworkingV1PrivateLinkAttachmentConnectionRequest) (NetworkingV1PrivateLinkAttachmentConnection, *_nethttp.Response, error)
}

// PrivateLinkAttachmentConnectionsNetworkingV1ApiService PrivateLinkAttachmentConnectionsNetworkingV1Api service
type PrivateLinkAttachmentConnectionsNetworkingV1ApiService service

type ApiCreateNetworkingV1PrivateLinkAttachmentConnectionRequest struct {
	ctx                                         _context.Context
	ApiService                                  PrivateLinkAttachmentConnectionsNetworkingV1Api
	networkingV1PrivateLinkAttachmentConnection *NetworkingV1PrivateLinkAttachmentConnection
}

func (r ApiCreateNetworkingV1PrivateLinkAttachmentConnectionRequest) NetworkingV1PrivateLinkAttachmentConnection(networkingV1PrivateLinkAttachmentConnection NetworkingV1PrivateLinkAttachmentConnection) ApiCreateNetworkingV1PrivateLinkAttachmentConnectionRequest {
	r.networkingV1PrivateLinkAttachmentConnection = &networkingV1PrivateLinkAttachmentConnection
	return r
}

func (r ApiCreateNetworkingV1PrivateLinkAttachmentConnectionRequest) Execute() (NetworkingV1PrivateLinkAttachmentConnection, *_nethttp.Response, error) {
	return r.ApiService.CreateNetworkingV1PrivateLinkAttachmentConnectionExecute(r)
}

/*
CreateNetworkingV1PrivateLinkAttachmentConnection Create a Private Link Attachment Connection

[![Preview](https://img.shields.io/badge/Lifecycle%20Stage-Preview-%2300afba)](#section/Versioning/API-Lifecycle-Policy)

Make a request to create a private link attachment connection.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiCreateNetworkingV1PrivateLinkAttachmentConnectionRequest
*/
func (a *PrivateLinkAttachmentConnectionsNetworkingV1ApiService) CreateNetworkingV1PrivateLinkAttachmentConnection(ctx _context.Context) ApiCreateNetworkingV1PrivateLinkAttachmentConnectionRequest {
	return ApiCreateNetworkingV1PrivateLinkAttachmentConnectionRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//  @return NetworkingV1PrivateLinkAttachmentConnection
func (a *PrivateLinkAttachmentConnectionsNetworkingV1ApiService) CreateNetworkingV1PrivateLinkAttachmentConnectionExecute(r ApiCreateNetworkingV1PrivateLinkAttachmentConnectionRequest) (NetworkingV1PrivateLinkAttachmentConnection, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  NetworkingV1PrivateLinkAttachmentConnection
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PrivateLinkAttachmentConnectionsNetworkingV1ApiService.CreateNetworkingV1PrivateLinkAttachmentConnection")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/networking/v1/private-link-attachment-connections"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.networkingV1PrivateLinkAttachmentConnection
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v Failure
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v Failure
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v Failure
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v Failure
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v Failure
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v Failure
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeleteNetworkingV1PrivateLinkAttachmentConnectionRequest struct {
	ctx         _context.Context
	ApiService  PrivateLinkAttachmentConnectionsNetworkingV1Api
	environment *string
	id          string
}

// Scope the operation to the given environment.
func (r ApiDeleteNetworkingV1PrivateLinkAttachmentConnectionRequest) Environment(environment string) ApiDeleteNetworkingV1PrivateLinkAttachmentConnectionRequest {
	r.environment = &environment
	return r
}

func (r ApiDeleteNetworkingV1PrivateLinkAttachmentConnectionRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.DeleteNetworkingV1PrivateLinkAttachmentConnectionExecute(r)
}

/*
DeleteNetworkingV1PrivateLinkAttachmentConnection Delete a Private Link Attachment Connection

[![Preview](https://img.shields.io/badge/Lifecycle%20Stage-Preview-%2300afba)](#section/Versioning/API-Lifecycle-Policy)

Make a request to delete a private link attachment connection.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id The unique identifier for the private link attachment connection.
 @return ApiDeleteNetworkingV1PrivateLinkAttachmentConnectionRequest
*/
func (a *PrivateLinkAttachmentConnectionsNetworkingV1ApiService) DeleteNetworkingV1PrivateLinkAttachmentConnection(ctx _context.Context, id string) ApiDeleteNetworkingV1PrivateLinkAttachmentConnectionRequest {
	return ApiDeleteNetworkingV1PrivateLinkAttachmentConnectionRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
func (a *PrivateLinkAttachmentConnectionsNetworkingV1ApiService) DeleteNetworkingV1PrivateLinkAttachmentConnectionExecute(r ApiDeleteNetworkingV1PrivateLinkAttachmentConnectionRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PrivateLinkAttachmentConnectionsNetworkingV1ApiService.DeleteNetworkingV1PrivateLinkAttachmentConnection")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/networking/v1/private-link-attachment-connections/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", _neturl.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.environment == nil {
		return nil, reportError("environment is required and must be specified")
	}

	localVarQueryParams.Add("environment", parameterToString(*r.environment, ""))
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v Failure
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v Failure
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v Failure
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v Failure
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v Failure
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetNetworkingV1PrivateLinkAttachmentConnectionRequest struct {
	ctx         _context.Context
	ApiService  PrivateLinkAttachmentConnectionsNetworkingV1Api
	environment *string
	id          string
}

// Scope the operation to the given environment.
func (r ApiGetNetworkingV1PrivateLinkAttachmentConnectionRequest) Environment(environment string) ApiGetNetworkingV1PrivateLinkAttachmentConnectionRequest {
	r.environment = &environment
	return r
}

func (r ApiGetNetworkingV1PrivateLinkAttachmentConnectionRequest) Execute() (NetworkingV1PrivateLinkAttachmentConnection, *_nethttp.Response, error) {
	return r.ApiService.GetNetworkingV1PrivateLinkAttachmentConnectionExecute(r)
}

/*
GetNetworkingV1PrivateLinkAttachmentConnection Read a Private Link Attachment Connection

[![Preview](https://img.shields.io/badge/Lifecycle%20Stage-Preview-%2300afba)](#section/Versioning/API-Lifecycle-Policy)

Make a request to read a private link attachment connection.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id The unique identifier for the private link attachment connection.
 @return ApiGetNetworkingV1PrivateLinkAttachmentConnectionRequest
*/
func (a *PrivateLinkAttachmentConnectionsNetworkingV1ApiService) GetNetworkingV1PrivateLinkAttachmentConnection(ctx _context.Context, id string) ApiGetNetworkingV1PrivateLinkAttachmentConnectionRequest {
	return ApiGetNetworkingV1PrivateLinkAttachmentConnectionRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//  @return NetworkingV1PrivateLinkAttachmentConnection
func (a *PrivateLinkAttachmentConnectionsNetworkingV1ApiService) GetNetworkingV1PrivateLinkAttachmentConnectionExecute(r ApiGetNetworkingV1PrivateLinkAttachmentConnectionRequest) (NetworkingV1PrivateLinkAttachmentConnection, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  NetworkingV1PrivateLinkAttachmentConnection
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PrivateLinkAttachmentConnectionsNetworkingV1ApiService.GetNetworkingV1PrivateLinkAttachmentConnection")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/networking/v1/private-link-attachment-connections/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", _neturl.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.environment == nil {
		return localVarReturnValue, nil, reportError("environment is required and must be specified")
	}

	localVarQueryParams.Add("environment", parameterToString(*r.environment, ""))
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v Failure
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v Failure
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v Failure
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v Failure
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v Failure
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiListNetworkingV1PrivateLinkAttachmentConnectionsRequest struct {
	ctx                       _context.Context
	ApiService                PrivateLinkAttachmentConnectionsNetworkingV1Api
	environment               *string
	specPrivateLinkAttachment *string
	pageSize                  *int32
	pageToken                 *string
}

// Filter the results by exact match for environment.
func (r ApiListNetworkingV1PrivateLinkAttachmentConnectionsRequest) Environment(environment string) ApiListNetworkingV1PrivateLinkAttachmentConnectionsRequest {
	r.environment = &environment
	return r
}

// Filter the results by exact match for spec.private_link_attachment.
func (r ApiListNetworkingV1PrivateLinkAttachmentConnectionsRequest) SpecPrivateLinkAttachment(specPrivateLinkAttachment string) ApiListNetworkingV1PrivateLinkAttachmentConnectionsRequest {
	r.specPrivateLinkAttachment = &specPrivateLinkAttachment
	return r
}

// A pagination size for collection requests.
func (r ApiListNetworkingV1PrivateLinkAttachmentConnectionsRequest) PageSize(pageSize int32) ApiListNetworkingV1PrivateLinkAttachmentConnectionsRequest {
	r.pageSize = &pageSize
	return r
}

// An opaque pagination token for collection requests.
func (r ApiListNetworkingV1PrivateLinkAttachmentConnectionsRequest) PageToken(pageToken string) ApiListNetworkingV1PrivateLinkAttachmentConnectionsRequest {
	r.pageToken = &pageToken
	return r
}

func (r ApiListNetworkingV1PrivateLinkAttachmentConnectionsRequest) Execute() (NetworkingV1PrivateLinkAttachmentConnectionList, *_nethttp.Response, error) {
	return r.ApiService.ListNetworkingV1PrivateLinkAttachmentConnectionsExecute(r)
}

/*
ListNetworkingV1PrivateLinkAttachmentConnections List of Private Link Attachment Connections

[![Preview](https://img.shields.io/badge/Lifecycle%20Stage-Preview-%2300afba)](#section/Versioning/API-Lifecycle-Policy)

Retrieve a sorted, filtered, paginated list of all private link attachment connections.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiListNetworkingV1PrivateLinkAttachmentConnectionsRequest
*/
func (a *PrivateLinkAttachmentConnectionsNetworkingV1ApiService) ListNetworkingV1PrivateLinkAttachmentConnections(ctx _context.Context) ApiListNetworkingV1PrivateLinkAttachmentConnectionsRequest {
	return ApiListNetworkingV1PrivateLinkAttachmentConnectionsRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//  @return NetworkingV1PrivateLinkAttachmentConnectionList
func (a *PrivateLinkAttachmentConnectionsNetworkingV1ApiService) ListNetworkingV1PrivateLinkAttachmentConnectionsExecute(r ApiListNetworkingV1PrivateLinkAttachmentConnectionsRequest) (NetworkingV1PrivateLinkAttachmentConnectionList, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  NetworkingV1PrivateLinkAttachmentConnectionList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PrivateLinkAttachmentConnectionsNetworkingV1ApiService.ListNetworkingV1PrivateLinkAttachmentConnections")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/networking/v1/private-link-attachment-connections"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.environment == nil {
		return localVarReturnValue, nil, reportError("environment is required and must be specified")
	}
	if r.specPrivateLinkAttachment == nil {
		return localVarReturnValue, nil, reportError("specPrivateLinkAttachment is required and must be specified")
	}

	localVarQueryParams.Add("environment", parameterToString(*r.environment, ""))
	localVarQueryParams.Add("spec.private_link_attachment", parameterToString(*r.specPrivateLinkAttachment, ""))
	if r.pageSize != nil {
		localVarQueryParams.Add("page_size", parameterToString(*r.pageSize, ""))
	}
	if r.pageToken != nil {
		localVarQueryParams.Add("page_token", parameterToString(*r.pageToken, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v Failure
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v Failure
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v Failure
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v Failure
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUpdateNetworkingV1PrivateLinkAttachmentConnectionRequest struct {
	ctx                                               _context.Context
	ApiService                                        PrivateLinkAttachmentConnectionsNetworkingV1Api
	id                                                string
	networkingV1PrivateLinkAttachmentConnectionUpdate *NetworkingV1PrivateLinkAttachmentConnectionUpdate
}

func (r ApiUpdateNetworkingV1PrivateLinkAttachmentConnectionRequest) NetworkingV1PrivateLinkAttachmentConnectionUpdate(networkingV1PrivateLinkAttachmentConnectionUpdate NetworkingV1PrivateLinkAttachmentConnectionUpdate) ApiUpdateNetworkingV1PrivateLinkAttachmentConnectionRequest {
	r.networkingV1PrivateLinkAttachmentConnectionUpdate = &networkingV1PrivateLinkAttachmentConnectionUpdate
	return r
}

func (r ApiUpdateNetworkingV1PrivateLinkAttachmentConnectionRequest) Execute() (NetworkingV1PrivateLinkAttachmentConnection, *_nethttp.Response, error) {
	return r.ApiService.UpdateNetworkingV1PrivateLinkAttachmentConnectionExecute(r)
}

/*
UpdateNetworkingV1PrivateLinkAttachmentConnection Update a Private Link Attachment Connection

[![Preview](https://img.shields.io/badge/Lifecycle%20Stage-Preview-%2300afba)](#section/Versioning/API-Lifecycle-Policy)

Make a request to update a private link attachment connection.



 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id The unique identifier for the private link attachment connection.
 @return ApiUpdateNetworkingV1PrivateLinkAttachmentConnectionRequest
*/
func (a *PrivateLinkAttachmentConnectionsNetworkingV1ApiService) UpdateNetworkingV1PrivateLinkAttachmentConnection(ctx _context.Context, id string) ApiUpdateNetworkingV1PrivateLinkAttachmentConnectionRequest {
	return ApiUpdateNetworkingV1PrivateLinkAttachmentConnectionRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//  @return NetworkingV1PrivateLinkAttachmentConnection
func (a *PrivateLinkAttachmentConnectionsNetworkingV1ApiService) UpdateNetworkingV1PrivateLinkAttachmentConnectionExecute(r ApiUpdateNetworkingV1PrivateLinkAttachmentConnectionRequest) (NetworkingV1PrivateLinkAttachmentConnection, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  NetworkingV1PrivateLinkAttachmentConnection
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PrivateLinkAttachmentConnectionsNetworkingV1ApiService.UpdateNetworkingV1PrivateLinkAttachmentConnection")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/networking/v1/private-link-attachment-connections/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", _neturl.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.networkingV1PrivateLinkAttachmentConnectionUpdate
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v Failure
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v Failure
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v Failure
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v Failure
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v Failure
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v Failure
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
