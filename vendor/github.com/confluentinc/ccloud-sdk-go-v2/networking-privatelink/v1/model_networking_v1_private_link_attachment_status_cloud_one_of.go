// Copyright 2021 Confluent Inc. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*
Network API

Network API

API version: 0.0.1-alpha1
Contact: cire-traffic@confluent.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// NetworkingV1PrivateLinkAttachmentStatusCloudOneOf - struct for NetworkingV1PrivateLinkAttachmentStatusCloudOneOf
type NetworkingV1PrivateLinkAttachmentStatusCloudOneOf struct {
	NetworkingV1AwsPrivateLinkAttachmentStatus   *NetworkingV1AwsPrivateLinkAttachmentStatus
	NetworkingV1AzurePrivateLinkAttachmentStatus *NetworkingV1AzurePrivateLinkAttachmentStatus
	NetworkingV1GcpPrivateLinkAttachmentStatus   *NetworkingV1GcpPrivateLinkAttachmentStatus
}

// NetworkingV1AwsPrivateLinkAttachmentStatusAsNetworkingV1PrivateLinkAttachmentStatusCloudOneOf is a convenience function that returns NetworkingV1AwsPrivateLinkAttachmentStatus wrapped in NetworkingV1PrivateLinkAttachmentStatusCloudOneOf
func NetworkingV1AwsPrivateLinkAttachmentStatusAsNetworkingV1PrivateLinkAttachmentStatusCloudOneOf(v *NetworkingV1AwsPrivateLinkAttachmentStatus) NetworkingV1PrivateLinkAttachmentStatusCloudOneOf {
	return NetworkingV1PrivateLinkAttachmentStatusCloudOneOf{NetworkingV1AwsPrivateLinkAttachmentStatus: v}
}

// NetworkingV1AzurePrivateLinkAttachmentStatusAsNetworkingV1PrivateLinkAttachmentStatusCloudOneOf is a convenience function that returns NetworkingV1AzurePrivateLinkAttachmentStatus wrapped in NetworkingV1PrivateLinkAttachmentStatusCloudOneOf
func NetworkingV1AzurePrivateLinkAttachmentStatusAsNetworkingV1PrivateLinkAttachmentStatusCloudOneOf(v *NetworkingV1AzurePrivateLinkAttachmentStatus) NetworkingV1PrivateLinkAttachmentStatusCloudOneOf {
	return NetworkingV1PrivateLinkAttachmentStatusCloudOneOf{NetworkingV1AzurePrivateLinkAttachmentStatus: v}
}

// NetworkingV1GcpPrivateLinkAttachmentStatusAsNetworkingV1PrivateLinkAttachmentStatusCloudOneOf is a convenience function that returns NetworkingV1GcpPrivateLinkAttachmentStatus wrapped in NetworkingV1PrivateLinkAttachmentStatusCloudOneOf
func NetworkingV1GcpPrivateLinkAttachmentStatusAsNetworkingV1PrivateLinkAttachmentStatusCloudOneOf(v *NetworkingV1GcpPrivateLinkAttachmentStatus) NetworkingV1PrivateLinkAttachmentStatusCloudOneOf {
	return NetworkingV1PrivateLinkAttachmentStatusCloudOneOf{NetworkingV1GcpPrivateLinkAttachmentStatus: v}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *NetworkingV1PrivateLinkAttachmentStatusCloudOneOf) UnmarshalJSON(data []byte) error {
	var err error
	// use discriminator value to speed up the lookup
	var jsonDict map[string]interface{}
	err = json.Unmarshal(data, &jsonDict)
	if err != nil {
		return fmt.Errorf("Failed to unmarshal JSON into map for the discriminator lookup.")
	}

	// check if the discriminator value is 'AwsPrivateLinkAttachmentStatus'
	if jsonDict["kind"] == "AwsPrivateLinkAttachmentStatus" {
		// try to unmarshal JSON data into NetworkingV1AwsPrivateLinkAttachmentStatus
		err = json.Unmarshal(data, &dst.NetworkingV1AwsPrivateLinkAttachmentStatus)
		if err == nil {
			return nil // data stored in dst.NetworkingV1AwsPrivateLinkAttachmentStatus, return on the first match
		} else {
			dst.NetworkingV1AwsPrivateLinkAttachmentStatus = nil
			return fmt.Errorf("Failed to unmarshal NetworkingV1PrivateLinkAttachmentStatusCloudOneOf as NetworkingV1AwsPrivateLinkAttachmentStatus: %s", err.Error())
		}
	}

	// check if the discriminator value is 'AzurePrivateLinkAttachmentStatus'
	if jsonDict["kind"] == "AzurePrivateLinkAttachmentStatus" {
		// try to unmarshal JSON data into NetworkingV1AzurePrivateLinkAttachmentStatus
		err = json.Unmarshal(data, &dst.NetworkingV1AzurePrivateLinkAttachmentStatus)
		if err == nil {
			return nil // data stored in dst.NetworkingV1AzurePrivateLinkAttachmentStatus, return on the first match
		} else {
			dst.NetworkingV1AzurePrivateLinkAttachmentStatus = nil
			return fmt.Errorf("Failed to unmarshal NetworkingV1PrivateLinkAttachmentStatusCloudOneOf as NetworkingV1AzurePrivateLinkAttachmentStatus: %s", err.Error())
		}
	}

	// check if the discriminator value is 'GcpPrivateLinkAttachmentStatus'
	if jsonDict["kind"] == "GcpPrivateLinkAttachmentStatus" {
		// try to unmarshal JSON data into NetworkingV1GcpPrivateLinkAttachmentStatus
		err = json.Unmarshal(data, &dst.NetworkingV1GcpPrivateLinkAttachmentStatus)
		if err == nil {
			return nil // data stored in dst.NetworkingV1GcpPrivateLinkAttachmentStatus, return on the first match
		} else {
			dst.NetworkingV1GcpPrivateLinkAttachmentStatus = nil
			return fmt.Errorf("Failed to unmarshal NetworkingV1PrivateLinkAttachmentStatusCloudOneOf as NetworkingV1GcpPrivateLinkAttachmentStatus: %s", err.Error())
		}
	}

	// check if the discriminator value is 'networking.v1.AwsPrivateLinkAttachmentStatus'
	if jsonDict["kind"] == "networking.v1.AwsPrivateLinkAttachmentStatus" {
		// try to unmarshal JSON data into NetworkingV1AwsPrivateLinkAttachmentStatus
		err = json.Unmarshal(data, &dst.NetworkingV1AwsPrivateLinkAttachmentStatus)
		if err == nil {
			return nil // data stored in dst.NetworkingV1AwsPrivateLinkAttachmentStatus, return on the first match
		} else {
			dst.NetworkingV1AwsPrivateLinkAttachmentStatus = nil
			return fmt.Errorf("Failed to unmarshal NetworkingV1PrivateLinkAttachmentStatusCloudOneOf as NetworkingV1AwsPrivateLinkAttachmentStatus: %s", err.Error())
		}
	}

	// check if the discriminator value is 'networking.v1.AzurePrivateLinkAttachmentStatus'
	if jsonDict["kind"] == "networking.v1.AzurePrivateLinkAttachmentStatus" {
		// try to unmarshal JSON data into NetworkingV1AzurePrivateLinkAttachmentStatus
		err = json.Unmarshal(data, &dst.NetworkingV1AzurePrivateLinkAttachmentStatus)
		if err == nil {
			return nil // data stored in dst.NetworkingV1AzurePrivateLinkAttachmentStatus, return on the first match
		} else {
			dst.NetworkingV1AzurePrivateLinkAttachmentStatus = nil
			return fmt.Errorf("Failed to unmarshal NetworkingV1PrivateLinkAttachmentStatusCloudOneOf as NetworkingV1AzurePrivateLinkAttachmentStatus: %s", err.Error())
		}
	}

	// check if the discriminator value is 'networking.v1.GcpPrivateLinkAttachmentStatus'
	if jsonDict["kind"] == "networking.v1.GcpPrivateLinkAttachmentStatus" {
		// try to unmarshal JSON data into NetworkingV1GcpPrivateLinkAttachmentStatus
		err = json.Unmarshal(data, &dst.NetworkingV1GcpPrivateLinkAttachmentStatus)
		if err == nil {
			return nil // data stored in dst.NetworkingV1GcpPrivateLinkAttachmentStatus, return on the first match
		} else {
			dst.NetworkingV1GcpPrivateLinkAttachmentStatus = nil
			return fmt.Errorf("Failed to unmarshal NetworkingV1PrivateLinkAttachmentStatusCloudOneOf as NetworkingV1GcpPrivateLinkAttachmentStatus: %s", err.Error())
		}
	}

	return nil
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src NetworkingV1PrivateLinkAttachmentStatusCloudOneOf) MarshalJSON() ([]byte, error) {
	if src.NetworkingV1AwsPrivateLinkAttachmentStatus != nil {
		buffer := &bytes.Buffer{}
		encoder := json.NewEncoder(buffer)
		encoder.SetEscapeHTML(false)
		err := encoder.Encode(&src.NetworkingV1AwsPrivateLinkAttachmentStatus)
		return buffer.Bytes(), err
	}

	if src.NetworkingV1AzurePrivateLinkAttachmentStatus != nil {
		buffer := &bytes.Buffer{}
		encoder := json.NewEncoder(buffer)
		encoder.SetEscapeHTML(false)
		err := encoder.Encode(&src.NetworkingV1AzurePrivateLinkAttachmentStatus)
		return buffer.Bytes(), err
	}

	if src.NetworkingV1GcpPrivateLinkAttachmentStatus != nil {
		buffer := &bytes.Buffer{}
		encoder := json.NewEncoder(buffer)
		encoder.SetEscapeHTML(false)
		err := encoder.Encode(&src.NetworkingV1GcpPrivateLinkAttachmentStatus)
		return buffer.Bytes(), err
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *NetworkingV1PrivateLinkAttachmentStatusCloudOneOf) GetActualInstance() interface{} {
	if obj.NetworkingV1AwsPrivateLinkAttachmentStatus != nil {
		return obj.NetworkingV1AwsPrivateLinkAttachmentStatus
	}

	if obj.NetworkingV1AzurePrivateLinkAttachmentStatus != nil {
		return obj.NetworkingV1AzurePrivateLinkAttachmentStatus
	}

	if obj.NetworkingV1GcpPrivateLinkAttachmentStatus != nil {
		return obj.NetworkingV1GcpPrivateLinkAttachmentStatus
	}

	// all schemas are nil
	return nil
}

type NullableNetworkingV1PrivateLinkAttachmentStatusCloudOneOf struct {
	value *NetworkingV1PrivateLinkAttachmentStatusCloudOneOf
	isSet bool
}

func (v NullableNetworkingV1PrivateLinkAttachmentStatusCloudOneOf) Get() *NetworkingV1PrivateLinkAttachmentStatusCloudOneOf {
	return v.value
}

func (v *NullableNetworkingV1PrivateLinkAttachmentStatusCloudOneOf) Set(val *NetworkingV1PrivateLinkAttachmentStatusCloudOneOf) {
	v.value = val
	v.isSet = true
}

func (v NullableNetworkingV1PrivateLinkAttachmentStatusCloudOneOf) IsSet() bool {
	return v.isSet
}

func (v *NullableNetworkingV1PrivateLinkAttachmentStatusCloudOneOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNetworkingV1PrivateLinkAttachmentStatusCloudOneOf(val *NetworkingV1PrivateLinkAttachmentStatusCloudOneOf) *NullableNetworkingV1PrivateLinkAttachmentStatusCloudOneOf {
	return &NullableNetworkingV1PrivateLinkAttachmentStatusCloudOneOf{value: val, isSet: true}
}

func (v NullableNetworkingV1PrivateLinkAttachmentStatusCloudOneOf) MarshalJSON() ([]byte, error) {
	buffer := &bytes.Buffer{}
	encoder := json.NewEncoder(buffer)
	encoder.SetEscapeHTML(false)
	err := encoder.Encode(v.value)
	return buffer.Bytes(), err
}

func (v *NullableNetworkingV1PrivateLinkAttachmentStatusCloudOneOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
