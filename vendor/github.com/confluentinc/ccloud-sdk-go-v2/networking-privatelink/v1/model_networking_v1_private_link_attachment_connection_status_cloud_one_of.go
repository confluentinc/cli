// Copyright 2021 Confluent Inc. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*
Network API

Network API

API version: 0.0.1-alpha1
Contact: cire-traffic@confluent.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// NetworkingV1PrivateLinkAttachmentConnectionStatusCloudOneOf - struct for NetworkingV1PrivateLinkAttachmentConnectionStatusCloudOneOf
type NetworkingV1PrivateLinkAttachmentConnectionStatusCloudOneOf struct {
	NetworkingV1AwsPrivateLinkAttachmentConnectionStatus   *NetworkingV1AwsPrivateLinkAttachmentConnectionStatus
	NetworkingV1AzurePrivateLinkAttachmentConnectionStatus *NetworkingV1AzurePrivateLinkAttachmentConnectionStatus
	NetworkingV1GcpPrivateLinkAttachmentConnectionStatus   *NetworkingV1GcpPrivateLinkAttachmentConnectionStatus
}

// NetworkingV1AwsPrivateLinkAttachmentConnectionStatusAsNetworkingV1PrivateLinkAttachmentConnectionStatusCloudOneOf is a convenience function that returns NetworkingV1AwsPrivateLinkAttachmentConnectionStatus wrapped in NetworkingV1PrivateLinkAttachmentConnectionStatusCloudOneOf
func NetworkingV1AwsPrivateLinkAttachmentConnectionStatusAsNetworkingV1PrivateLinkAttachmentConnectionStatusCloudOneOf(v *NetworkingV1AwsPrivateLinkAttachmentConnectionStatus) NetworkingV1PrivateLinkAttachmentConnectionStatusCloudOneOf {
	return NetworkingV1PrivateLinkAttachmentConnectionStatusCloudOneOf{NetworkingV1AwsPrivateLinkAttachmentConnectionStatus: v}
}

// NetworkingV1AzurePrivateLinkAttachmentConnectionStatusAsNetworkingV1PrivateLinkAttachmentConnectionStatusCloudOneOf is a convenience function that returns NetworkingV1AzurePrivateLinkAttachmentConnectionStatus wrapped in NetworkingV1PrivateLinkAttachmentConnectionStatusCloudOneOf
func NetworkingV1AzurePrivateLinkAttachmentConnectionStatusAsNetworkingV1PrivateLinkAttachmentConnectionStatusCloudOneOf(v *NetworkingV1AzurePrivateLinkAttachmentConnectionStatus) NetworkingV1PrivateLinkAttachmentConnectionStatusCloudOneOf {
	return NetworkingV1PrivateLinkAttachmentConnectionStatusCloudOneOf{NetworkingV1AzurePrivateLinkAttachmentConnectionStatus: v}
}

// NetworkingV1GcpPrivateLinkAttachmentConnectionStatusAsNetworkingV1PrivateLinkAttachmentConnectionStatusCloudOneOf is a convenience function that returns NetworkingV1GcpPrivateLinkAttachmentConnectionStatus wrapped in NetworkingV1PrivateLinkAttachmentConnectionStatusCloudOneOf
func NetworkingV1GcpPrivateLinkAttachmentConnectionStatusAsNetworkingV1PrivateLinkAttachmentConnectionStatusCloudOneOf(v *NetworkingV1GcpPrivateLinkAttachmentConnectionStatus) NetworkingV1PrivateLinkAttachmentConnectionStatusCloudOneOf {
	return NetworkingV1PrivateLinkAttachmentConnectionStatusCloudOneOf{NetworkingV1GcpPrivateLinkAttachmentConnectionStatus: v}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *NetworkingV1PrivateLinkAttachmentConnectionStatusCloudOneOf) UnmarshalJSON(data []byte) error {
	var err error
	// use discriminator value to speed up the lookup
	var jsonDict map[string]interface{}
	err = json.Unmarshal(data, &jsonDict)
	if err != nil {
		return fmt.Errorf("Failed to unmarshal JSON into map for the discriminator lookup.")
	}

	// check if the discriminator value is 'AwsPrivateLinkAttachmentConnectionStatus'
	if jsonDict["kind"] == "AwsPrivateLinkAttachmentConnectionStatus" {
		// try to unmarshal JSON data into NetworkingV1AwsPrivateLinkAttachmentConnectionStatus
		err = json.Unmarshal(data, &dst.NetworkingV1AwsPrivateLinkAttachmentConnectionStatus)
		if err == nil {
			return nil // data stored in dst.NetworkingV1AwsPrivateLinkAttachmentConnectionStatus, return on the first match
		} else {
			dst.NetworkingV1AwsPrivateLinkAttachmentConnectionStatus = nil
			return fmt.Errorf("Failed to unmarshal NetworkingV1PrivateLinkAttachmentConnectionStatusCloudOneOf as NetworkingV1AwsPrivateLinkAttachmentConnectionStatus: %s", err.Error())
		}
	}

	// check if the discriminator value is 'AzurePrivateLinkAttachmentConnectionStatus'
	if jsonDict["kind"] == "AzurePrivateLinkAttachmentConnectionStatus" {
		// try to unmarshal JSON data into NetworkingV1AzurePrivateLinkAttachmentConnectionStatus
		err = json.Unmarshal(data, &dst.NetworkingV1AzurePrivateLinkAttachmentConnectionStatus)
		if err == nil {
			return nil // data stored in dst.NetworkingV1AzurePrivateLinkAttachmentConnectionStatus, return on the first match
		} else {
			dst.NetworkingV1AzurePrivateLinkAttachmentConnectionStatus = nil
			return fmt.Errorf("Failed to unmarshal NetworkingV1PrivateLinkAttachmentConnectionStatusCloudOneOf as NetworkingV1AzurePrivateLinkAttachmentConnectionStatus: %s", err.Error())
		}
	}

	// check if the discriminator value is 'GcpPrivateLinkAttachmentConnectionStatus'
	if jsonDict["kind"] == "GcpPrivateLinkAttachmentConnectionStatus" {
		// try to unmarshal JSON data into NetworkingV1GcpPrivateLinkAttachmentConnectionStatus
		err = json.Unmarshal(data, &dst.NetworkingV1GcpPrivateLinkAttachmentConnectionStatus)
		if err == nil {
			return nil // data stored in dst.NetworkingV1GcpPrivateLinkAttachmentConnectionStatus, return on the first match
		} else {
			dst.NetworkingV1GcpPrivateLinkAttachmentConnectionStatus = nil
			return fmt.Errorf("Failed to unmarshal NetworkingV1PrivateLinkAttachmentConnectionStatusCloudOneOf as NetworkingV1GcpPrivateLinkAttachmentConnectionStatus: %s", err.Error())
		}
	}

	// check if the discriminator value is 'networking.v1.AwsPrivateLinkAttachmentConnectionStatus'
	if jsonDict["kind"] == "networking.v1.AwsPrivateLinkAttachmentConnectionStatus" {
		// try to unmarshal JSON data into NetworkingV1AwsPrivateLinkAttachmentConnectionStatus
		err = json.Unmarshal(data, &dst.NetworkingV1AwsPrivateLinkAttachmentConnectionStatus)
		if err == nil {
			return nil // data stored in dst.NetworkingV1AwsPrivateLinkAttachmentConnectionStatus, return on the first match
		} else {
			dst.NetworkingV1AwsPrivateLinkAttachmentConnectionStatus = nil
			return fmt.Errorf("Failed to unmarshal NetworkingV1PrivateLinkAttachmentConnectionStatusCloudOneOf as NetworkingV1AwsPrivateLinkAttachmentConnectionStatus: %s", err.Error())
		}
	}

	// check if the discriminator value is 'networking.v1.AzurePrivateLinkAttachmentConnectionStatus'
	if jsonDict["kind"] == "networking.v1.AzurePrivateLinkAttachmentConnectionStatus" {
		// try to unmarshal JSON data into NetworkingV1AzurePrivateLinkAttachmentConnectionStatus
		err = json.Unmarshal(data, &dst.NetworkingV1AzurePrivateLinkAttachmentConnectionStatus)
		if err == nil {
			return nil // data stored in dst.NetworkingV1AzurePrivateLinkAttachmentConnectionStatus, return on the first match
		} else {
			dst.NetworkingV1AzurePrivateLinkAttachmentConnectionStatus = nil
			return fmt.Errorf("Failed to unmarshal NetworkingV1PrivateLinkAttachmentConnectionStatusCloudOneOf as NetworkingV1AzurePrivateLinkAttachmentConnectionStatus: %s", err.Error())
		}
	}

	// check if the discriminator value is 'networking.v1.GcpPrivateLinkAttachmentConnectionStatus'
	if jsonDict["kind"] == "networking.v1.GcpPrivateLinkAttachmentConnectionStatus" {
		// try to unmarshal JSON data into NetworkingV1GcpPrivateLinkAttachmentConnectionStatus
		err = json.Unmarshal(data, &dst.NetworkingV1GcpPrivateLinkAttachmentConnectionStatus)
		if err == nil {
			return nil // data stored in dst.NetworkingV1GcpPrivateLinkAttachmentConnectionStatus, return on the first match
		} else {
			dst.NetworkingV1GcpPrivateLinkAttachmentConnectionStatus = nil
			return fmt.Errorf("Failed to unmarshal NetworkingV1PrivateLinkAttachmentConnectionStatusCloudOneOf as NetworkingV1GcpPrivateLinkAttachmentConnectionStatus: %s", err.Error())
		}
	}

	return nil
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src NetworkingV1PrivateLinkAttachmentConnectionStatusCloudOneOf) MarshalJSON() ([]byte, error) {
	if src.NetworkingV1AwsPrivateLinkAttachmentConnectionStatus != nil {
		buffer := &bytes.Buffer{}
		encoder := json.NewEncoder(buffer)
		encoder.SetEscapeHTML(false)
		err := encoder.Encode(&src.NetworkingV1AwsPrivateLinkAttachmentConnectionStatus)
		return buffer.Bytes(), err
	}

	if src.NetworkingV1AzurePrivateLinkAttachmentConnectionStatus != nil {
		buffer := &bytes.Buffer{}
		encoder := json.NewEncoder(buffer)
		encoder.SetEscapeHTML(false)
		err := encoder.Encode(&src.NetworkingV1AzurePrivateLinkAttachmentConnectionStatus)
		return buffer.Bytes(), err
	}

	if src.NetworkingV1GcpPrivateLinkAttachmentConnectionStatus != nil {
		buffer := &bytes.Buffer{}
		encoder := json.NewEncoder(buffer)
		encoder.SetEscapeHTML(false)
		err := encoder.Encode(&src.NetworkingV1GcpPrivateLinkAttachmentConnectionStatus)
		return buffer.Bytes(), err
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *NetworkingV1PrivateLinkAttachmentConnectionStatusCloudOneOf) GetActualInstance() interface{} {
	if obj.NetworkingV1AwsPrivateLinkAttachmentConnectionStatus != nil {
		return obj.NetworkingV1AwsPrivateLinkAttachmentConnectionStatus
	}

	if obj.NetworkingV1AzurePrivateLinkAttachmentConnectionStatus != nil {
		return obj.NetworkingV1AzurePrivateLinkAttachmentConnectionStatus
	}

	if obj.NetworkingV1GcpPrivateLinkAttachmentConnectionStatus != nil {
		return obj.NetworkingV1GcpPrivateLinkAttachmentConnectionStatus
	}

	// all schemas are nil
	return nil
}

type NullableNetworkingV1PrivateLinkAttachmentConnectionStatusCloudOneOf struct {
	value *NetworkingV1PrivateLinkAttachmentConnectionStatusCloudOneOf
	isSet bool
}

func (v NullableNetworkingV1PrivateLinkAttachmentConnectionStatusCloudOneOf) Get() *NetworkingV1PrivateLinkAttachmentConnectionStatusCloudOneOf {
	return v.value
}

func (v *NullableNetworkingV1PrivateLinkAttachmentConnectionStatusCloudOneOf) Set(val *NetworkingV1PrivateLinkAttachmentConnectionStatusCloudOneOf) {
	v.value = val
	v.isSet = true
}

func (v NullableNetworkingV1PrivateLinkAttachmentConnectionStatusCloudOneOf) IsSet() bool {
	return v.isSet
}

func (v *NullableNetworkingV1PrivateLinkAttachmentConnectionStatusCloudOneOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNetworkingV1PrivateLinkAttachmentConnectionStatusCloudOneOf(val *NetworkingV1PrivateLinkAttachmentConnectionStatusCloudOneOf) *NullableNetworkingV1PrivateLinkAttachmentConnectionStatusCloudOneOf {
	return &NullableNetworkingV1PrivateLinkAttachmentConnectionStatusCloudOneOf{value: val, isSet: true}
}

func (v NullableNetworkingV1PrivateLinkAttachmentConnectionStatusCloudOneOf) MarshalJSON() ([]byte, error) {
	buffer := &bytes.Buffer{}
	encoder := json.NewEncoder(buffer)
	encoder.SetEscapeHTML(false)
	err := encoder.Encode(v.value)
	return buffer.Bytes(), err
}

func (v *NullableNetworkingV1PrivateLinkAttachmentConnectionStatusCloudOneOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
