// Copyright 2021 Confluent Inc. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*
Network API

Network API

API version: 0.0.1-alpha1
Contact: cire-traffic@confluent.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1

import (
	"bytes"
	"encoding/json"
)

import (
	"reflect"
)

// NetworkingV1NetworkLinkServiceAcceptPolicy List of environments/networks from which connections can be accepted on this network link service.
type NetworkingV1NetworkLinkServiceAcceptPolicy struct {
	// List of environments from which connections can be accepted. All networks win the list of environment will be allowed.
	Environments *[]string `json:"environments,omitempty"`
	// List of networks from which connections can be accepted.
	Networks *[]string `json:"networks,omitempty"`
}

// NewNetworkingV1NetworkLinkServiceAcceptPolicy instantiates a new NetworkingV1NetworkLinkServiceAcceptPolicy object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNetworkingV1NetworkLinkServiceAcceptPolicy() *NetworkingV1NetworkLinkServiceAcceptPolicy {
	this := NetworkingV1NetworkLinkServiceAcceptPolicy{}
	return &this
}

// NewNetworkingV1NetworkLinkServiceAcceptPolicyWithDefaults instantiates a new NetworkingV1NetworkLinkServiceAcceptPolicy object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNetworkingV1NetworkLinkServiceAcceptPolicyWithDefaults() *NetworkingV1NetworkLinkServiceAcceptPolicy {
	this := NetworkingV1NetworkLinkServiceAcceptPolicy{}
	return &this
}

// GetEnvironments returns the Environments field value if set, zero value otherwise.
func (o *NetworkingV1NetworkLinkServiceAcceptPolicy) GetEnvironments() []string {
	if o == nil || o.Environments == nil {
		var ret []string
		return ret
	}
	return *o.Environments
}

// GetEnvironmentsOk returns a tuple with the Environments field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkingV1NetworkLinkServiceAcceptPolicy) GetEnvironmentsOk() (*[]string, bool) {
	if o == nil || o.Environments == nil {
		return nil, false
	}
	return o.Environments, true
}

// HasEnvironments returns a boolean if a field has been set.
func (o *NetworkingV1NetworkLinkServiceAcceptPolicy) HasEnvironments() bool {
	if o != nil && o.Environments != nil {
		return true
	}

	return false
}

// SetEnvironments gets a reference to the given []string and assigns it to the Environments field.
func (o *NetworkingV1NetworkLinkServiceAcceptPolicy) SetEnvironments(v []string) {
	o.Environments = &v
}

// GetNetworks returns the Networks field value if set, zero value otherwise.
func (o *NetworkingV1NetworkLinkServiceAcceptPolicy) GetNetworks() []string {
	if o == nil || o.Networks == nil {
		var ret []string
		return ret
	}
	return *o.Networks
}

// GetNetworksOk returns a tuple with the Networks field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkingV1NetworkLinkServiceAcceptPolicy) GetNetworksOk() (*[]string, bool) {
	if o == nil || o.Networks == nil {
		return nil, false
	}
	return o.Networks, true
}

// HasNetworks returns a boolean if a field has been set.
func (o *NetworkingV1NetworkLinkServiceAcceptPolicy) HasNetworks() bool {
	if o != nil && o.Networks != nil {
		return true
	}

	return false
}

// SetNetworks gets a reference to the given []string and assigns it to the Networks field.
func (o *NetworkingV1NetworkLinkServiceAcceptPolicy) SetNetworks(v []string) {
	o.Networks = &v
}

// Redact resets all sensitive fields to their zero value.
func (o *NetworkingV1NetworkLinkServiceAcceptPolicy) Redact() {
	o.recurseRedact(o.Environments)
	o.recurseRedact(o.Networks)
}

func (o *NetworkingV1NetworkLinkServiceAcceptPolicy) recurseRedact(v interface{}) {
	type redactor interface {
		Redact()
	}
	if r, ok := v.(redactor); ok {
		r.Redact()
	} else {
		val := reflect.ValueOf(v)
		if val.Kind() == reflect.Ptr {
			val = val.Elem()
		}
		switch val.Kind() {
		case reflect.Slice, reflect.Array:
			for i := 0; i < val.Len(); i++ {
				// support data types declared without pointers
				o.recurseRedact(val.Index(i).Interface())
				// ... and data types that were declared without but need pointers (for Redact)
				if val.Index(i).CanAddr() {
					o.recurseRedact(val.Index(i).Addr().Interface())
				}
			}
		}
	}
}

func (o NetworkingV1NetworkLinkServiceAcceptPolicy) zeroField(v interface{}) {
	p := reflect.ValueOf(v).Elem()
	p.Set(reflect.Zero(p.Type()))
}

func (o NetworkingV1NetworkLinkServiceAcceptPolicy) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Environments != nil {
		toSerialize["environments"] = o.Environments
	}
	if o.Networks != nil {
		toSerialize["networks"] = o.Networks
	}
	buffer := &bytes.Buffer{}
	encoder := json.NewEncoder(buffer)
	encoder.SetEscapeHTML(false)
	err := encoder.Encode(toSerialize)
	return buffer.Bytes(), err
}

type NullableNetworkingV1NetworkLinkServiceAcceptPolicy struct {
	value *NetworkingV1NetworkLinkServiceAcceptPolicy
	isSet bool
}

func (v NullableNetworkingV1NetworkLinkServiceAcceptPolicy) Get() *NetworkingV1NetworkLinkServiceAcceptPolicy {
	return v.value
}

func (v *NullableNetworkingV1NetworkLinkServiceAcceptPolicy) Set(val *NetworkingV1NetworkLinkServiceAcceptPolicy) {
	v.value = val
	v.isSet = true
}

func (v NullableNetworkingV1NetworkLinkServiceAcceptPolicy) IsSet() bool {
	return v.isSet
}

func (v *NullableNetworkingV1NetworkLinkServiceAcceptPolicy) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNetworkingV1NetworkLinkServiceAcceptPolicy(val *NetworkingV1NetworkLinkServiceAcceptPolicy) *NullableNetworkingV1NetworkLinkServiceAcceptPolicy {
	return &NullableNetworkingV1NetworkLinkServiceAcceptPolicy{value: val, isSet: true}
}

func (v NullableNetworkingV1NetworkLinkServiceAcceptPolicy) MarshalJSON() ([]byte, error) {
	buffer := &bytes.Buffer{}
	encoder := json.NewEncoder(buffer)
	encoder.SetEscapeHTML(false)
	err := encoder.Encode(v.value)
	return buffer.Bytes(), err
}

func (v *NullableNetworkingV1NetworkLinkServiceAcceptPolicy) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
