// Copyright 2021 Confluent Inc. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*
Billing API

Confluent Cloud Billing API 

API version: 0.0.1-alpha0
Contact: monetization-eng@confluent.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1

import (
	"bytes"
	"encoding/json"
)

import (
	"reflect"
)

// BillingV1Resource The resource associated with this object. The resource can be one of Kafka Cluster ID (example: lkc-12345), Connector ID (example:     lcc-12345), Schema Registry Cluster ID (example: lsrc-12345), or ksqlDB Cluster ID (example: lksqlc-12345). May be null or omitted if not associated with a resource. 
type BillingV1Resource struct {
	// ID of the resource.
	Id *string `json:"id,omitempty"`
	// Display name of the resource.
	DisplayName *string `json:"display_name,omitempty"`
	// The environment associated with this resource
	Environment NullableBillingV1Environment `json:"environment,omitempty"`
}

// NewBillingV1Resource instantiates a new BillingV1Resource object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBillingV1Resource() *BillingV1Resource {
	this := BillingV1Resource{}
	return &this
}

// NewBillingV1ResourceWithDefaults instantiates a new BillingV1Resource object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBillingV1ResourceWithDefaults() *BillingV1Resource {
	this := BillingV1Resource{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *BillingV1Resource) GetId() string {
	if o == nil || o.Id == nil {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BillingV1Resource) GetIdOk() (*string, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *BillingV1Resource) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *BillingV1Resource) SetId(v string) {
	o.Id = &v
}

// GetDisplayName returns the DisplayName field value if set, zero value otherwise.
func (o *BillingV1Resource) GetDisplayName() string {
	if o == nil || o.DisplayName == nil {
		var ret string
		return ret
	}
	return *o.DisplayName
}

// GetDisplayNameOk returns a tuple with the DisplayName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BillingV1Resource) GetDisplayNameOk() (*string, bool) {
	if o == nil || o.DisplayName == nil {
		return nil, false
	}
	return o.DisplayName, true
}

// HasDisplayName returns a boolean if a field has been set.
func (o *BillingV1Resource) HasDisplayName() bool {
	if o != nil && o.DisplayName != nil {
		return true
	}

	return false
}

// SetDisplayName gets a reference to the given string and assigns it to the DisplayName field.
func (o *BillingV1Resource) SetDisplayName(v string) {
	o.DisplayName = &v
}

// GetEnvironment returns the Environment field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BillingV1Resource) GetEnvironment() BillingV1Environment {
	if o == nil || o.Environment.Get() == nil {
		var ret BillingV1Environment
		return ret
	}
	return *o.Environment.Get()
}

// GetEnvironmentOk returns a tuple with the Environment field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BillingV1Resource) GetEnvironmentOk() (*BillingV1Environment, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Environment.Get(), o.Environment.IsSet()
}

// HasEnvironment returns a boolean if a field has been set.
func (o *BillingV1Resource) HasEnvironment() bool {
	if o != nil && o.Environment.IsSet() {
		return true
	}

	return false
}

// SetEnvironment gets a reference to the given NullableBillingV1Environment and assigns it to the Environment field.
func (o *BillingV1Resource) SetEnvironment(v BillingV1Environment) {
	o.Environment.Set(&v)
}
// SetEnvironmentNil sets the value for Environment to be an explicit nil
func (o *BillingV1Resource) SetEnvironmentNil() {
	o.Environment.Set(nil)
}

// UnsetEnvironment ensures that no value is present for Environment, not even an explicit nil
func (o *BillingV1Resource) UnsetEnvironment() {
	o.Environment.Unset()
}

// Redact resets all sensitive fields to their zero value.
func (o *BillingV1Resource) Redact() {
    o.recurseRedact(o.Id)
    o.recurseRedact(o.DisplayName)
    o.recurseRedact(o.Environment)
}

func (o *BillingV1Resource) recurseRedact(v interface{}) {
    type redactor interface {
        Redact()
    }
    if r, ok := v.(redactor); ok {
        r.Redact()
    } else {
        val := reflect.ValueOf(v)
        if val.Kind() == reflect.Ptr {
            val = val.Elem()
        }
        switch val.Kind() {
        case reflect.Slice, reflect.Array:
            for i := 0; i < val.Len(); i++ {
                // support data types declared without pointers
                o.recurseRedact(val.Index(i).Interface())
                // ... and data types that were declared without but need pointers (for Redact)
                if val.Index(i).CanAddr() {
                    o.recurseRedact(val.Index(i).Addr().Interface())
                }
            }
        }
    }
}

func (o BillingV1Resource) zeroField(v interface{}) {
    p := reflect.ValueOf(v).Elem()
    p.Set(reflect.Zero(p.Type()))
}

func (o BillingV1Resource) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.DisplayName != nil {
		toSerialize["display_name"] = o.DisplayName
	}
	if o.Environment.IsSet() {
		toSerialize["environment"] = o.Environment.Get()
	}
	buffer := &bytes.Buffer{}
	encoder := json.NewEncoder(buffer)
	encoder.SetEscapeHTML(false)
	err := encoder.Encode(toSerialize)
	return buffer.Bytes(), err
}

type NullableBillingV1Resource struct {
	value *BillingV1Resource
	isSet bool
}

func (v NullableBillingV1Resource) Get() *BillingV1Resource {
	return v.value
}

func (v *NullableBillingV1Resource) Set(val *BillingV1Resource) {
	v.value = val
	v.isSet = true
}

func (v NullableBillingV1Resource) IsSet() bool {
	return v.isSet
}

func (v *NullableBillingV1Resource) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBillingV1Resource(val *BillingV1Resource) *NullableBillingV1Resource {
	return &NullableBillingV1Resource{value: val, isSet: true}
}

func (v NullableBillingV1Resource) MarshalJSON() ([]byte, error) {
	buffer := &bytes.Buffer{}
	encoder := json.NewEncoder(buffer)
	encoder.SetEscapeHTML(false)
	err := encoder.Encode(v.value)
	return buffer.Bytes(), err
}

func (v *NullableBillingV1Resource) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


