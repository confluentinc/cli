// Copyright 2021 Confluent Inc. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*
Billing API

Confluent Cloud Billing API 

API version: 0.0.1-alpha0
Contact: monetization-eng@confluent.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1

import (
	"bytes"
	"encoding/json"
)

import (
	"reflect"
)

// BillingV1Cost `Cost` objects represent the aggregated billing costs for an organization   ## The Costs Model <SchemaDefinition schemaRef=\"#/components/schemas/billing.v1.Cost\" />
type BillingV1Cost struct {
	// APIVersion defines the schema version of this representation of a resource.
	ApiVersion *string `json:"api_version,omitempty"`
	// Kind defines the object this REST resource represents.
	Kind *string `json:"kind,omitempty"`
	// ID is the \"natural identifier\" for an object within its scope/namespace; it is normally unique across time but not space. That is, you can assume that the ID will not be reclaimed and reused after an object is deleted (\"time\"); however, it may collide with IDs for other object `kinds` or objects of the same `kind` within a different scope/namespace (\"space\").
	Id *string `json:"id,omitempty"`
	// Start date of time period (inclusive) to retrieve billing costs. It is represented in RFC3339 format and is in UTC.
	StartDate *string `json:"start_date,omitempty"`
	// End date of time period (exclusive) to retrieve billing costs. It is represented in RFC3339 format and is in UTC.
	EndDate *string `json:"end_date,omitempty"`
	// Granularity at which each line item is aggregated.
	Granularity *string `json:"granularity,omitempty"`
	// Network access type for the cluster.
	NetworkAccessType *string `json:"network_access_type,omitempty"`
	// Product name.
	Product *string `json:"product,omitempty"`
	// Type of the line item.
	LineType *string `json:"line_type,omitempty"`
	// Price for the line item in dollars.
	Price *float64 `json:"price,omitempty"`
	// Unit of the line item.
	Unit *string `json:"unit,omitempty"`
	// Quantity of the line item.
	Quantity *float64 `json:"quantity,omitempty"`
	// Original amount accrued for this line item.
	OriginalAmount *float64 `json:"original_amount,omitempty"`
	// Amount discounted from the original amount in dollars.
	DiscountAmount *float64 `json:"discount_amount,omitempty"`
	// Final amount after deducting discounts.
	Amount *float64 `json:"amount,omitempty"`
	// The resource for a given object
	Resource *BillingV1Resource `json:"resource,omitempty"`
}

// NewBillingV1Cost instantiates a new BillingV1Cost object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBillingV1Cost() *BillingV1Cost {
	this := BillingV1Cost{}
	var granularity string = "DAILY"
	this.Granularity = &granularity
	return &this
}

// NewBillingV1CostWithDefaults instantiates a new BillingV1Cost object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBillingV1CostWithDefaults() *BillingV1Cost {
	this := BillingV1Cost{}
	var granularity string = "DAILY"
	this.Granularity = &granularity
	return &this
}

// GetApiVersion returns the ApiVersion field value if set, zero value otherwise.
func (o *BillingV1Cost) GetApiVersion() string {
	if o == nil || o.ApiVersion == nil {
		var ret string
		return ret
	}
	return *o.ApiVersion
}

// GetApiVersionOk returns a tuple with the ApiVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BillingV1Cost) GetApiVersionOk() (*string, bool) {
	if o == nil || o.ApiVersion == nil {
		return nil, false
	}
	return o.ApiVersion, true
}

// HasApiVersion returns a boolean if a field has been set.
func (o *BillingV1Cost) HasApiVersion() bool {
	if o != nil && o.ApiVersion != nil {
		return true
	}

	return false
}

// SetApiVersion gets a reference to the given string and assigns it to the ApiVersion field.
func (o *BillingV1Cost) SetApiVersion(v string) {
	o.ApiVersion = &v
}

// GetKind returns the Kind field value if set, zero value otherwise.
func (o *BillingV1Cost) GetKind() string {
	if o == nil || o.Kind == nil {
		var ret string
		return ret
	}
	return *o.Kind
}

// GetKindOk returns a tuple with the Kind field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BillingV1Cost) GetKindOk() (*string, bool) {
	if o == nil || o.Kind == nil {
		return nil, false
	}
	return o.Kind, true
}

// HasKind returns a boolean if a field has been set.
func (o *BillingV1Cost) HasKind() bool {
	if o != nil && o.Kind != nil {
		return true
	}

	return false
}

// SetKind gets a reference to the given string and assigns it to the Kind field.
func (o *BillingV1Cost) SetKind(v string) {
	o.Kind = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *BillingV1Cost) GetId() string {
	if o == nil || o.Id == nil {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BillingV1Cost) GetIdOk() (*string, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *BillingV1Cost) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *BillingV1Cost) SetId(v string) {
	o.Id = &v
}

// GetStartDate returns the StartDate field value if set, zero value otherwise.
func (o *BillingV1Cost) GetStartDate() string {
	if o == nil || o.StartDate == nil {
		var ret string
		return ret
	}
	return *o.StartDate
}

// GetStartDateOk returns a tuple with the StartDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BillingV1Cost) GetStartDateOk() (*string, bool) {
	if o == nil || o.StartDate == nil {
		return nil, false
	}
	return o.StartDate, true
}

// HasStartDate returns a boolean if a field has been set.
func (o *BillingV1Cost) HasStartDate() bool {
	if o != nil && o.StartDate != nil {
		return true
	}

	return false
}

// SetStartDate gets a reference to the given string and assigns it to the StartDate field.
func (o *BillingV1Cost) SetStartDate(v string) {
	o.StartDate = &v
}

// GetEndDate returns the EndDate field value if set, zero value otherwise.
func (o *BillingV1Cost) GetEndDate() string {
	if o == nil || o.EndDate == nil {
		var ret string
		return ret
	}
	return *o.EndDate
}

// GetEndDateOk returns a tuple with the EndDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BillingV1Cost) GetEndDateOk() (*string, bool) {
	if o == nil || o.EndDate == nil {
		return nil, false
	}
	return o.EndDate, true
}

// HasEndDate returns a boolean if a field has been set.
func (o *BillingV1Cost) HasEndDate() bool {
	if o != nil && o.EndDate != nil {
		return true
	}

	return false
}

// SetEndDate gets a reference to the given string and assigns it to the EndDate field.
func (o *BillingV1Cost) SetEndDate(v string) {
	o.EndDate = &v
}

// GetGranularity returns the Granularity field value if set, zero value otherwise.
func (o *BillingV1Cost) GetGranularity() string {
	if o == nil || o.Granularity == nil {
		var ret string
		return ret
	}
	return *o.Granularity
}

// GetGranularityOk returns a tuple with the Granularity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BillingV1Cost) GetGranularityOk() (*string, bool) {
	if o == nil || o.Granularity == nil {
		return nil, false
	}
	return o.Granularity, true
}

// HasGranularity returns a boolean if a field has been set.
func (o *BillingV1Cost) HasGranularity() bool {
	if o != nil && o.Granularity != nil {
		return true
	}

	return false
}

// SetGranularity gets a reference to the given string and assigns it to the Granularity field.
func (o *BillingV1Cost) SetGranularity(v string) {
	o.Granularity = &v
}

// GetNetworkAccessType returns the NetworkAccessType field value if set, zero value otherwise.
func (o *BillingV1Cost) GetNetworkAccessType() string {
	if o == nil || o.NetworkAccessType == nil {
		var ret string
		return ret
	}
	return *o.NetworkAccessType
}

// GetNetworkAccessTypeOk returns a tuple with the NetworkAccessType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BillingV1Cost) GetNetworkAccessTypeOk() (*string, bool) {
	if o == nil || o.NetworkAccessType == nil {
		return nil, false
	}
	return o.NetworkAccessType, true
}

// HasNetworkAccessType returns a boolean if a field has been set.
func (o *BillingV1Cost) HasNetworkAccessType() bool {
	if o != nil && o.NetworkAccessType != nil {
		return true
	}

	return false
}

// SetNetworkAccessType gets a reference to the given string and assigns it to the NetworkAccessType field.
func (o *BillingV1Cost) SetNetworkAccessType(v string) {
	o.NetworkAccessType = &v
}

// GetProduct returns the Product field value if set, zero value otherwise.
func (o *BillingV1Cost) GetProduct() string {
	if o == nil || o.Product == nil {
		var ret string
		return ret
	}
	return *o.Product
}

// GetProductOk returns a tuple with the Product field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BillingV1Cost) GetProductOk() (*string, bool) {
	if o == nil || o.Product == nil {
		return nil, false
	}
	return o.Product, true
}

// HasProduct returns a boolean if a field has been set.
func (o *BillingV1Cost) HasProduct() bool {
	if o != nil && o.Product != nil {
		return true
	}

	return false
}

// SetProduct gets a reference to the given string and assigns it to the Product field.
func (o *BillingV1Cost) SetProduct(v string) {
	o.Product = &v
}

// GetLineType returns the LineType field value if set, zero value otherwise.
func (o *BillingV1Cost) GetLineType() string {
	if o == nil || o.LineType == nil {
		var ret string
		return ret
	}
	return *o.LineType
}

// GetLineTypeOk returns a tuple with the LineType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BillingV1Cost) GetLineTypeOk() (*string, bool) {
	if o == nil || o.LineType == nil {
		return nil, false
	}
	return o.LineType, true
}

// HasLineType returns a boolean if a field has been set.
func (o *BillingV1Cost) HasLineType() bool {
	if o != nil && o.LineType != nil {
		return true
	}

	return false
}

// SetLineType gets a reference to the given string and assigns it to the LineType field.
func (o *BillingV1Cost) SetLineType(v string) {
	o.LineType = &v
}

// GetPrice returns the Price field value if set, zero value otherwise.
func (o *BillingV1Cost) GetPrice() float64 {
	if o == nil || o.Price == nil {
		var ret float64
		return ret
	}
	return *o.Price
}

// GetPriceOk returns a tuple with the Price field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BillingV1Cost) GetPriceOk() (*float64, bool) {
	if o == nil || o.Price == nil {
		return nil, false
	}
	return o.Price, true
}

// HasPrice returns a boolean if a field has been set.
func (o *BillingV1Cost) HasPrice() bool {
	if o != nil && o.Price != nil {
		return true
	}

	return false
}

// SetPrice gets a reference to the given float64 and assigns it to the Price field.
func (o *BillingV1Cost) SetPrice(v float64) {
	o.Price = &v
}

// GetUnit returns the Unit field value if set, zero value otherwise.
func (o *BillingV1Cost) GetUnit() string {
	if o == nil || o.Unit == nil {
		var ret string
		return ret
	}
	return *o.Unit
}

// GetUnitOk returns a tuple with the Unit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BillingV1Cost) GetUnitOk() (*string, bool) {
	if o == nil || o.Unit == nil {
		return nil, false
	}
	return o.Unit, true
}

// HasUnit returns a boolean if a field has been set.
func (o *BillingV1Cost) HasUnit() bool {
	if o != nil && o.Unit != nil {
		return true
	}

	return false
}

// SetUnit gets a reference to the given string and assigns it to the Unit field.
func (o *BillingV1Cost) SetUnit(v string) {
	o.Unit = &v
}

// GetQuantity returns the Quantity field value if set, zero value otherwise.
func (o *BillingV1Cost) GetQuantity() float64 {
	if o == nil || o.Quantity == nil {
		var ret float64
		return ret
	}
	return *o.Quantity
}

// GetQuantityOk returns a tuple with the Quantity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BillingV1Cost) GetQuantityOk() (*float64, bool) {
	if o == nil || o.Quantity == nil {
		return nil, false
	}
	return o.Quantity, true
}

// HasQuantity returns a boolean if a field has been set.
func (o *BillingV1Cost) HasQuantity() bool {
	if o != nil && o.Quantity != nil {
		return true
	}

	return false
}

// SetQuantity gets a reference to the given float64 and assigns it to the Quantity field.
func (o *BillingV1Cost) SetQuantity(v float64) {
	o.Quantity = &v
}

// GetOriginalAmount returns the OriginalAmount field value if set, zero value otherwise.
func (o *BillingV1Cost) GetOriginalAmount() float64 {
	if o == nil || o.OriginalAmount == nil {
		var ret float64
		return ret
	}
	return *o.OriginalAmount
}

// GetOriginalAmountOk returns a tuple with the OriginalAmount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BillingV1Cost) GetOriginalAmountOk() (*float64, bool) {
	if o == nil || o.OriginalAmount == nil {
		return nil, false
	}
	return o.OriginalAmount, true
}

// HasOriginalAmount returns a boolean if a field has been set.
func (o *BillingV1Cost) HasOriginalAmount() bool {
	if o != nil && o.OriginalAmount != nil {
		return true
	}

	return false
}

// SetOriginalAmount gets a reference to the given float64 and assigns it to the OriginalAmount field.
func (o *BillingV1Cost) SetOriginalAmount(v float64) {
	o.OriginalAmount = &v
}

// GetDiscountAmount returns the DiscountAmount field value if set, zero value otherwise.
func (o *BillingV1Cost) GetDiscountAmount() float64 {
	if o == nil || o.DiscountAmount == nil {
		var ret float64
		return ret
	}
	return *o.DiscountAmount
}

// GetDiscountAmountOk returns a tuple with the DiscountAmount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BillingV1Cost) GetDiscountAmountOk() (*float64, bool) {
	if o == nil || o.DiscountAmount == nil {
		return nil, false
	}
	return o.DiscountAmount, true
}

// HasDiscountAmount returns a boolean if a field has been set.
func (o *BillingV1Cost) HasDiscountAmount() bool {
	if o != nil && o.DiscountAmount != nil {
		return true
	}

	return false
}

// SetDiscountAmount gets a reference to the given float64 and assigns it to the DiscountAmount field.
func (o *BillingV1Cost) SetDiscountAmount(v float64) {
	o.DiscountAmount = &v
}

// GetAmount returns the Amount field value if set, zero value otherwise.
func (o *BillingV1Cost) GetAmount() float64 {
	if o == nil || o.Amount == nil {
		var ret float64
		return ret
	}
	return *o.Amount
}

// GetAmountOk returns a tuple with the Amount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BillingV1Cost) GetAmountOk() (*float64, bool) {
	if o == nil || o.Amount == nil {
		return nil, false
	}
	return o.Amount, true
}

// HasAmount returns a boolean if a field has been set.
func (o *BillingV1Cost) HasAmount() bool {
	if o != nil && o.Amount != nil {
		return true
	}

	return false
}

// SetAmount gets a reference to the given float64 and assigns it to the Amount field.
func (o *BillingV1Cost) SetAmount(v float64) {
	o.Amount = &v
}

// GetResource returns the Resource field value if set, zero value otherwise.
func (o *BillingV1Cost) GetResource() BillingV1Resource {
	if o == nil || o.Resource == nil {
		var ret BillingV1Resource
		return ret
	}
	return *o.Resource
}

// GetResourceOk returns a tuple with the Resource field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BillingV1Cost) GetResourceOk() (*BillingV1Resource, bool) {
	if o == nil || o.Resource == nil {
		return nil, false
	}
	return o.Resource, true
}

// HasResource returns a boolean if a field has been set.
func (o *BillingV1Cost) HasResource() bool {
	if o != nil && o.Resource != nil {
		return true
	}

	return false
}

// SetResource gets a reference to the given BillingV1Resource and assigns it to the Resource field.
func (o *BillingV1Cost) SetResource(v BillingV1Resource) {
	o.Resource = &v
}

// Redact resets all sensitive fields to their zero value.
func (o *BillingV1Cost) Redact() {
    o.recurseRedact(o.ApiVersion)
    o.recurseRedact(o.Kind)
    o.recurseRedact(o.Id)
    o.recurseRedact(o.StartDate)
    o.recurseRedact(o.EndDate)
    o.recurseRedact(o.Granularity)
    o.recurseRedact(o.NetworkAccessType)
    o.recurseRedact(o.Product)
    o.recurseRedact(o.LineType)
    o.recurseRedact(o.Price)
    o.recurseRedact(o.Unit)
    o.recurseRedact(o.Quantity)
    o.recurseRedact(o.OriginalAmount)
    o.recurseRedact(o.DiscountAmount)
    o.recurseRedact(o.Amount)
    o.recurseRedact(o.Resource)
}

func (o *BillingV1Cost) recurseRedact(v interface{}) {
    type redactor interface {
        Redact()
    }
    if r, ok := v.(redactor); ok {
        r.Redact()
    } else {
        val := reflect.ValueOf(v)
        if val.Kind() == reflect.Ptr {
            val = val.Elem()
        }
        switch val.Kind() {
        case reflect.Slice, reflect.Array:
            for i := 0; i < val.Len(); i++ {
                // support data types declared without pointers
                o.recurseRedact(val.Index(i).Interface())
                // ... and data types that were declared without but need pointers (for Redact)
                if val.Index(i).CanAddr() {
                    o.recurseRedact(val.Index(i).Addr().Interface())
                }
            }
        }
    }
}

func (o BillingV1Cost) zeroField(v interface{}) {
    p := reflect.ValueOf(v).Elem()
    p.Set(reflect.Zero(p.Type()))
}

func (o BillingV1Cost) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.ApiVersion != nil {
		toSerialize["api_version"] = o.ApiVersion
	}
	if o.Kind != nil {
		toSerialize["kind"] = o.Kind
	}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.StartDate != nil {
		toSerialize["start_date"] = o.StartDate
	}
	if o.EndDate != nil {
		toSerialize["end_date"] = o.EndDate
	}
	if o.Granularity != nil {
		toSerialize["granularity"] = o.Granularity
	}
	if o.NetworkAccessType != nil {
		toSerialize["network_access_type"] = o.NetworkAccessType
	}
	if o.Product != nil {
		toSerialize["product"] = o.Product
	}
	if o.LineType != nil {
		toSerialize["line_type"] = o.LineType
	}
	if o.Price != nil {
		toSerialize["price"] = o.Price
	}
	if o.Unit != nil {
		toSerialize["unit"] = o.Unit
	}
	if o.Quantity != nil {
		toSerialize["quantity"] = o.Quantity
	}
	if o.OriginalAmount != nil {
		toSerialize["original_amount"] = o.OriginalAmount
	}
	if o.DiscountAmount != nil {
		toSerialize["discount_amount"] = o.DiscountAmount
	}
	if o.Amount != nil {
		toSerialize["amount"] = o.Amount
	}
	if o.Resource != nil {
		toSerialize["resource"] = o.Resource
	}
	buffer := &bytes.Buffer{}
	encoder := json.NewEncoder(buffer)
	encoder.SetEscapeHTML(false)
	err := encoder.Encode(toSerialize)
	return buffer.Bytes(), err
}

type NullableBillingV1Cost struct {
	value *BillingV1Cost
	isSet bool
}

func (v NullableBillingV1Cost) Get() *BillingV1Cost {
	return v.value
}

func (v *NullableBillingV1Cost) Set(val *BillingV1Cost) {
	v.value = val
	v.isSet = true
}

func (v NullableBillingV1Cost) IsSet() bool {
	return v.isSet
}

func (v *NullableBillingV1Cost) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBillingV1Cost(val *BillingV1Cost) *NullableBillingV1Cost {
	return &NullableBillingV1Cost{value: val, isSet: true}
}

func (v NullableBillingV1Cost) MarshalJSON() ([]byte, error) {
	buffer := &bytes.Buffer{}
	encoder := json.NewEncoder(buffer)
	encoder.SetEscapeHTML(false)
	err := encoder.Encode(v.value)
	return buffer.Bytes(), err
}

func (v *NullableBillingV1Cost) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


