// Copyright 2021 Confluent Inc. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*
SQL API v1beta1

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.0.1
Contact: flink-control-plane@confluent.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1beta1

import (
	"bytes"
	"encoding/json"
)

import (
	"reflect"
)

// SqlV1beta1StatementSpec The specs of the Statement
type SqlV1beta1StatementSpec struct {
	// The raw SQL text statement.
	Statement *string `json:"statement,omitempty"`
	// A map (key-value pairs) of statement properties.
	Properties *map[string]string `json:"properties,omitempty"`
	// The id associated with the compute pool in context.
	ComputePoolId *string `json:"compute_pool_id,omitempty"`
	// The id of a principal this statement runs as.
	Principal *string `json:"principal,omitempty"`
	// Indicates whether the statement should be stopped.
	Stopped *bool `json:"stopped,omitempty"`
}

// NewSqlV1beta1StatementSpec instantiates a new SqlV1beta1StatementSpec object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSqlV1beta1StatementSpec() *SqlV1beta1StatementSpec {
	this := SqlV1beta1StatementSpec{}
	return &this
}

// NewSqlV1beta1StatementSpecWithDefaults instantiates a new SqlV1beta1StatementSpec object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSqlV1beta1StatementSpecWithDefaults() *SqlV1beta1StatementSpec {
	this := SqlV1beta1StatementSpec{}
	return &this
}

// GetStatement returns the Statement field value if set, zero value otherwise.
func (o *SqlV1beta1StatementSpec) GetStatement() string {
	if o == nil || o.Statement == nil {
		var ret string
		return ret
	}
	return *o.Statement
}

// GetStatementOk returns a tuple with the Statement field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SqlV1beta1StatementSpec) GetStatementOk() (*string, bool) {
	if o == nil || o.Statement == nil {
		return nil, false
	}
	return o.Statement, true
}

// HasStatement returns a boolean if a field has been set.
func (o *SqlV1beta1StatementSpec) HasStatement() bool {
	if o != nil && o.Statement != nil {
		return true
	}

	return false
}

// SetStatement gets a reference to the given string and assigns it to the Statement field.
func (o *SqlV1beta1StatementSpec) SetStatement(v string) {
	o.Statement = &v
}

// GetProperties returns the Properties field value if set, zero value otherwise.
func (o *SqlV1beta1StatementSpec) GetProperties() map[string]string {
	if o == nil || o.Properties == nil {
		var ret map[string]string
		return ret
	}
	return *o.Properties
}

// GetPropertiesOk returns a tuple with the Properties field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SqlV1beta1StatementSpec) GetPropertiesOk() (*map[string]string, bool) {
	if o == nil || o.Properties == nil {
		return nil, false
	}
	return o.Properties, true
}

// HasProperties returns a boolean if a field has been set.
func (o *SqlV1beta1StatementSpec) HasProperties() bool {
	if o != nil && o.Properties != nil {
		return true
	}

	return false
}

// SetProperties gets a reference to the given map[string]string and assigns it to the Properties field.
func (o *SqlV1beta1StatementSpec) SetProperties(v map[string]string) {
	o.Properties = &v
}

// GetComputePoolId returns the ComputePoolId field value if set, zero value otherwise.
func (o *SqlV1beta1StatementSpec) GetComputePoolId() string {
	if o == nil || o.ComputePoolId == nil {
		var ret string
		return ret
	}
	return *o.ComputePoolId
}

// GetComputePoolIdOk returns a tuple with the ComputePoolId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SqlV1beta1StatementSpec) GetComputePoolIdOk() (*string, bool) {
	if o == nil || o.ComputePoolId == nil {
		return nil, false
	}
	return o.ComputePoolId, true
}

// HasComputePoolId returns a boolean if a field has been set.
func (o *SqlV1beta1StatementSpec) HasComputePoolId() bool {
	if o != nil && o.ComputePoolId != nil {
		return true
	}

	return false
}

// SetComputePoolId gets a reference to the given string and assigns it to the ComputePoolId field.
func (o *SqlV1beta1StatementSpec) SetComputePoolId(v string) {
	o.ComputePoolId = &v
}

// GetPrincipal returns the Principal field value if set, zero value otherwise.
func (o *SqlV1beta1StatementSpec) GetPrincipal() string {
	if o == nil || o.Principal == nil {
		var ret string
		return ret
	}
	return *o.Principal
}

// GetPrincipalOk returns a tuple with the Principal field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SqlV1beta1StatementSpec) GetPrincipalOk() (*string, bool) {
	if o == nil || o.Principal == nil {
		return nil, false
	}
	return o.Principal, true
}

// HasPrincipal returns a boolean if a field has been set.
func (o *SqlV1beta1StatementSpec) HasPrincipal() bool {
	if o != nil && o.Principal != nil {
		return true
	}

	return false
}

// SetPrincipal gets a reference to the given string and assigns it to the Principal field.
func (o *SqlV1beta1StatementSpec) SetPrincipal(v string) {
	o.Principal = &v
}

// GetStopped returns the Stopped field value if set, zero value otherwise.
func (o *SqlV1beta1StatementSpec) GetStopped() bool {
	if o == nil || o.Stopped == nil {
		var ret bool
		return ret
	}
	return *o.Stopped
}

// GetStoppedOk returns a tuple with the Stopped field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SqlV1beta1StatementSpec) GetStoppedOk() (*bool, bool) {
	if o == nil || o.Stopped == nil {
		return nil, false
	}
	return o.Stopped, true
}

// HasStopped returns a boolean if a field has been set.
func (o *SqlV1beta1StatementSpec) HasStopped() bool {
	if o != nil && o.Stopped != nil {
		return true
	}

	return false
}

// SetStopped gets a reference to the given bool and assigns it to the Stopped field.
func (o *SqlV1beta1StatementSpec) SetStopped(v bool) {
	o.Stopped = &v
}

// Redact resets all sensitive fields to their zero value.
func (o *SqlV1beta1StatementSpec) Redact() {
	o.recurseRedact(o.Statement)
	o.recurseRedact(o.Properties)
	o.recurseRedact(o.ComputePoolId)
	o.recurseRedact(o.Principal)
	o.recurseRedact(o.Stopped)
}

func (o *SqlV1beta1StatementSpec) recurseRedact(v interface{}) {
	type redactor interface {
		Redact()
	}
	if r, ok := v.(redactor); ok {
		r.Redact()
	} else {
		val := reflect.ValueOf(v)
		if val.Kind() == reflect.Ptr {
			val = val.Elem()
		}
		switch val.Kind() {
		case reflect.Slice, reflect.Array:
			for i := 0; i < val.Len(); i++ {
				// support data types declared without pointers
				o.recurseRedact(val.Index(i).Interface())
				// ... and data types that were declared without but need pointers (for Redact)
				if val.Index(i).CanAddr() {
					o.recurseRedact(val.Index(i).Addr().Interface())
				}
			}
		}
	}
}

func (o SqlV1beta1StatementSpec) zeroField(v interface{}) {
	p := reflect.ValueOf(v).Elem()
	p.Set(reflect.Zero(p.Type()))
}

func (o SqlV1beta1StatementSpec) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Statement != nil {
		toSerialize["statement"] = o.Statement
	}
	if o.Properties != nil {
		toSerialize["properties"] = o.Properties
	}
	if o.ComputePoolId != nil {
		toSerialize["compute_pool_id"] = o.ComputePoolId
	}
	if o.Principal != nil {
		toSerialize["principal"] = o.Principal
	}
	if o.Stopped != nil {
		toSerialize["stopped"] = o.Stopped
	}
	buffer := &bytes.Buffer{}
	encoder := json.NewEncoder(buffer)
	encoder.SetEscapeHTML(false)
	err := encoder.Encode(toSerialize)
	return buffer.Bytes(), err
}

type NullableSqlV1beta1StatementSpec struct {
	value *SqlV1beta1StatementSpec
	isSet bool
}

func (v NullableSqlV1beta1StatementSpec) Get() *SqlV1beta1StatementSpec {
	return v.value
}

func (v *NullableSqlV1beta1StatementSpec) Set(val *SqlV1beta1StatementSpec) {
	v.value = val
	v.isSet = true
}

func (v NullableSqlV1beta1StatementSpec) IsSet() bool {
	return v.isSet
}

func (v *NullableSqlV1beta1StatementSpec) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSqlV1beta1StatementSpec(val *SqlV1beta1StatementSpec) *NullableSqlV1beta1StatementSpec {
	return &NullableSqlV1beta1StatementSpec{value: val, isSet: true}
}

func (v NullableSqlV1beta1StatementSpec) MarshalJSON() ([]byte, error) {
	buffer := &bytes.Buffer{}
	encoder := json.NewEncoder(buffer)
	encoder.SetEscapeHTML(false)
	err := encoder.Encode(v.value)
	return buffer.Bytes(), err
}

func (v *NullableSqlV1beta1StatementSpec) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
