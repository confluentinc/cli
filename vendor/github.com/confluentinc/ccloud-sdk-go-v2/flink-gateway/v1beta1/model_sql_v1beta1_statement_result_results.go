// Copyright 2021 Confluent Inc. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*
SQL API v1beta1

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.0.1
Contact: flink-control-plane@confluent.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1beta1

import (
	"bytes"
	"encoding/json"
)

import (
	"reflect"
)

// SqlV1beta1StatementResultResults A results property that contains a data property that contains an array of results.
type SqlV1beta1StatementResultResults struct {
	// A data property that contains an array of results. Each entry in the array is a separate result.  The value of `op` attribute (if present) represents the kind of change that a row can describe in a changelog:  `0`: represents `INSERT` (`+I`), i.e. insertion operation;  `1`: represents `UPDATE_BEFORE` (`-U`), i.e. update operation with the previous content of the updated row. This kind should occur together with `UPDATE_AFTER` for modelling an update that needs to retract the previous row first. It is useful in cases of a non-idempotent update, i.e., an update of a row that is not  uniquely identifiable by a key;  `2`: represents `UPDATE_AFTER` (`+U`), i.e. update operation with new content of the updated row; This kind CAN occur together with `UPDATE_BEFORE` for modelling an update that needs to retract the previous row first or it describes an idempotent update, i.e., an update of a row that is uniquely identifiable by a key;  `3`: represents `DELETE` (`-D`), i.e. deletion operation;  Defaults to `0`.
	Data *[]interface{} `json:"data,omitempty"`
}

// NewSqlV1beta1StatementResultResults instantiates a new SqlV1beta1StatementResultResults object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSqlV1beta1StatementResultResults() *SqlV1beta1StatementResultResults {
	this := SqlV1beta1StatementResultResults{}
	return &this
}

// NewSqlV1beta1StatementResultResultsWithDefaults instantiates a new SqlV1beta1StatementResultResults object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSqlV1beta1StatementResultResultsWithDefaults() *SqlV1beta1StatementResultResults {
	this := SqlV1beta1StatementResultResults{}
	return &this
}

// GetData returns the Data field value if set, zero value otherwise.
func (o *SqlV1beta1StatementResultResults) GetData() []interface{} {
	if o == nil || o.Data == nil {
		var ret []interface{}
		return ret
	}
	return *o.Data
}

// GetDataOk returns a tuple with the Data field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SqlV1beta1StatementResultResults) GetDataOk() (*[]interface{}, bool) {
	if o == nil || o.Data == nil {
		return nil, false
	}
	return o.Data, true
}

// HasData returns a boolean if a field has been set.
func (o *SqlV1beta1StatementResultResults) HasData() bool {
	if o != nil && o.Data != nil {
		return true
	}

	return false
}

// SetData gets a reference to the given []interface{} and assigns it to the Data field.
func (o *SqlV1beta1StatementResultResults) SetData(v []interface{}) {
	o.Data = &v
}

// Redact resets all sensitive fields to their zero value.
func (o *SqlV1beta1StatementResultResults) Redact() {
	o.recurseRedact(o.Data)
}

func (o *SqlV1beta1StatementResultResults) recurseRedact(v interface{}) {
	type redactor interface {
		Redact()
	}
	if r, ok := v.(redactor); ok {
		r.Redact()
	} else {
		val := reflect.ValueOf(v)
		if val.Kind() == reflect.Ptr {
			val = val.Elem()
		}
		switch val.Kind() {
		case reflect.Slice, reflect.Array:
			for i := 0; i < val.Len(); i++ {
				// support data types declared without pointers
				o.recurseRedact(val.Index(i).Interface())
				// ... and data types that were declared without but need pointers (for Redact)
				if val.Index(i).CanAddr() {
					o.recurseRedact(val.Index(i).Addr().Interface())
				}
			}
		}
	}
}

func (o SqlV1beta1StatementResultResults) zeroField(v interface{}) {
	p := reflect.ValueOf(v).Elem()
	p.Set(reflect.Zero(p.Type()))
}

func (o SqlV1beta1StatementResultResults) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Data != nil {
		toSerialize["data"] = o.Data
	}
	buffer := &bytes.Buffer{}
	encoder := json.NewEncoder(buffer)
	encoder.SetEscapeHTML(false)
	err := encoder.Encode(toSerialize)
	return buffer.Bytes(), err
}

type NullableSqlV1beta1StatementResultResults struct {
	value *SqlV1beta1StatementResultResults
	isSet bool
}

func (v NullableSqlV1beta1StatementResultResults) Get() *SqlV1beta1StatementResultResults {
	return v.value
}

func (v *NullableSqlV1beta1StatementResultResults) Set(val *SqlV1beta1StatementResultResults) {
	v.value = val
	v.isSet = true
}

func (v NullableSqlV1beta1StatementResultResults) IsSet() bool {
	return v.isSet
}

func (v *NullableSqlV1beta1StatementResultResults) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSqlV1beta1StatementResultResults(val *SqlV1beta1StatementResultResults) *NullableSqlV1beta1StatementResultResults {
	return &NullableSqlV1beta1StatementResultResults{value: val, isSet: true}
}

func (v NullableSqlV1beta1StatementResultResults) MarshalJSON() ([]byte, error) {
	buffer := &bytes.Buffer{}
	encoder := json.NewEncoder(buffer)
	encoder.SetEscapeHTML(false)
	err := encoder.Encode(v.value)
	return buffer.Bytes(), err
}

func (v *NullableSqlV1beta1StatementResultResults) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
