// Copyright 2021 Confluent Inc. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*
Stream Share APIs

# Introduction

API version: 0.1.0-alpha0
Contact: cdx@confluent.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1

import (
	"encoding/json"
)

import (
	"reflect"
)

// CdxV1Schema Schema
type CdxV1Schema struct {
	// Name of the subject
	Subject *string `json:"subject,omitempty"`
	// Version number
	Version *int32 `json:"version,omitempty"`
	// Globally unique identifier of the schema
	Id *int32 `json:"id,omitempty"`
	// Schema type
	SchemaType *string `json:"schema_type,omitempty"`
	// Schema definition string
	Schema *string `json:"schema,omitempty"`
}

// NewCdxV1Schema instantiates a new CdxV1Schema object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCdxV1Schema() *CdxV1Schema {
	this := CdxV1Schema{}
	return &this
}

// NewCdxV1SchemaWithDefaults instantiates a new CdxV1Schema object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCdxV1SchemaWithDefaults() *CdxV1Schema {
	this := CdxV1Schema{}
	return &this
}

// GetSubject returns the Subject field value if set, zero value otherwise.
func (o *CdxV1Schema) GetSubject() string {
	if o == nil || o.Subject == nil {
		var ret string
		return ret
	}
	return *o.Subject
}

// GetSubjectOk returns a tuple with the Subject field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CdxV1Schema) GetSubjectOk() (*string, bool) {
	if o == nil || o.Subject == nil {
		return nil, false
	}
	return o.Subject, true
}

// HasSubject returns a boolean if a field has been set.
func (o *CdxV1Schema) HasSubject() bool {
	if o != nil && o.Subject != nil {
		return true
	}

	return false
}

// SetSubject gets a reference to the given string and assigns it to the Subject field.
func (o *CdxV1Schema) SetSubject(v string) {
	o.Subject = &v
}

// GetVersion returns the Version field value if set, zero value otherwise.
func (o *CdxV1Schema) GetVersion() int32 {
	if o == nil || o.Version == nil {
		var ret int32
		return ret
	}
	return *o.Version
}

// GetVersionOk returns a tuple with the Version field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CdxV1Schema) GetVersionOk() (*int32, bool) {
	if o == nil || o.Version == nil {
		return nil, false
	}
	return o.Version, true
}

// HasVersion returns a boolean if a field has been set.
func (o *CdxV1Schema) HasVersion() bool {
	if o != nil && o.Version != nil {
		return true
	}

	return false
}

// SetVersion gets a reference to the given int32 and assigns it to the Version field.
func (o *CdxV1Schema) SetVersion(v int32) {
	o.Version = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *CdxV1Schema) GetId() int32 {
	if o == nil || o.Id == nil {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CdxV1Schema) GetIdOk() (*int32, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *CdxV1Schema) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *CdxV1Schema) SetId(v int32) {
	o.Id = &v
}

// GetSchemaType returns the SchemaType field value if set, zero value otherwise.
func (o *CdxV1Schema) GetSchemaType() string {
	if o == nil || o.SchemaType == nil {
		var ret string
		return ret
	}
	return *o.SchemaType
}

// GetSchemaTypeOk returns a tuple with the SchemaType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CdxV1Schema) GetSchemaTypeOk() (*string, bool) {
	if o == nil || o.SchemaType == nil {
		return nil, false
	}
	return o.SchemaType, true
}

// HasSchemaType returns a boolean if a field has been set.
func (o *CdxV1Schema) HasSchemaType() bool {
	if o != nil && o.SchemaType != nil {
		return true
	}

	return false
}

// SetSchemaType gets a reference to the given string and assigns it to the SchemaType field.
func (o *CdxV1Schema) SetSchemaType(v string) {
	o.SchemaType = &v
}

// GetSchema returns the Schema field value if set, zero value otherwise.
func (o *CdxV1Schema) GetSchema() string {
	if o == nil || o.Schema == nil {
		var ret string
		return ret
	}
	return *o.Schema
}

// GetSchemaOk returns a tuple with the Schema field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CdxV1Schema) GetSchemaOk() (*string, bool) {
	if o == nil || o.Schema == nil {
		return nil, false
	}
	return o.Schema, true
}

// HasSchema returns a boolean if a field has been set.
func (o *CdxV1Schema) HasSchema() bool {
	if o != nil && o.Schema != nil {
		return true
	}

	return false
}

// SetSchema gets a reference to the given string and assigns it to the Schema field.
func (o *CdxV1Schema) SetSchema(v string) {
	o.Schema = &v
}

// Redact resets all sensitive fields to their zero value.
func (o *CdxV1Schema) Redact() {
	o.recurseRedact(o.Subject)
	o.recurseRedact(o.Version)
	o.recurseRedact(o.Id)
	o.recurseRedact(o.SchemaType)
	o.recurseRedact(o.Schema)
}

func (o *CdxV1Schema) recurseRedact(v interface{}) {
	type redactor interface {
		Redact()
	}
	if r, ok := v.(redactor); ok {
		r.Redact()
	} else {
		val := reflect.ValueOf(v)
		if val.Kind() == reflect.Ptr {
			val = val.Elem()
		}
		switch val.Kind() {
		case reflect.Slice, reflect.Array:
			for i := 0; i < val.Len(); i++ {
				// support data types declared without pointers
				o.recurseRedact(val.Index(i).Interface())
				// ... and data types that were declared without but need pointers (for Redact)
				if val.Index(i).CanAddr() {
					o.recurseRedact(val.Index(i).Addr().Interface())
				}
			}
		}
	}
}

func (o CdxV1Schema) zeroField(v interface{}) {
	p := reflect.ValueOf(v).Elem()
	p.Set(reflect.Zero(p.Type()))
}

func (o CdxV1Schema) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Subject != nil {
		toSerialize["subject"] = o.Subject
	}
	if o.Version != nil {
		toSerialize["version"] = o.Version
	}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.SchemaType != nil {
		toSerialize["schema_type"] = o.SchemaType
	}
	if o.Schema != nil {
		toSerialize["schema"] = o.Schema
	}
	return json.Marshal(toSerialize)
}

type NullableCdxV1Schema struct {
	value *CdxV1Schema
	isSet bool
}

func (v NullableCdxV1Schema) Get() *CdxV1Schema {
	return v.value
}

func (v *NullableCdxV1Schema) Set(val *CdxV1Schema) {
	v.value = val
	v.isSet = true
}

func (v NullableCdxV1Schema) IsSet() bool {
	return v.isSet
}

func (v *NullableCdxV1Schema) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCdxV1Schema(val *CdxV1Schema) *NullableCdxV1Schema {
	return &NullableCdxV1Schema{value: val, isSet: true}
}

func (v NullableCdxV1Schema) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCdxV1Schema) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
