// Copyright 2021 Confluent Inc. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*
Stream Share APIs

# Introduction

API version: 0.1.0-alpha0
Contact: cdx@confluent.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1

import (
	"encoding/json"
)

import (
	"reflect"
)

// CdxV1AwsNetwork The AWS network details.
type CdxV1AwsNetwork struct {
	// Network kind type.
	Kind string `json:"kind"`
	// The AWS VPC endpoint service for the network (used for PrivateLink) if available.
	PrivateLinkEndpointService *string `json:"private_link_endpoint_service,omitempty"`
}

// NewCdxV1AwsNetwork instantiates a new CdxV1AwsNetwork object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCdxV1AwsNetwork(kind string) *CdxV1AwsNetwork {
	this := CdxV1AwsNetwork{}
	this.Kind = kind
	return &this
}

// NewCdxV1AwsNetworkWithDefaults instantiates a new CdxV1AwsNetwork object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCdxV1AwsNetworkWithDefaults() *CdxV1AwsNetwork {
	this := CdxV1AwsNetwork{}
	return &this
}

// GetKind returns the Kind field value
func (o *CdxV1AwsNetwork) GetKind() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Kind
}

// GetKindOk returns a tuple with the Kind field value
// and a boolean to check if the value has been set.
func (o *CdxV1AwsNetwork) GetKindOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Kind, true
}

// SetKind sets field value
func (o *CdxV1AwsNetwork) SetKind(v string) {
	o.Kind = v
}

// GetPrivateLinkEndpointService returns the PrivateLinkEndpointService field value if set, zero value otherwise.
func (o *CdxV1AwsNetwork) GetPrivateLinkEndpointService() string {
	if o == nil || o.PrivateLinkEndpointService == nil {
		var ret string
		return ret
	}
	return *o.PrivateLinkEndpointService
}

// GetPrivateLinkEndpointServiceOk returns a tuple with the PrivateLinkEndpointService field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CdxV1AwsNetwork) GetPrivateLinkEndpointServiceOk() (*string, bool) {
	if o == nil || o.PrivateLinkEndpointService == nil {
		return nil, false
	}
	return o.PrivateLinkEndpointService, true
}

// HasPrivateLinkEndpointService returns a boolean if a field has been set.
func (o *CdxV1AwsNetwork) HasPrivateLinkEndpointService() bool {
	if o != nil && o.PrivateLinkEndpointService != nil {
		return true
	}

	return false
}

// SetPrivateLinkEndpointService gets a reference to the given string and assigns it to the PrivateLinkEndpointService field.
func (o *CdxV1AwsNetwork) SetPrivateLinkEndpointService(v string) {
	o.PrivateLinkEndpointService = &v
}

// Redact resets all sensitive fields to their zero value.
func (o *CdxV1AwsNetwork) Redact() {
	o.recurseRedact(&o.Kind)
	o.recurseRedact(o.PrivateLinkEndpointService)
}

func (o *CdxV1AwsNetwork) recurseRedact(v interface{}) {
	type redactor interface {
		Redact()
	}
	if r, ok := v.(redactor); ok {
		r.Redact()
	} else {
		val := reflect.ValueOf(v)
		if val.Kind() == reflect.Ptr {
			val = val.Elem()
		}
		switch val.Kind() {
		case reflect.Slice, reflect.Array:
			for i := 0; i < val.Len(); i++ {
				// support data types declared without pointers
				o.recurseRedact(val.Index(i).Interface())
				// ... and data types that were declared without but need pointers (for Redact)
				if val.Index(i).CanAddr() {
					o.recurseRedact(val.Index(i).Addr().Interface())
				}
			}
		}
	}
}

func (o CdxV1AwsNetwork) zeroField(v interface{}) {
	p := reflect.ValueOf(v).Elem()
	p.Set(reflect.Zero(p.Type()))
}

func (o CdxV1AwsNetwork) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["kind"] = o.Kind
	}
	if o.PrivateLinkEndpointService != nil {
		toSerialize["private_link_endpoint_service"] = o.PrivateLinkEndpointService
	}
	return json.Marshal(toSerialize)
}

type NullableCdxV1AwsNetwork struct {
	value *CdxV1AwsNetwork
	isSet bool
}

func (v NullableCdxV1AwsNetwork) Get() *CdxV1AwsNetwork {
	return v.value
}

func (v *NullableCdxV1AwsNetwork) Set(val *CdxV1AwsNetwork) {
	v.value = val
	v.isSet = true
}

func (v NullableCdxV1AwsNetwork) IsSet() bool {
	return v.isSet
}

func (v *NullableCdxV1AwsNetwork) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCdxV1AwsNetwork(val *CdxV1AwsNetwork) *NullableCdxV1AwsNetwork {
	return &NullableCdxV1AwsNetwork{value: val, isSet: true}
}

func (v NullableCdxV1AwsNetwork) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCdxV1AwsNetwork) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
