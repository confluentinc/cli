// Copyright 2021 Confluent Inc. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*
Stream Share APIs

# Introduction

API version: 0.1.0-alpha0
Contact: cdx@confluent.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1

import (
	"bytes"
	_context "context"
	_ioutil "io/ioutil"
	_nethttp "net/http"
	_neturl "net/url"
	"os"
	"strings"
)

// Linger please
var (
	_ _context.Context
)

type ConsumerSharedResourcesCdxV1Api interface {

	/*
		GetCdxV1ConsumerSharedResource Read a Consumer Shared Resource

		Make a request to read a consumer shared resource.

		 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		 @param id The unique identifier for the consumer shared resource.
		 @return ApiGetCdxV1ConsumerSharedResourceRequest
	*/
	GetCdxV1ConsumerSharedResource(ctx _context.Context, id string) ApiGetCdxV1ConsumerSharedResourceRequest

	// GetCdxV1ConsumerSharedResourceExecute executes the request
	//  @return CdxV1ConsumerSharedResource
	GetCdxV1ConsumerSharedResourceExecute(r ApiGetCdxV1ConsumerSharedResourceRequest) (CdxV1ConsumerSharedResource, *_nethttp.Response, error)

	/*
		ImageCdxV1ConsumerSharedResource Get image for shared resource

		Returns the image file for the shared resource

		 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		 @param id The unique identifier for the consumer shared resource.
		 @param fileName The File Name
		 @return ApiImageCdxV1ConsumerSharedResourceRequest
	*/
	ImageCdxV1ConsumerSharedResource(ctx _context.Context, id string, fileName string) ApiImageCdxV1ConsumerSharedResourceRequest

	// ImageCdxV1ConsumerSharedResourceExecute executes the request
	//  @return *os.File
	ImageCdxV1ConsumerSharedResourceExecute(r ApiImageCdxV1ConsumerSharedResourceRequest) (*os.File, *_nethttp.Response, error)

	/*
		ListCdxV1ConsumerSharedResources List of Consumer Shared Resources

		Retrieve a sorted, filtered, paginated list of all consumer shared resources.

		 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		 @return ApiListCdxV1ConsumerSharedResourcesRequest
	*/
	ListCdxV1ConsumerSharedResources(ctx _context.Context) ApiListCdxV1ConsumerSharedResourcesRequest

	// ListCdxV1ConsumerSharedResourcesExecute executes the request
	//  @return CdxV1ConsumerSharedResourceList
	ListCdxV1ConsumerSharedResourcesExecute(r ApiListCdxV1ConsumerSharedResourcesRequest) (CdxV1ConsumerSharedResourceList, *_nethttp.Response, error)

	/*
		NetworkCdxV1ConsumerSharedResource Get shared resource's network configuration

		Returns network information of the shared resource

		 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		 @param id The unique identifier for the consumer shared resource.
		 @return ApiNetworkCdxV1ConsumerSharedResourceRequest
	*/
	NetworkCdxV1ConsumerSharedResource(ctx _context.Context, id string) ApiNetworkCdxV1ConsumerSharedResourceRequest

	// NetworkCdxV1ConsumerSharedResourceExecute executes the request
	//  @return CdxV1Network
	NetworkCdxV1ConsumerSharedResourceExecute(r ApiNetworkCdxV1ConsumerSharedResourceRequest) (CdxV1Network, *_nethttp.Response, error)
}

// ConsumerSharedResourcesCdxV1ApiService ConsumerSharedResourcesCdxV1Api service
type ConsumerSharedResourcesCdxV1ApiService service

type ApiGetCdxV1ConsumerSharedResourceRequest struct {
	ctx        _context.Context
	ApiService ConsumerSharedResourcesCdxV1Api
	id         string
}

func (r ApiGetCdxV1ConsumerSharedResourceRequest) Execute() (CdxV1ConsumerSharedResource, *_nethttp.Response, error) {
	return r.ApiService.GetCdxV1ConsumerSharedResourceExecute(r)
}

/*
GetCdxV1ConsumerSharedResource Read a Consumer Shared Resource

Make a request to read a consumer shared resource.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id The unique identifier for the consumer shared resource.
 @return ApiGetCdxV1ConsumerSharedResourceRequest
*/
func (a *ConsumerSharedResourcesCdxV1ApiService) GetCdxV1ConsumerSharedResource(ctx _context.Context, id string) ApiGetCdxV1ConsumerSharedResourceRequest {
	return ApiGetCdxV1ConsumerSharedResourceRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//  @return CdxV1ConsumerSharedResource
func (a *ConsumerSharedResourcesCdxV1ApiService) GetCdxV1ConsumerSharedResourceExecute(r ApiGetCdxV1ConsumerSharedResourceRequest) (CdxV1ConsumerSharedResource, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  CdxV1ConsumerSharedResource
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConsumerSharedResourcesCdxV1ApiService.GetCdxV1ConsumerSharedResource")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/cdx/v1/consumer-shared-resources/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", _neturl.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v Failure
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v Failure
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v Failure
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v Failure
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v Failure
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiImageCdxV1ConsumerSharedResourceRequest struct {
	ctx        _context.Context
	ApiService ConsumerSharedResourcesCdxV1Api
	id         string
	fileName   string
}

func (r ApiImageCdxV1ConsumerSharedResourceRequest) Execute() (*os.File, *_nethttp.Response, error) {
	return r.ApiService.ImageCdxV1ConsumerSharedResourceExecute(r)
}

/*
ImageCdxV1ConsumerSharedResource Get image for shared resource

Returns the image file for the shared resource

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id The unique identifier for the consumer shared resource.
 @param fileName The File Name
 @return ApiImageCdxV1ConsumerSharedResourceRequest
*/
func (a *ConsumerSharedResourcesCdxV1ApiService) ImageCdxV1ConsumerSharedResource(ctx _context.Context, id string, fileName string) ApiImageCdxV1ConsumerSharedResourceRequest {
	return ApiImageCdxV1ConsumerSharedResourceRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
		fileName:   fileName,
	}
}

// Execute executes the request
//  @return *os.File
func (a *ConsumerSharedResourcesCdxV1ApiService) ImageCdxV1ConsumerSharedResourceExecute(r ApiImageCdxV1ConsumerSharedResourceRequest) (*os.File, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  *os.File
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConsumerSharedResourcesCdxV1ApiService.ImageCdxV1ConsumerSharedResource")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/cdx/v1/consumer-shared-resources/{id}/images/{file_name}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", _neturl.PathEscape(parameterToString(r.id, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"file_name"+"}", _neturl.PathEscape(parameterToString(r.fileName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"image/_*", "application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v Failure
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v Failure
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v Failure
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v Failure
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v Failure
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiListCdxV1ConsumerSharedResourcesRequest struct {
	ctx            _context.Context
	ApiService     ConsumerSharedResourcesCdxV1Api
	streamShare    *string
	includeDeleted *bool
	pageSize       *int32
	pageToken      *string
}

// Filter the results by exact match for stream_share.
func (r ApiListCdxV1ConsumerSharedResourcesRequest) StreamShare(streamShare string) ApiListCdxV1ConsumerSharedResourcesRequest {
	r.streamShare = &streamShare
	return r
}

// Include deactivated shared resources
func (r ApiListCdxV1ConsumerSharedResourcesRequest) IncludeDeleted(includeDeleted bool) ApiListCdxV1ConsumerSharedResourcesRequest {
	r.includeDeleted = &includeDeleted
	return r
}

// A pagination size for collection requests.
func (r ApiListCdxV1ConsumerSharedResourcesRequest) PageSize(pageSize int32) ApiListCdxV1ConsumerSharedResourcesRequest {
	r.pageSize = &pageSize
	return r
}

// An opaque pagination token for collection requests.
func (r ApiListCdxV1ConsumerSharedResourcesRequest) PageToken(pageToken string) ApiListCdxV1ConsumerSharedResourcesRequest {
	r.pageToken = &pageToken
	return r
}

func (r ApiListCdxV1ConsumerSharedResourcesRequest) Execute() (CdxV1ConsumerSharedResourceList, *_nethttp.Response, error) {
	return r.ApiService.ListCdxV1ConsumerSharedResourcesExecute(r)
}

/*
ListCdxV1ConsumerSharedResources List of Consumer Shared Resources

Retrieve a sorted, filtered, paginated list of all consumer shared resources.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiListCdxV1ConsumerSharedResourcesRequest
*/
func (a *ConsumerSharedResourcesCdxV1ApiService) ListCdxV1ConsumerSharedResources(ctx _context.Context) ApiListCdxV1ConsumerSharedResourcesRequest {
	return ApiListCdxV1ConsumerSharedResourcesRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//  @return CdxV1ConsumerSharedResourceList
func (a *ConsumerSharedResourcesCdxV1ApiService) ListCdxV1ConsumerSharedResourcesExecute(r ApiListCdxV1ConsumerSharedResourcesRequest) (CdxV1ConsumerSharedResourceList, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  CdxV1ConsumerSharedResourceList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConsumerSharedResourcesCdxV1ApiService.ListCdxV1ConsumerSharedResources")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/cdx/v1/consumer-shared-resources"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.streamShare != nil {
		localVarQueryParams.Add("stream_share", parameterToString(*r.streamShare, ""))
	}
	if r.includeDeleted != nil {
		localVarQueryParams.Add("include_deleted", parameterToString(*r.includeDeleted, ""))
	}
	if r.pageSize != nil {
		localVarQueryParams.Add("page_size", parameterToString(*r.pageSize, ""))
	}
	if r.pageToken != nil {
		localVarQueryParams.Add("page_token", parameterToString(*r.pageToken, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v Failure
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v Failure
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v Failure
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v Failure
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiNetworkCdxV1ConsumerSharedResourceRequest struct {
	ctx        _context.Context
	ApiService ConsumerSharedResourcesCdxV1Api
	id         string
}

func (r ApiNetworkCdxV1ConsumerSharedResourceRequest) Execute() (CdxV1Network, *_nethttp.Response, error) {
	return r.ApiService.NetworkCdxV1ConsumerSharedResourceExecute(r)
}

/*
NetworkCdxV1ConsumerSharedResource Get shared resource's network configuration

Returns network information of the shared resource

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id The unique identifier for the consumer shared resource.
 @return ApiNetworkCdxV1ConsumerSharedResourceRequest
*/
func (a *ConsumerSharedResourcesCdxV1ApiService) NetworkCdxV1ConsumerSharedResource(ctx _context.Context, id string) ApiNetworkCdxV1ConsumerSharedResourceRequest {
	return ApiNetworkCdxV1ConsumerSharedResourceRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//  @return CdxV1Network
func (a *ConsumerSharedResourcesCdxV1ApiService) NetworkCdxV1ConsumerSharedResourceExecute(r ApiNetworkCdxV1ConsumerSharedResourceRequest) (CdxV1Network, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  CdxV1Network
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConsumerSharedResourcesCdxV1ApiService.NetworkCdxV1ConsumerSharedResource")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/cdx/v1/consumer-shared-resources/{id}:network"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", _neturl.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v Failure
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v Failure
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v Failure
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v Failure
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v Failure
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
