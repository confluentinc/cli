// Copyright 2021 Confluent Inc. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*
Stream Share APIs

# Introduction

API version: 0.1.0-alpha0
Contact: cdx@confluent.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1

import (
	"bytes"
	_context "context"
	_ioutil "io/ioutil"
	_nethttp "net/http"
	_neturl "net/url"
	"os"
	"strings"
)

// Linger please
var (
	_ _context.Context
)

type ProviderSharedResourcesCdxV1Api interface {

	/*
		DeleteImageCdxV1ProviderSharedResource Delete_Image a Provider Shared Resource

		Deletes the image file for the shared resource

		 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		 @param id The unique identifier for the provider shared resource.
		 @param fileName The File Name
		 @return ApiDeleteImageCdxV1ProviderSharedResourceRequest
	*/
	DeleteImageCdxV1ProviderSharedResource(ctx _context.Context, id string, fileName string) ApiDeleteImageCdxV1ProviderSharedResourceRequest

	// DeleteImageCdxV1ProviderSharedResourceExecute executes the request
	DeleteImageCdxV1ProviderSharedResourceExecute(r ApiDeleteImageCdxV1ProviderSharedResourceRequest) (*_nethttp.Response, error)

	/*
		GetCdxV1ProviderSharedResource Read a Provider Shared Resource

		Make a request to read a provider shared resource.

		 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		 @param id The unique identifier for the provider shared resource.
		 @return ApiGetCdxV1ProviderSharedResourceRequest
	*/
	GetCdxV1ProviderSharedResource(ctx _context.Context, id string) ApiGetCdxV1ProviderSharedResourceRequest

	// GetCdxV1ProviderSharedResourceExecute executes the request
	//  @return CdxV1ProviderSharedResource
	GetCdxV1ProviderSharedResourceExecute(r ApiGetCdxV1ProviderSharedResourceRequest) (CdxV1ProviderSharedResource, *_nethttp.Response, error)

	/*
		ListCdxV1ProviderSharedResources List of Provider Shared Resources

		Retrieve a sorted, filtered, paginated list of all provider shared resources.

		 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		 @return ApiListCdxV1ProviderSharedResourcesRequest
	*/
	ListCdxV1ProviderSharedResources(ctx _context.Context) ApiListCdxV1ProviderSharedResourcesRequest

	// ListCdxV1ProviderSharedResourcesExecute executes the request
	//  @return CdxV1ProviderSharedResourceList
	ListCdxV1ProviderSharedResourcesExecute(r ApiListCdxV1ProviderSharedResourcesRequest) (CdxV1ProviderSharedResourceList, *_nethttp.Response, error)

	/*
		UpdateCdxV1ProviderSharedResource Update a Provider Shared Resource

		Make a request to update a provider shared resource.



		 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		 @param id The unique identifier for the provider shared resource.
		 @return ApiUpdateCdxV1ProviderSharedResourceRequest
	*/
	UpdateCdxV1ProviderSharedResource(ctx _context.Context, id string) ApiUpdateCdxV1ProviderSharedResourceRequest

	// UpdateCdxV1ProviderSharedResourceExecute executes the request
	//  @return CdxV1ProviderSharedResource
	UpdateCdxV1ProviderSharedResourceExecute(r ApiUpdateCdxV1ProviderSharedResourceRequest) (CdxV1ProviderSharedResource, *_nethttp.Response, error)

	/*
		UploadImageCdxV1ProviderSharedResource Upload image for shared resource

		Upload the image file for the shared resource

		 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		 @param id The unique identifier for the provider shared resource.
		 @param fileName The File Name
		 @return ApiUploadImageCdxV1ProviderSharedResourceRequest
	*/
	UploadImageCdxV1ProviderSharedResource(ctx _context.Context, id string, fileName string) ApiUploadImageCdxV1ProviderSharedResourceRequest

	// UploadImageCdxV1ProviderSharedResourceExecute executes the request
	UploadImageCdxV1ProviderSharedResourceExecute(r ApiUploadImageCdxV1ProviderSharedResourceRequest) (*_nethttp.Response, error)

	/*
		ViewImageCdxV1ProviderSharedResource View_Image a Provider Shared Resource

		Returns the image file for the shared resource

		 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		 @param id The unique identifier for the provider shared resource.
		 @param fileName The File Name
		 @return ApiViewImageCdxV1ProviderSharedResourceRequest
	*/
	ViewImageCdxV1ProviderSharedResource(ctx _context.Context, id string, fileName string) ApiViewImageCdxV1ProviderSharedResourceRequest

	// ViewImageCdxV1ProviderSharedResourceExecute executes the request
	//  @return *os.File
	ViewImageCdxV1ProviderSharedResourceExecute(r ApiViewImageCdxV1ProviderSharedResourceRequest) (*os.File, *_nethttp.Response, error)
}

// ProviderSharedResourcesCdxV1ApiService ProviderSharedResourcesCdxV1Api service
type ProviderSharedResourcesCdxV1ApiService service

type ApiDeleteImageCdxV1ProviderSharedResourceRequest struct {
	ctx        _context.Context
	ApiService ProviderSharedResourcesCdxV1Api
	id         string
	fileName   string
}

func (r ApiDeleteImageCdxV1ProviderSharedResourceRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.DeleteImageCdxV1ProviderSharedResourceExecute(r)
}

/*
DeleteImageCdxV1ProviderSharedResource Delete_Image a Provider Shared Resource

Deletes the image file for the shared resource

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id The unique identifier for the provider shared resource.
 @param fileName The File Name
 @return ApiDeleteImageCdxV1ProviderSharedResourceRequest
*/
func (a *ProviderSharedResourcesCdxV1ApiService) DeleteImageCdxV1ProviderSharedResource(ctx _context.Context, id string, fileName string) ApiDeleteImageCdxV1ProviderSharedResourceRequest {
	return ApiDeleteImageCdxV1ProviderSharedResourceRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
		fileName:   fileName,
	}
}

// Execute executes the request
func (a *ProviderSharedResourcesCdxV1ApiService) DeleteImageCdxV1ProviderSharedResourceExecute(r ApiDeleteImageCdxV1ProviderSharedResourceRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProviderSharedResourcesCdxV1ApiService.DeleteImageCdxV1ProviderSharedResource")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/cdx/v1/provider-shared-resources/{id}/images/{file_name}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", _neturl.PathEscape(parameterToString(r.id, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"file_name"+"}", _neturl.PathEscape(parameterToString(r.fileName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v Failure
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v Failure
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v Failure
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v Failure
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v Failure
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetCdxV1ProviderSharedResourceRequest struct {
	ctx        _context.Context
	ApiService ProviderSharedResourcesCdxV1Api
	id         string
}

func (r ApiGetCdxV1ProviderSharedResourceRequest) Execute() (CdxV1ProviderSharedResource, *_nethttp.Response, error) {
	return r.ApiService.GetCdxV1ProviderSharedResourceExecute(r)
}

/*
GetCdxV1ProviderSharedResource Read a Provider Shared Resource

Make a request to read a provider shared resource.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id The unique identifier for the provider shared resource.
 @return ApiGetCdxV1ProviderSharedResourceRequest
*/
func (a *ProviderSharedResourcesCdxV1ApiService) GetCdxV1ProviderSharedResource(ctx _context.Context, id string) ApiGetCdxV1ProviderSharedResourceRequest {
	return ApiGetCdxV1ProviderSharedResourceRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//  @return CdxV1ProviderSharedResource
func (a *ProviderSharedResourcesCdxV1ApiService) GetCdxV1ProviderSharedResourceExecute(r ApiGetCdxV1ProviderSharedResourceRequest) (CdxV1ProviderSharedResource, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  CdxV1ProviderSharedResource
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProviderSharedResourcesCdxV1ApiService.GetCdxV1ProviderSharedResource")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/cdx/v1/provider-shared-resources/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", _neturl.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v Failure
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v Failure
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v Failure
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v Failure
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v Failure
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiListCdxV1ProviderSharedResourcesRequest struct {
	ctx            _context.Context
	ApiService     ProviderSharedResourcesCdxV1Api
	streamShare    *string
	crn            *string
	includeDeleted *bool
	pageSize       *int32
	pageToken      *string
}

// Filter the results by exact match for stream_share.
func (r ApiListCdxV1ProviderSharedResourcesRequest) StreamShare(streamShare string) ApiListCdxV1ProviderSharedResourcesRequest {
	r.streamShare = &streamShare
	return r
}

// Filter the results by exact match for crn.
func (r ApiListCdxV1ProviderSharedResourcesRequest) Crn(crn string) ApiListCdxV1ProviderSharedResourcesRequest {
	r.crn = &crn
	return r
}

// Include deactivated shared resources
func (r ApiListCdxV1ProviderSharedResourcesRequest) IncludeDeleted(includeDeleted bool) ApiListCdxV1ProviderSharedResourcesRequest {
	r.includeDeleted = &includeDeleted
	return r
}

// A pagination size for collection requests.
func (r ApiListCdxV1ProviderSharedResourcesRequest) PageSize(pageSize int32) ApiListCdxV1ProviderSharedResourcesRequest {
	r.pageSize = &pageSize
	return r
}

// An opaque pagination token for collection requests.
func (r ApiListCdxV1ProviderSharedResourcesRequest) PageToken(pageToken string) ApiListCdxV1ProviderSharedResourcesRequest {
	r.pageToken = &pageToken
	return r
}

func (r ApiListCdxV1ProviderSharedResourcesRequest) Execute() (CdxV1ProviderSharedResourceList, *_nethttp.Response, error) {
	return r.ApiService.ListCdxV1ProviderSharedResourcesExecute(r)
}

/*
ListCdxV1ProviderSharedResources List of Provider Shared Resources

Retrieve a sorted, filtered, paginated list of all provider shared resources.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiListCdxV1ProviderSharedResourcesRequest
*/
func (a *ProviderSharedResourcesCdxV1ApiService) ListCdxV1ProviderSharedResources(ctx _context.Context) ApiListCdxV1ProviderSharedResourcesRequest {
	return ApiListCdxV1ProviderSharedResourcesRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//  @return CdxV1ProviderSharedResourceList
func (a *ProviderSharedResourcesCdxV1ApiService) ListCdxV1ProviderSharedResourcesExecute(r ApiListCdxV1ProviderSharedResourcesRequest) (CdxV1ProviderSharedResourceList, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  CdxV1ProviderSharedResourceList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProviderSharedResourcesCdxV1ApiService.ListCdxV1ProviderSharedResources")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/cdx/v1/provider-shared-resources"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.streamShare != nil {
		localVarQueryParams.Add("stream_share", parameterToString(*r.streamShare, ""))
	}
	if r.crn != nil {
		localVarQueryParams.Add("crn", parameterToString(*r.crn, ""))
	}
	if r.includeDeleted != nil {
		localVarQueryParams.Add("include_deleted", parameterToString(*r.includeDeleted, ""))
	}
	if r.pageSize != nil {
		localVarQueryParams.Add("page_size", parameterToString(*r.pageSize, ""))
	}
	if r.pageToken != nil {
		localVarQueryParams.Add("page_token", parameterToString(*r.pageToken, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v Failure
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v Failure
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v Failure
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v Failure
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUpdateCdxV1ProviderSharedResourceRequest struct {
	ctx                               _context.Context
	ApiService                        ProviderSharedResourcesCdxV1Api
	id                                string
	cdxV1ProviderSharedResourceUpdate *CdxV1ProviderSharedResourceUpdate
}

func (r ApiUpdateCdxV1ProviderSharedResourceRequest) CdxV1ProviderSharedResourceUpdate(cdxV1ProviderSharedResourceUpdate CdxV1ProviderSharedResourceUpdate) ApiUpdateCdxV1ProviderSharedResourceRequest {
	r.cdxV1ProviderSharedResourceUpdate = &cdxV1ProviderSharedResourceUpdate
	return r
}

func (r ApiUpdateCdxV1ProviderSharedResourceRequest) Execute() (CdxV1ProviderSharedResource, *_nethttp.Response, error) {
	return r.ApiService.UpdateCdxV1ProviderSharedResourceExecute(r)
}

/*
UpdateCdxV1ProviderSharedResource Update a Provider Shared Resource

Make a request to update a provider shared resource.



 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id The unique identifier for the provider shared resource.
 @return ApiUpdateCdxV1ProviderSharedResourceRequest
*/
func (a *ProviderSharedResourcesCdxV1ApiService) UpdateCdxV1ProviderSharedResource(ctx _context.Context, id string) ApiUpdateCdxV1ProviderSharedResourceRequest {
	return ApiUpdateCdxV1ProviderSharedResourceRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//  @return CdxV1ProviderSharedResource
func (a *ProviderSharedResourcesCdxV1ApiService) UpdateCdxV1ProviderSharedResourceExecute(r ApiUpdateCdxV1ProviderSharedResourceRequest) (CdxV1ProviderSharedResource, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  CdxV1ProviderSharedResource
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProviderSharedResourcesCdxV1ApiService.UpdateCdxV1ProviderSharedResource")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/cdx/v1/provider-shared-resources/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", _neturl.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.cdxV1ProviderSharedResourceUpdate
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v Failure
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v Failure
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v Failure
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v Failure
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v Failure
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v Failure
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUploadImageCdxV1ProviderSharedResourceRequest struct {
	ctx        _context.Context
	ApiService ProviderSharedResourcesCdxV1Api
	id         string
	fileName   string
	body       *string
}

func (r ApiUploadImageCdxV1ProviderSharedResourceRequest) Body(body string) ApiUploadImageCdxV1ProviderSharedResourceRequest {
	r.body = &body
	return r
}

func (r ApiUploadImageCdxV1ProviderSharedResourceRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.UploadImageCdxV1ProviderSharedResourceExecute(r)
}

/*
UploadImageCdxV1ProviderSharedResource Upload image for shared resource

Upload the image file for the shared resource

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id The unique identifier for the provider shared resource.
 @param fileName The File Name
 @return ApiUploadImageCdxV1ProviderSharedResourceRequest
*/
func (a *ProviderSharedResourcesCdxV1ApiService) UploadImageCdxV1ProviderSharedResource(ctx _context.Context, id string, fileName string) ApiUploadImageCdxV1ProviderSharedResourceRequest {
	return ApiUploadImageCdxV1ProviderSharedResourceRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
		fileName:   fileName,
	}
}

// Execute executes the request
func (a *ProviderSharedResourcesCdxV1ApiService) UploadImageCdxV1ProviderSharedResourceExecute(r ApiUploadImageCdxV1ProviderSharedResourceRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProviderSharedResourcesCdxV1ApiService.UploadImageCdxV1ProviderSharedResource")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/cdx/v1/provider-shared-resources/{id}/images/{file_name}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", _neturl.PathEscape(parameterToString(r.id, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"file_name"+"}", _neturl.PathEscape(parameterToString(r.fileName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"image/_*"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v Failure
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v Failure
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v Failure
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v Failure
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v Failure
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiViewImageCdxV1ProviderSharedResourceRequest struct {
	ctx        _context.Context
	ApiService ProviderSharedResourcesCdxV1Api
	id         string
	fileName   string
}

func (r ApiViewImageCdxV1ProviderSharedResourceRequest) Execute() (*os.File, *_nethttp.Response, error) {
	return r.ApiService.ViewImageCdxV1ProviderSharedResourceExecute(r)
}

/*
ViewImageCdxV1ProviderSharedResource View_Image a Provider Shared Resource

Returns the image file for the shared resource

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id The unique identifier for the provider shared resource.
 @param fileName The File Name
 @return ApiViewImageCdxV1ProviderSharedResourceRequest
*/
func (a *ProviderSharedResourcesCdxV1ApiService) ViewImageCdxV1ProviderSharedResource(ctx _context.Context, id string, fileName string) ApiViewImageCdxV1ProviderSharedResourceRequest {
	return ApiViewImageCdxV1ProviderSharedResourceRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
		fileName:   fileName,
	}
}

// Execute executes the request
//  @return *os.File
func (a *ProviderSharedResourcesCdxV1ApiService) ViewImageCdxV1ProviderSharedResourceExecute(r ApiViewImageCdxV1ProviderSharedResourceRequest) (*os.File, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  *os.File
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProviderSharedResourcesCdxV1ApiService.ViewImageCdxV1ProviderSharedResource")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/cdx/v1/provider-shared-resources/{id}/images/{file_name}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", _neturl.PathEscape(parameterToString(r.id, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"file_name"+"}", _neturl.PathEscape(parameterToString(r.fileName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"image/_*", "application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v Failure
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v Failure
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v Failure
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v Failure
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v Failure
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
