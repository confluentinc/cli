// Copyright 2021 Confluent Inc. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*
Stream Share APIs

# Introduction

API version: 0.1.0-alpha0
Contact: cdx@confluent.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1

import (
	"encoding/json"
)

import (
	"reflect"
)

// CdxV1Network The shared cluster's network configurations for consumer to setup private link
type CdxV1Network struct {
	// APIVersion defines the schema version of this representation of a resource.
	ApiVersion *string `json:"api_version,omitempty"`
	// Kind defines the object this REST resource represents.
	Kind *string `json:"kind,omitempty"`
	// ID is the \"natural identifier\" for an object within its scope/namespace; it is normally unique across time but not space. That is, you can assume that the ID will not be reclaimed and reused after an object is deleted (\"time\"); however, it may collide with IDs for other object `kinds` or objects of the same `kind` within a different scope/namespace (\"space\").
	Id       *string     `json:"id,omitempty"`
	Metadata *ObjectMeta `json:"metadata,omitempty"`
	// The kafka cluster bootstrap url
	KafkaBootstrapUrl *string `json:"kafka_bootstrap_url,omitempty"`
	// The 3 availability zones for this network. They can optionally be specified for AWS networks used with PrivateLink. Otherwise, they are automatically chosen by Confluent Cloud.  On AWS, zones are AWS [AZ IDs](https://docs.aws.amazon.com/ram/latest/userguide/working-with-az-ids.html)  (e.g. use1-az3)  On GCP, zones are GCP [zones](https://cloud.google.com/compute/docs/regions-zones)  (e.g. us-central1-c).  On Azure, zones are Confluent-chosen names (e.g. 1, 2, 3) since Azure does not  have universal zone identifiers.
	Zones *[]string `json:"zones,omitempty"`
	// The root DNS domain for the network if applicable.
	DnsDomain *string `json:"dns_domain,omitempty"`
	// The DNS subdomain for each zone. Present on networks that support PrivateLink. Keys are zones and values are DNS domains.
	ZonalSubdomains *map[string]string `json:"zonal_subdomains,omitempty"`
	// The cloud-specific network details. These will be populated when the network reaches the READY state.
	Cloud *CdxV1NetworkCloudOneOf `json:"cloud,omitempty"`
}

// NewCdxV1Network instantiates a new CdxV1Network object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCdxV1Network() *CdxV1Network {
	this := CdxV1Network{}
	return &this
}

// NewCdxV1NetworkWithDefaults instantiates a new CdxV1Network object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCdxV1NetworkWithDefaults() *CdxV1Network {
	this := CdxV1Network{}
	return &this
}

// GetApiVersion returns the ApiVersion field value if set, zero value otherwise.
func (o *CdxV1Network) GetApiVersion() string {
	if o == nil || o.ApiVersion == nil {
		var ret string
		return ret
	}
	return *o.ApiVersion
}

// GetApiVersionOk returns a tuple with the ApiVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CdxV1Network) GetApiVersionOk() (*string, bool) {
	if o == nil || o.ApiVersion == nil {
		return nil, false
	}
	return o.ApiVersion, true
}

// HasApiVersion returns a boolean if a field has been set.
func (o *CdxV1Network) HasApiVersion() bool {
	if o != nil && o.ApiVersion != nil {
		return true
	}

	return false
}

// SetApiVersion gets a reference to the given string and assigns it to the ApiVersion field.
func (o *CdxV1Network) SetApiVersion(v string) {
	o.ApiVersion = &v
}

// GetKind returns the Kind field value if set, zero value otherwise.
func (o *CdxV1Network) GetKind() string {
	if o == nil || o.Kind == nil {
		var ret string
		return ret
	}
	return *o.Kind
}

// GetKindOk returns a tuple with the Kind field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CdxV1Network) GetKindOk() (*string, bool) {
	if o == nil || o.Kind == nil {
		return nil, false
	}
	return o.Kind, true
}

// HasKind returns a boolean if a field has been set.
func (o *CdxV1Network) HasKind() bool {
	if o != nil && o.Kind != nil {
		return true
	}

	return false
}

// SetKind gets a reference to the given string and assigns it to the Kind field.
func (o *CdxV1Network) SetKind(v string) {
	o.Kind = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *CdxV1Network) GetId() string {
	if o == nil || o.Id == nil {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CdxV1Network) GetIdOk() (*string, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *CdxV1Network) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *CdxV1Network) SetId(v string) {
	o.Id = &v
}

// GetMetadata returns the Metadata field value if set, zero value otherwise.
func (o *CdxV1Network) GetMetadata() ObjectMeta {
	if o == nil || o.Metadata == nil {
		var ret ObjectMeta
		return ret
	}
	return *o.Metadata
}

// GetMetadataOk returns a tuple with the Metadata field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CdxV1Network) GetMetadataOk() (*ObjectMeta, bool) {
	if o == nil || o.Metadata == nil {
		return nil, false
	}
	return o.Metadata, true
}

// HasMetadata returns a boolean if a field has been set.
func (o *CdxV1Network) HasMetadata() bool {
	if o != nil && o.Metadata != nil {
		return true
	}

	return false
}

// SetMetadata gets a reference to the given ObjectMeta and assigns it to the Metadata field.
func (o *CdxV1Network) SetMetadata(v ObjectMeta) {
	o.Metadata = &v
}

// GetKafkaBootstrapUrl returns the KafkaBootstrapUrl field value if set, zero value otherwise.
func (o *CdxV1Network) GetKafkaBootstrapUrl() string {
	if o == nil || o.KafkaBootstrapUrl == nil {
		var ret string
		return ret
	}
	return *o.KafkaBootstrapUrl
}

// GetKafkaBootstrapUrlOk returns a tuple with the KafkaBootstrapUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CdxV1Network) GetKafkaBootstrapUrlOk() (*string, bool) {
	if o == nil || o.KafkaBootstrapUrl == nil {
		return nil, false
	}
	return o.KafkaBootstrapUrl, true
}

// HasKafkaBootstrapUrl returns a boolean if a field has been set.
func (o *CdxV1Network) HasKafkaBootstrapUrl() bool {
	if o != nil && o.KafkaBootstrapUrl != nil {
		return true
	}

	return false
}

// SetKafkaBootstrapUrl gets a reference to the given string and assigns it to the KafkaBootstrapUrl field.
func (o *CdxV1Network) SetKafkaBootstrapUrl(v string) {
	o.KafkaBootstrapUrl = &v
}

// GetZones returns the Zones field value if set, zero value otherwise.
func (o *CdxV1Network) GetZones() []string {
	if o == nil || o.Zones == nil {
		var ret []string
		return ret
	}
	return *o.Zones
}

// GetZonesOk returns a tuple with the Zones field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CdxV1Network) GetZonesOk() (*[]string, bool) {
	if o == nil || o.Zones == nil {
		return nil, false
	}
	return o.Zones, true
}

// HasZones returns a boolean if a field has been set.
func (o *CdxV1Network) HasZones() bool {
	if o != nil && o.Zones != nil {
		return true
	}

	return false
}

// SetZones gets a reference to the given []string and assigns it to the Zones field.
func (o *CdxV1Network) SetZones(v []string) {
	o.Zones = &v
}

// GetDnsDomain returns the DnsDomain field value if set, zero value otherwise.
func (o *CdxV1Network) GetDnsDomain() string {
	if o == nil || o.DnsDomain == nil {
		var ret string
		return ret
	}
	return *o.DnsDomain
}

// GetDnsDomainOk returns a tuple with the DnsDomain field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CdxV1Network) GetDnsDomainOk() (*string, bool) {
	if o == nil || o.DnsDomain == nil {
		return nil, false
	}
	return o.DnsDomain, true
}

// HasDnsDomain returns a boolean if a field has been set.
func (o *CdxV1Network) HasDnsDomain() bool {
	if o != nil && o.DnsDomain != nil {
		return true
	}

	return false
}

// SetDnsDomain gets a reference to the given string and assigns it to the DnsDomain field.
func (o *CdxV1Network) SetDnsDomain(v string) {
	o.DnsDomain = &v
}

// GetZonalSubdomains returns the ZonalSubdomains field value if set, zero value otherwise.
func (o *CdxV1Network) GetZonalSubdomains() map[string]string {
	if o == nil || o.ZonalSubdomains == nil {
		var ret map[string]string
		return ret
	}
	return *o.ZonalSubdomains
}

// GetZonalSubdomainsOk returns a tuple with the ZonalSubdomains field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CdxV1Network) GetZonalSubdomainsOk() (*map[string]string, bool) {
	if o == nil || o.ZonalSubdomains == nil {
		return nil, false
	}
	return o.ZonalSubdomains, true
}

// HasZonalSubdomains returns a boolean if a field has been set.
func (o *CdxV1Network) HasZonalSubdomains() bool {
	if o != nil && o.ZonalSubdomains != nil {
		return true
	}

	return false
}

// SetZonalSubdomains gets a reference to the given map[string]string and assigns it to the ZonalSubdomains field.
func (o *CdxV1Network) SetZonalSubdomains(v map[string]string) {
	o.ZonalSubdomains = &v
}

// GetCloud returns the Cloud field value if set, zero value otherwise.
func (o *CdxV1Network) GetCloud() CdxV1NetworkCloudOneOf {
	if o == nil || o.Cloud == nil {
		var ret CdxV1NetworkCloudOneOf
		return ret
	}
	return *o.Cloud
}

// GetCloudOk returns a tuple with the Cloud field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CdxV1Network) GetCloudOk() (*CdxV1NetworkCloudOneOf, bool) {
	if o == nil || o.Cloud == nil {
		return nil, false
	}
	return o.Cloud, true
}

// HasCloud returns a boolean if a field has been set.
func (o *CdxV1Network) HasCloud() bool {
	if o != nil && o.Cloud != nil {
		return true
	}

	return false
}

// SetCloud gets a reference to the given CdxV1NetworkCloudOneOf and assigns it to the Cloud field.
func (o *CdxV1Network) SetCloud(v CdxV1NetworkCloudOneOf) {
	o.Cloud = &v
}

// Redact resets all sensitive fields to their zero value.
func (o *CdxV1Network) Redact() {
	o.recurseRedact(o.ApiVersion)
	o.recurseRedact(o.Kind)
	o.recurseRedact(o.Id)
	o.recurseRedact(o.Metadata)
	o.recurseRedact(o.KafkaBootstrapUrl)
	o.recurseRedact(o.Zones)
	o.recurseRedact(o.DnsDomain)
	o.recurseRedact(o.ZonalSubdomains)
	o.recurseRedact(o.Cloud)
}

func (o *CdxV1Network) recurseRedact(v interface{}) {
	type redactor interface {
		Redact()
	}
	if r, ok := v.(redactor); ok {
		r.Redact()
	} else {
		val := reflect.ValueOf(v)
		if val.Kind() == reflect.Ptr {
			val = val.Elem()
		}
		switch val.Kind() {
		case reflect.Slice, reflect.Array:
			for i := 0; i < val.Len(); i++ {
				// support data types declared without pointers
				o.recurseRedact(val.Index(i).Interface())
				// ... and data types that were declared without but need pointers (for Redact)
				if val.Index(i).CanAddr() {
					o.recurseRedact(val.Index(i).Addr().Interface())
				}
			}
		}
	}
}

func (o CdxV1Network) zeroField(v interface{}) {
	p := reflect.ValueOf(v).Elem()
	p.Set(reflect.Zero(p.Type()))
}

func (o CdxV1Network) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.ApiVersion != nil {
		toSerialize["api_version"] = o.ApiVersion
	}
	if o.Kind != nil {
		toSerialize["kind"] = o.Kind
	}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.Metadata != nil {
		toSerialize["metadata"] = o.Metadata
	}
	if o.KafkaBootstrapUrl != nil {
		toSerialize["kafka_bootstrap_url"] = o.KafkaBootstrapUrl
	}
	if o.Zones != nil {
		toSerialize["zones"] = o.Zones
	}
	if o.DnsDomain != nil {
		toSerialize["dns_domain"] = o.DnsDomain
	}
	if o.ZonalSubdomains != nil {
		toSerialize["zonal_subdomains"] = o.ZonalSubdomains
	}
	if o.Cloud != nil {
		toSerialize["cloud"] = o.Cloud
	}
	return json.Marshal(toSerialize)
}

type NullableCdxV1Network struct {
	value *CdxV1Network
	isSet bool
}

func (v NullableCdxV1Network) Get() *CdxV1Network {
	return v.value
}

func (v *NullableCdxV1Network) Set(val *CdxV1Network) {
	v.value = val
	v.isSet = true
}

func (v NullableCdxV1Network) IsSet() bool {
	return v.isSet
}

func (v *NullableCdxV1Network) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCdxV1Network(val *CdxV1Network) *NullableCdxV1Network {
	return &NullableCdxV1Network{value: val, isSet: true}
}

func (v NullableCdxV1Network) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCdxV1Network) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
