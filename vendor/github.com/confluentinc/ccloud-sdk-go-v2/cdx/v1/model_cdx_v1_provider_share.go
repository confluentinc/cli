// Copyright 2021 Confluent Inc. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*
Stream Share APIs

# Introduction

API version: 0.1.0-alpha0
Contact: cdx@confluent.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1

import (
	"encoding/json"
	"time"
)

import (
	"reflect"
)

// CdxV1ProviderShare Resources shared by the provider   ## The Provider Shared Resources Model <SchemaDefinition schemaRef=\"#/components/schemas/cdx.v1.ProviderSharedResource\" />
type CdxV1ProviderShare struct {
	// APIVersion defines the schema version of this representation of a resource.
	ApiVersion *string `json:"api_version,omitempty"`
	// Kind defines the object this REST resource represents.
	Kind *string `json:"kind,omitempty"`
	// ID is the \"natural identifier\" for an object within its scope/namespace; it is normally unique across time but not space. That is, you can assume that the ID will not be reclaimed and reused after an object is deleted (\"time\"); however, it may collide with IDs for other object `kinds` or objects of the same `kind` within a different scope/namespace (\"space\").
	Id       *string     `json:"id,omitempty"`
	Metadata *ObjectMeta `json:"metadata,omitempty"`
	// Name of the consumer
	ConsumerUserName *string `json:"consumer_user_name,omitempty"`
	// Consumer organization name
	ConsumerOrganizationName *string `json:"consumer_organization_name,omitempty"`
	// Name or email of the provider user. Deprecated
	ProviderUserName *string `json:"provider_user_name,omitempty"`
	// Method by which the invite will be delivered
	DeliveryMethod *string `json:"delivery_method,omitempty"`
	// Restrictions on the consumer that can redeem this token
	ConsumerRestriction *CdxV1ProviderShareConsumerRestrictionOneOf `json:"consumer_restriction,omitempty"`
	// The date and time at which consumer was invited
	InvitedAt *time.Time `json:"invited_at,omitempty"`
	// The date and time at which the invitation will expire. Only for invited shares
	InviteExpiresAt *time.Time `json:"invite_expires_at,omitempty"`
	// The date and time at which the invite was redeemed
	RedeemedAt *time.Time `json:"redeemed_at,omitempty"`
	// The provider user/inviter
	ProviderUser *GlobalObjectReference `json:"provider_user,omitempty"`
	// The service account associated with this object.
	ServiceAccount *GlobalObjectReference `json:"service_account,omitempty"`
	// The cloud cluster to which this belongs.
	CloudCluster *EnvScopedObjectReference `json:"cloud_cluster,omitempty"`
	Status       *CdxV1ProviderShareStatus `json:"status,omitempty"`
}

// NewCdxV1ProviderShare instantiates a new CdxV1ProviderShare object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCdxV1ProviderShare() *CdxV1ProviderShare {
	this := CdxV1ProviderShare{}
	return &this
}

// NewCdxV1ProviderShareWithDefaults instantiates a new CdxV1ProviderShare object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCdxV1ProviderShareWithDefaults() *CdxV1ProviderShare {
	this := CdxV1ProviderShare{}
	return &this
}

// GetApiVersion returns the ApiVersion field value if set, zero value otherwise.
func (o *CdxV1ProviderShare) GetApiVersion() string {
	if o == nil || o.ApiVersion == nil {
		var ret string
		return ret
	}
	return *o.ApiVersion
}

// GetApiVersionOk returns a tuple with the ApiVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CdxV1ProviderShare) GetApiVersionOk() (*string, bool) {
	if o == nil || o.ApiVersion == nil {
		return nil, false
	}
	return o.ApiVersion, true
}

// HasApiVersion returns a boolean if a field has been set.
func (o *CdxV1ProviderShare) HasApiVersion() bool {
	if o != nil && o.ApiVersion != nil {
		return true
	}

	return false
}

// SetApiVersion gets a reference to the given string and assigns it to the ApiVersion field.
func (o *CdxV1ProviderShare) SetApiVersion(v string) {
	o.ApiVersion = &v
}

// GetKind returns the Kind field value if set, zero value otherwise.
func (o *CdxV1ProviderShare) GetKind() string {
	if o == nil || o.Kind == nil {
		var ret string
		return ret
	}
	return *o.Kind
}

// GetKindOk returns a tuple with the Kind field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CdxV1ProviderShare) GetKindOk() (*string, bool) {
	if o == nil || o.Kind == nil {
		return nil, false
	}
	return o.Kind, true
}

// HasKind returns a boolean if a field has been set.
func (o *CdxV1ProviderShare) HasKind() bool {
	if o != nil && o.Kind != nil {
		return true
	}

	return false
}

// SetKind gets a reference to the given string and assigns it to the Kind field.
func (o *CdxV1ProviderShare) SetKind(v string) {
	o.Kind = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *CdxV1ProviderShare) GetId() string {
	if o == nil || o.Id == nil {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CdxV1ProviderShare) GetIdOk() (*string, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *CdxV1ProviderShare) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *CdxV1ProviderShare) SetId(v string) {
	o.Id = &v
}

// GetMetadata returns the Metadata field value if set, zero value otherwise.
func (o *CdxV1ProviderShare) GetMetadata() ObjectMeta {
	if o == nil || o.Metadata == nil {
		var ret ObjectMeta
		return ret
	}
	return *o.Metadata
}

// GetMetadataOk returns a tuple with the Metadata field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CdxV1ProviderShare) GetMetadataOk() (*ObjectMeta, bool) {
	if o == nil || o.Metadata == nil {
		return nil, false
	}
	return o.Metadata, true
}

// HasMetadata returns a boolean if a field has been set.
func (o *CdxV1ProviderShare) HasMetadata() bool {
	if o != nil && o.Metadata != nil {
		return true
	}

	return false
}

// SetMetadata gets a reference to the given ObjectMeta and assigns it to the Metadata field.
func (o *CdxV1ProviderShare) SetMetadata(v ObjectMeta) {
	o.Metadata = &v
}

// GetConsumerUserName returns the ConsumerUserName field value if set, zero value otherwise.
func (o *CdxV1ProviderShare) GetConsumerUserName() string {
	if o == nil || o.ConsumerUserName == nil {
		var ret string
		return ret
	}
	return *o.ConsumerUserName
}

// GetConsumerUserNameOk returns a tuple with the ConsumerUserName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CdxV1ProviderShare) GetConsumerUserNameOk() (*string, bool) {
	if o == nil || o.ConsumerUserName == nil {
		return nil, false
	}
	return o.ConsumerUserName, true
}

// HasConsumerUserName returns a boolean if a field has been set.
func (o *CdxV1ProviderShare) HasConsumerUserName() bool {
	if o != nil && o.ConsumerUserName != nil {
		return true
	}

	return false
}

// SetConsumerUserName gets a reference to the given string and assigns it to the ConsumerUserName field.
func (o *CdxV1ProviderShare) SetConsumerUserName(v string) {
	o.ConsumerUserName = &v
}

// GetConsumerOrganizationName returns the ConsumerOrganizationName field value if set, zero value otherwise.
func (o *CdxV1ProviderShare) GetConsumerOrganizationName() string {
	if o == nil || o.ConsumerOrganizationName == nil {
		var ret string
		return ret
	}
	return *o.ConsumerOrganizationName
}

// GetConsumerOrganizationNameOk returns a tuple with the ConsumerOrganizationName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CdxV1ProviderShare) GetConsumerOrganizationNameOk() (*string, bool) {
	if o == nil || o.ConsumerOrganizationName == nil {
		return nil, false
	}
	return o.ConsumerOrganizationName, true
}

// HasConsumerOrganizationName returns a boolean if a field has been set.
func (o *CdxV1ProviderShare) HasConsumerOrganizationName() bool {
	if o != nil && o.ConsumerOrganizationName != nil {
		return true
	}

	return false
}

// SetConsumerOrganizationName gets a reference to the given string and assigns it to the ConsumerOrganizationName field.
func (o *CdxV1ProviderShare) SetConsumerOrganizationName(v string) {
	o.ConsumerOrganizationName = &v
}

// GetProviderUserName returns the ProviderUserName field value if set, zero value otherwise.
func (o *CdxV1ProviderShare) GetProviderUserName() string {
	if o == nil || o.ProviderUserName == nil {
		var ret string
		return ret
	}
	return *o.ProviderUserName
}

// GetProviderUserNameOk returns a tuple with the ProviderUserName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CdxV1ProviderShare) GetProviderUserNameOk() (*string, bool) {
	if o == nil || o.ProviderUserName == nil {
		return nil, false
	}
	return o.ProviderUserName, true
}

// HasProviderUserName returns a boolean if a field has been set.
func (o *CdxV1ProviderShare) HasProviderUserName() bool {
	if o != nil && o.ProviderUserName != nil {
		return true
	}

	return false
}

// SetProviderUserName gets a reference to the given string and assigns it to the ProviderUserName field.
func (o *CdxV1ProviderShare) SetProviderUserName(v string) {
	o.ProviderUserName = &v
}

// GetDeliveryMethod returns the DeliveryMethod field value if set, zero value otherwise.
func (o *CdxV1ProviderShare) GetDeliveryMethod() string {
	if o == nil || o.DeliveryMethod == nil {
		var ret string
		return ret
	}
	return *o.DeliveryMethod
}

// GetDeliveryMethodOk returns a tuple with the DeliveryMethod field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CdxV1ProviderShare) GetDeliveryMethodOk() (*string, bool) {
	if o == nil || o.DeliveryMethod == nil {
		return nil, false
	}
	return o.DeliveryMethod, true
}

// HasDeliveryMethod returns a boolean if a field has been set.
func (o *CdxV1ProviderShare) HasDeliveryMethod() bool {
	if o != nil && o.DeliveryMethod != nil {
		return true
	}

	return false
}

// SetDeliveryMethod gets a reference to the given string and assigns it to the DeliveryMethod field.
func (o *CdxV1ProviderShare) SetDeliveryMethod(v string) {
	o.DeliveryMethod = &v
}

// GetConsumerRestriction returns the ConsumerRestriction field value if set, zero value otherwise.
func (o *CdxV1ProviderShare) GetConsumerRestriction() CdxV1ProviderShareConsumerRestrictionOneOf {
	if o == nil || o.ConsumerRestriction == nil {
		var ret CdxV1ProviderShareConsumerRestrictionOneOf
		return ret
	}
	return *o.ConsumerRestriction
}

// GetConsumerRestrictionOk returns a tuple with the ConsumerRestriction field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CdxV1ProviderShare) GetConsumerRestrictionOk() (*CdxV1ProviderShareConsumerRestrictionOneOf, bool) {
	if o == nil || o.ConsumerRestriction == nil {
		return nil, false
	}
	return o.ConsumerRestriction, true
}

// HasConsumerRestriction returns a boolean if a field has been set.
func (o *CdxV1ProviderShare) HasConsumerRestriction() bool {
	if o != nil && o.ConsumerRestriction != nil {
		return true
	}

	return false
}

// SetConsumerRestriction gets a reference to the given CdxV1ProviderShareConsumerRestrictionOneOf and assigns it to the ConsumerRestriction field.
func (o *CdxV1ProviderShare) SetConsumerRestriction(v CdxV1ProviderShareConsumerRestrictionOneOf) {
	o.ConsumerRestriction = &v
}

// GetInvitedAt returns the InvitedAt field value if set, zero value otherwise.
func (o *CdxV1ProviderShare) GetInvitedAt() time.Time {
	if o == nil || o.InvitedAt == nil {
		var ret time.Time
		return ret
	}
	return *o.InvitedAt
}

// GetInvitedAtOk returns a tuple with the InvitedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CdxV1ProviderShare) GetInvitedAtOk() (*time.Time, bool) {
	if o == nil || o.InvitedAt == nil {
		return nil, false
	}
	return o.InvitedAt, true
}

// HasInvitedAt returns a boolean if a field has been set.
func (o *CdxV1ProviderShare) HasInvitedAt() bool {
	if o != nil && o.InvitedAt != nil {
		return true
	}

	return false
}

// SetInvitedAt gets a reference to the given time.Time and assigns it to the InvitedAt field.
func (o *CdxV1ProviderShare) SetInvitedAt(v time.Time) {
	o.InvitedAt = &v
}

// GetInviteExpiresAt returns the InviteExpiresAt field value if set, zero value otherwise.
func (o *CdxV1ProviderShare) GetInviteExpiresAt() time.Time {
	if o == nil || o.InviteExpiresAt == nil {
		var ret time.Time
		return ret
	}
	return *o.InviteExpiresAt
}

// GetInviteExpiresAtOk returns a tuple with the InviteExpiresAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CdxV1ProviderShare) GetInviteExpiresAtOk() (*time.Time, bool) {
	if o == nil || o.InviteExpiresAt == nil {
		return nil, false
	}
	return o.InviteExpiresAt, true
}

// HasInviteExpiresAt returns a boolean if a field has been set.
func (o *CdxV1ProviderShare) HasInviteExpiresAt() bool {
	if o != nil && o.InviteExpiresAt != nil {
		return true
	}

	return false
}

// SetInviteExpiresAt gets a reference to the given time.Time and assigns it to the InviteExpiresAt field.
func (o *CdxV1ProviderShare) SetInviteExpiresAt(v time.Time) {
	o.InviteExpiresAt = &v
}

// GetRedeemedAt returns the RedeemedAt field value if set, zero value otherwise.
func (o *CdxV1ProviderShare) GetRedeemedAt() time.Time {
	if o == nil || o.RedeemedAt == nil {
		var ret time.Time
		return ret
	}
	return *o.RedeemedAt
}

// GetRedeemedAtOk returns a tuple with the RedeemedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CdxV1ProviderShare) GetRedeemedAtOk() (*time.Time, bool) {
	if o == nil || o.RedeemedAt == nil {
		return nil, false
	}
	return o.RedeemedAt, true
}

// HasRedeemedAt returns a boolean if a field has been set.
func (o *CdxV1ProviderShare) HasRedeemedAt() bool {
	if o != nil && o.RedeemedAt != nil {
		return true
	}

	return false
}

// SetRedeemedAt gets a reference to the given time.Time and assigns it to the RedeemedAt field.
func (o *CdxV1ProviderShare) SetRedeemedAt(v time.Time) {
	o.RedeemedAt = &v
}

// GetProviderUser returns the ProviderUser field value if set, zero value otherwise.
func (o *CdxV1ProviderShare) GetProviderUser() GlobalObjectReference {
	if o == nil || o.ProviderUser == nil {
		var ret GlobalObjectReference
		return ret
	}
	return *o.ProviderUser
}

// GetProviderUserOk returns a tuple with the ProviderUser field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CdxV1ProviderShare) GetProviderUserOk() (*GlobalObjectReference, bool) {
	if o == nil || o.ProviderUser == nil {
		return nil, false
	}
	return o.ProviderUser, true
}

// HasProviderUser returns a boolean if a field has been set.
func (o *CdxV1ProviderShare) HasProviderUser() bool {
	if o != nil && o.ProviderUser != nil {
		return true
	}

	return false
}

// SetProviderUser gets a reference to the given GlobalObjectReference and assigns it to the ProviderUser field.
func (o *CdxV1ProviderShare) SetProviderUser(v GlobalObjectReference) {
	o.ProviderUser = &v
}

// GetServiceAccount returns the ServiceAccount field value if set, zero value otherwise.
func (o *CdxV1ProviderShare) GetServiceAccount() GlobalObjectReference {
	if o == nil || o.ServiceAccount == nil {
		var ret GlobalObjectReference
		return ret
	}
	return *o.ServiceAccount
}

// GetServiceAccountOk returns a tuple with the ServiceAccount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CdxV1ProviderShare) GetServiceAccountOk() (*GlobalObjectReference, bool) {
	if o == nil || o.ServiceAccount == nil {
		return nil, false
	}
	return o.ServiceAccount, true
}

// HasServiceAccount returns a boolean if a field has been set.
func (o *CdxV1ProviderShare) HasServiceAccount() bool {
	if o != nil && o.ServiceAccount != nil {
		return true
	}

	return false
}

// SetServiceAccount gets a reference to the given GlobalObjectReference and assigns it to the ServiceAccount field.
func (o *CdxV1ProviderShare) SetServiceAccount(v GlobalObjectReference) {
	o.ServiceAccount = &v
}

// GetCloudCluster returns the CloudCluster field value if set, zero value otherwise.
func (o *CdxV1ProviderShare) GetCloudCluster() EnvScopedObjectReference {
	if o == nil || o.CloudCluster == nil {
		var ret EnvScopedObjectReference
		return ret
	}
	return *o.CloudCluster
}

// GetCloudClusterOk returns a tuple with the CloudCluster field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CdxV1ProviderShare) GetCloudClusterOk() (*EnvScopedObjectReference, bool) {
	if o == nil || o.CloudCluster == nil {
		return nil, false
	}
	return o.CloudCluster, true
}

// HasCloudCluster returns a boolean if a field has been set.
func (o *CdxV1ProviderShare) HasCloudCluster() bool {
	if o != nil && o.CloudCluster != nil {
		return true
	}

	return false
}

// SetCloudCluster gets a reference to the given EnvScopedObjectReference and assigns it to the CloudCluster field.
func (o *CdxV1ProviderShare) SetCloudCluster(v EnvScopedObjectReference) {
	o.CloudCluster = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *CdxV1ProviderShare) GetStatus() CdxV1ProviderShareStatus {
	if o == nil || o.Status == nil {
		var ret CdxV1ProviderShareStatus
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CdxV1ProviderShare) GetStatusOk() (*CdxV1ProviderShareStatus, bool) {
	if o == nil || o.Status == nil {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *CdxV1ProviderShare) HasStatus() bool {
	if o != nil && o.Status != nil {
		return true
	}

	return false
}

// SetStatus gets a reference to the given CdxV1ProviderShareStatus and assigns it to the Status field.
func (o *CdxV1ProviderShare) SetStatus(v CdxV1ProviderShareStatus) {
	o.Status = &v
}

// Redact resets all sensitive fields to their zero value.
func (o *CdxV1ProviderShare) Redact() {
	o.recurseRedact(o.ApiVersion)
	o.recurseRedact(o.Kind)
	o.recurseRedact(o.Id)
	o.recurseRedact(o.Metadata)
	o.recurseRedact(o.ConsumerUserName)
	o.recurseRedact(o.ConsumerOrganizationName)
	o.recurseRedact(o.ProviderUserName)
	o.recurseRedact(o.DeliveryMethod)
	o.recurseRedact(o.ConsumerRestriction)
	o.recurseRedact(o.InvitedAt)
	o.recurseRedact(o.InviteExpiresAt)
	o.recurseRedact(o.RedeemedAt)
	o.recurseRedact(o.ProviderUser)
	o.recurseRedact(o.ServiceAccount)
	o.recurseRedact(o.CloudCluster)
	o.recurseRedact(o.Status)
}

func (o *CdxV1ProviderShare) recurseRedact(v interface{}) {
	type redactor interface {
		Redact()
	}
	if r, ok := v.(redactor); ok {
		r.Redact()
	} else {
		val := reflect.ValueOf(v)
		if val.Kind() == reflect.Ptr {
			val = val.Elem()
		}
		switch val.Kind() {
		case reflect.Slice, reflect.Array:
			for i := 0; i < val.Len(); i++ {
				// support data types declared without pointers
				o.recurseRedact(val.Index(i).Interface())
				// ... and data types that were declared without but need pointers (for Redact)
				if val.Index(i).CanAddr() {
					o.recurseRedact(val.Index(i).Addr().Interface())
				}
			}
		}
	}
}

func (o CdxV1ProviderShare) zeroField(v interface{}) {
	p := reflect.ValueOf(v).Elem()
	p.Set(reflect.Zero(p.Type()))
}

func (o CdxV1ProviderShare) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.ApiVersion != nil {
		toSerialize["api_version"] = o.ApiVersion
	}
	if o.Kind != nil {
		toSerialize["kind"] = o.Kind
	}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.Metadata != nil {
		toSerialize["metadata"] = o.Metadata
	}
	if o.ConsumerUserName != nil {
		toSerialize["consumer_user_name"] = o.ConsumerUserName
	}
	if o.ConsumerOrganizationName != nil {
		toSerialize["consumer_organization_name"] = o.ConsumerOrganizationName
	}
	if o.ProviderUserName != nil {
		toSerialize["provider_user_name"] = o.ProviderUserName
	}
	if o.DeliveryMethod != nil {
		toSerialize["delivery_method"] = o.DeliveryMethod
	}
	if o.ConsumerRestriction != nil {
		toSerialize["consumer_restriction"] = o.ConsumerRestriction
	}
	if o.InvitedAt != nil {
		toSerialize["invited_at"] = o.InvitedAt
	}
	if o.InviteExpiresAt != nil {
		toSerialize["invite_expires_at"] = o.InviteExpiresAt
	}
	if o.RedeemedAt != nil {
		toSerialize["redeemed_at"] = o.RedeemedAt
	}
	if o.ProviderUser != nil {
		toSerialize["provider_user"] = o.ProviderUser
	}
	if o.ServiceAccount != nil {
		toSerialize["service_account"] = o.ServiceAccount
	}
	if o.CloudCluster != nil {
		toSerialize["cloud_cluster"] = o.CloudCluster
	}
	if o.Status != nil {
		toSerialize["status"] = o.Status
	}
	return json.Marshal(toSerialize)
}

type NullableCdxV1ProviderShare struct {
	value *CdxV1ProviderShare
	isSet bool
}

func (v NullableCdxV1ProviderShare) Get() *CdxV1ProviderShare {
	return v.value
}

func (v *NullableCdxV1ProviderShare) Set(val *CdxV1ProviderShare) {
	v.value = val
	v.isSet = true
}

func (v NullableCdxV1ProviderShare) IsSet() bool {
	return v.isSet
}

func (v *NullableCdxV1ProviderShare) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCdxV1ProviderShare(val *CdxV1ProviderShare) *NullableCdxV1ProviderShare {
	return &NullableCdxV1ProviderShare{value: val, isSet: true}
}

func (v NullableCdxV1ProviderShare) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCdxV1ProviderShare) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
