// Copyright 2021 Confluent Inc. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*
Stream Share APIs

# Introduction

API version: 0.1.0-alpha0
Contact: cdx@confluent.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1

import (
	"encoding/json"
)

import (
	"reflect"
)

// CdxV1OptIn Stream sharing opt in options  ## The Opt Ins Model <SchemaDefinition schemaRef=\"#/components/schemas/cdx.v1.OptIn\" />
type CdxV1OptIn struct {
	// APIVersion defines the schema version of this representation of a resource.
	ApiVersion *string `json:"api_version,omitempty"`
	// Kind defines the object this REST resource represents.
	Kind *string `json:"kind,omitempty"`
	// Enable stream sharing for the organization
	StreamShareEnabled *bool `json:"stream_share_enabled,omitempty"`
}

// NewCdxV1OptIn instantiates a new CdxV1OptIn object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCdxV1OptIn() *CdxV1OptIn {
	this := CdxV1OptIn{}
	return &this
}

// NewCdxV1OptInWithDefaults instantiates a new CdxV1OptIn object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCdxV1OptInWithDefaults() *CdxV1OptIn {
	this := CdxV1OptIn{}
	return &this
}

// GetApiVersion returns the ApiVersion field value if set, zero value otherwise.
func (o *CdxV1OptIn) GetApiVersion() string {
	if o == nil || o.ApiVersion == nil {
		var ret string
		return ret
	}
	return *o.ApiVersion
}

// GetApiVersionOk returns a tuple with the ApiVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CdxV1OptIn) GetApiVersionOk() (*string, bool) {
	if o == nil || o.ApiVersion == nil {
		return nil, false
	}
	return o.ApiVersion, true
}

// HasApiVersion returns a boolean if a field has been set.
func (o *CdxV1OptIn) HasApiVersion() bool {
	if o != nil && o.ApiVersion != nil {
		return true
	}

	return false
}

// SetApiVersion gets a reference to the given string and assigns it to the ApiVersion field.
func (o *CdxV1OptIn) SetApiVersion(v string) {
	o.ApiVersion = &v
}

// GetKind returns the Kind field value if set, zero value otherwise.
func (o *CdxV1OptIn) GetKind() string {
	if o == nil || o.Kind == nil {
		var ret string
		return ret
	}
	return *o.Kind
}

// GetKindOk returns a tuple with the Kind field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CdxV1OptIn) GetKindOk() (*string, bool) {
	if o == nil || o.Kind == nil {
		return nil, false
	}
	return o.Kind, true
}

// HasKind returns a boolean if a field has been set.
func (o *CdxV1OptIn) HasKind() bool {
	if o != nil && o.Kind != nil {
		return true
	}

	return false
}

// SetKind gets a reference to the given string and assigns it to the Kind field.
func (o *CdxV1OptIn) SetKind(v string) {
	o.Kind = &v
}

// GetStreamShareEnabled returns the StreamShareEnabled field value if set, zero value otherwise.
func (o *CdxV1OptIn) GetStreamShareEnabled() bool {
	if o == nil || o.StreamShareEnabled == nil {
		var ret bool
		return ret
	}
	return *o.StreamShareEnabled
}

// GetStreamShareEnabledOk returns a tuple with the StreamShareEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CdxV1OptIn) GetStreamShareEnabledOk() (*bool, bool) {
	if o == nil || o.StreamShareEnabled == nil {
		return nil, false
	}
	return o.StreamShareEnabled, true
}

// HasStreamShareEnabled returns a boolean if a field has been set.
func (o *CdxV1OptIn) HasStreamShareEnabled() bool {
	if o != nil && o.StreamShareEnabled != nil {
		return true
	}

	return false
}

// SetStreamShareEnabled gets a reference to the given bool and assigns it to the StreamShareEnabled field.
func (o *CdxV1OptIn) SetStreamShareEnabled(v bool) {
	o.StreamShareEnabled = &v
}

// Redact resets all sensitive fields to their zero value.
func (o *CdxV1OptIn) Redact() {
	o.recurseRedact(o.ApiVersion)
	o.recurseRedact(o.Kind)
	o.recurseRedact(o.StreamShareEnabled)
}

func (o *CdxV1OptIn) recurseRedact(v interface{}) {
	type redactor interface {
		Redact()
	}
	if r, ok := v.(redactor); ok {
		r.Redact()
	} else {
		val := reflect.ValueOf(v)
		if val.Kind() == reflect.Ptr {
			val = val.Elem()
		}
		switch val.Kind() {
		case reflect.Slice, reflect.Array:
			for i := 0; i < val.Len(); i++ {
				// support data types declared without pointers
				o.recurseRedact(val.Index(i).Interface())
				// ... and data types that were declared without but need pointers (for Redact)
				if val.Index(i).CanAddr() {
					o.recurseRedact(val.Index(i).Addr().Interface())
				}
			}
		}
	}
}

func (o CdxV1OptIn) zeroField(v interface{}) {
	p := reflect.ValueOf(v).Elem()
	p.Set(reflect.Zero(p.Type()))
}

func (o CdxV1OptIn) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.ApiVersion != nil {
		toSerialize["api_version"] = o.ApiVersion
	}
	if o.Kind != nil {
		toSerialize["kind"] = o.Kind
	}
	if o.StreamShareEnabled != nil {
		toSerialize["stream_share_enabled"] = o.StreamShareEnabled
	}
	return json.Marshal(toSerialize)
}

type NullableCdxV1OptIn struct {
	value *CdxV1OptIn
	isSet bool
}

func (v NullableCdxV1OptIn) Get() *CdxV1OptIn {
	return v.value
}

func (v *NullableCdxV1OptIn) Set(val *CdxV1OptIn) {
	v.value = val
	v.isSet = true
}

func (v NullableCdxV1OptIn) IsSet() bool {
	return v.isSet
}

func (v *NullableCdxV1OptIn) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCdxV1OptIn(val *CdxV1OptIn) *NullableCdxV1OptIn {
	return &NullableCdxV1OptIn{value: val, isSet: true}
}

func (v NullableCdxV1OptIn) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCdxV1OptIn) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
